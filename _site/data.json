[{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"soledadb\\\" date=\\\"1153754187\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Group control/behavior\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> INITIATED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nThis system has been initiated.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> NPC group control/behavior (the\nmasses).\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> MEDIUM\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Mid-March, 2004.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe group/control NIP-system will use NPC\\'s sorted into categories (by\nthe builder), such as \\* 1. couriers \\* 2. servants \\* 3. commoners \\*\n4. men \\* 5. humans\n\nThese categories will be used (in list order) to include NPC\\'s into a\ngroup, based on the group NPC\\'s settings.\n\nSettings would be things like \\\"minimum amount of NPC\\'s in group\\\"\n(before it\\'s disbanded/required for it to be formed).\n\nThe system would also include and consider such things as factions. Two\nNPC\\'s from different factions would never merge into a single group.\n\nNPC\\'s that enter a group will be disabled (and actually transported out\nof the environment) until the NPC\\'s either leave the group (randomly\nrequested by the group itself), or if the group is disbanded.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThe system will be used to describe masses of people/whatever in an\nenvironment, without keeping each and every NPC running and spamming the\nenvironment with descriptions etc. The group would act as a mass of\nNPC\\'s on its own.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n group The main group library, which will include features to\n join/leave/disband/create groups, etc.\n\n\\<font class=\\\"query\\\"\\>SIGNALS\\</font\\>\n\n [SIGNAL] [Priority] [Description]\n GROUP-CONTROL 60000 The main group-control signal will check for NPC's to\n include in the group, and will force others to leave it\n at random.\n\n\\<font class=\\\"query\\\"\\>HOOKS\\</font\\>\n\n [Hook] [Using signals] [Description]\n group-control DELAY, GROUP-CONTROL The sig-hook object for GROUP-CONTROL\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nNone, yet.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n Annie Warren!!! ocannee@mchsi.com \n KathyN katherin.noble@sbcglobal.net\n SoledadB reveur@marrach.skotos.net\n\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 15 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoGroupControl.md","path":"docs/unedited/NIPTodoGroupControl.md","url":"/docs/unedited/NIPTodoGroupControl.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1067938629\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<font class=\\\"lib\\\"\\>L\\</font\\> \\<font\nclass=\\\"hook\\\"\\>H\\</font\\>\n","dir":"/docs/unedited/","name":"NipLH.md","path":"docs/unedited/NipLH.md","url":"/docs/unedited/NipLH.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1067938599\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<font class=\\\"sign\\\"\\>S\\</font\\> \\<font\nclass=\\\"hook\\\"\\>H\\</font\\>\n","dir":"/docs/unedited/","name":"NipSH.md","path":"docs/unedited/NipSH.md","url":"/docs/unedited/NipSH.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145294\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: Appearance\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nA library of the appearance category handles output, such as emoting.\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.) %META:TOPICMOVED{by=\\\"kallea\\\"\ndate=\\\"1085145294\\\" from=\\\"Builders.NIPLibRefCategoryAppearance\\\"\nto=\\\"Builders.NIPCategoryAppearance\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryAppearance.md","path":"docs/unedited/NIPCategoryAppearance.md","url":"/docs/unedited/NIPCategoryAppearance.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145372\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: Example\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nExample category libraries are non-to-fully-functional libraries,\nusually somewhat static. Their purpose is to demonstrate how to\nincorporate various specific NIP features into a particular solution in\na particular subject.\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.) %META:TOPICMOVED{by=\\\"kallea\\\"\ndate=\\\"1085145372\\\" from=\\\"Builders.NIPLibRefCategoryExample\\\"\nto=\\\"Builders.NIPCategoryExample\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryExample.md","path":"docs/unedited/NIPCategoryExample.md","url":"/docs/unedited/NIPCategoryExample.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145431\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: External\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nLibraries of the external category are indirectly related to the system\nitself, but required to enable functionality. The single example right\nnow is \\\"[mountrider](NIPLibRefMountrider),\\\" which is an external\nlibrary used by \\\"[mounting](NIPLibRefMounting)\\\". The external library\ncontains the various functionality which is inherited in the rider of a\nmount, while the mounting library specifically contains the\nfunctionality for the aspects of \\\"the mount\\\".\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\n%META:TOPICMOVED{by=\\\"kallea\\\" date=\\\"1085145431\\\"\nfrom=\\\"Builders.NIPLibRefCategoryExternal\\\"\nto=\\\"Builders.NIPCategoryExternal\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryExternal.md","path":"docs/unedited/NIPCategoryExternal.md","url":"/docs/unedited/NIPCategoryExternal.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085142060\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: Internal\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nThe internal libraries are libraries exclusively used internally by NIP.\nOftenmost, these libraries contain core functionality used by other\nlibraries to perform some task or provide some feature. For example\n\\\"[act-interpreter](NIPLibRefActInterpreter)\\\" - which interprets and\ndivides actions into four categories (r/t, +/-) then used by e.g.\n[relations](NIPLibRefRelations). Another example is\n[resource-control](NIPLibRefResourceControl) which is exclusively\ninternal, handling the detection of an idle environment/the deactivation\nof unnecessary NPC\\'s.\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.) %META:TOPICMOVED{by=\\\"kallea\\\"\ndate=\\\"1085145459\\\" from=\\\"Builders.NIPLibRefCategoryInternal\\\"\nto=\\\"Builders.NIPCategoryInternal\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryInternal.md","path":"docs/unedited/NIPCategoryInternal.md","url":"/docs/unedited/NIPCategoryInternal.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085142180\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: Service\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nService libraries provide some service (not necessarily a beneficial (to\nthe target) service) of some sort. [Mounting](NIPLibRefMounting) is a\ngood example of a service library. As is [fighting](NIPLibRefFighting),\ndespite the somewhat dubious \\\"fighting is a service?\\\"\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.) %META:TOPICMOVED{by=\\\"kallea\\\"\ndate=\\\"1085145486\\\" from=\\\"Builders.NIPLibRefCategoryService\\\"\nto=\\\"Builders.NIPCategoryService\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryService.md","path":"docs/unedited/NIPCategoryService.md","url":"/docs/unedited/NIPCategoryService.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235627\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> b { font-weight: bold;\n} .query { font-size: 12pt; color: \\#ff0000; font-weight: bold; } .title\n{ font-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPCategoryStyle.md","path":"docs/unedited/NIPCategoryStyle.md","url":"/docs/unedited/NIPCategoryStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085143140\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPTempLibRef\\\"}%\n[NIPCategoryStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CATEGORY SPECIFICATION: Undefined\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SPECIFICATION:\\</font\\> \\<hr noshade/\\>\n\nUndefined libraries belong to no category at the moment. These libraries\nshould eventually be moved into an actual category. The following\ncategories exist:\n\n\\* [Appearance](NIPCategoryAppearance) \\*\n[Behavior](NIPCategoryBehavior) \\* [Example](NIPCategoryExample) \\*\n[Extension](NIPCategoryExtension) \\* [External](NIPCategoryExternal) \\*\n[Internal](NIPCategoryInternal) \\* [Service](NIPCategoryService)\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCATEGORY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\n%META:TOPICMOVED{by=\\\"kallea\\\" date=\\\"1085145514\\\"\nfrom=\\\"Builders.NIPLibRefCategoryUndefined\\\"\nto=\\\"Builders.NIPCategoryUndefined\\\"}%\n","dir":"/docs/unedited/","name":"NIPCategoryUndefined.md","path":"docs/unedited/NIPCategoryUndefined.md","url":"/docs/unedited/NIPCategoryUndefined.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1099261572\\\" format=\\\"1.0\\\"\nversion=\\\"1.9\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE} [NIPRefStuff]{.twiki-macro .INCLUDE}\n\nMain.KalleAlm \\<ul\\> **08 Mar 2004** \\<li\\>Fixed mounting issue with\nspawned mount. (exported properties) \\<li\\>Added \\\"mounted\\\" and\n\\\"unmounted\\\" adjectives to mounts depending on if they were mounted or\nnot (at request by the LC team) \\<br/\\>**30 Mar 2004** \\<li\\>Added\nkiller library to list, and updated movement library to allow external\nusage of the \\'leave through random exit\\' functionality. \\<br/\\>**19\nMay 2004** \\<li\\>Moved \\\"system:revision\\\" property out of\n<Data:NIP:system> into Lib:NIP:updates, to promote syncing.\n\\<li\\>Updated recording utility to include track link vectoring.\nAdditionally updated [the how-to record a behavior data object\ndocument](NIPHowRecord). \\<li\\>Added [replaying](NIPLibRefReplaying)\nlibrary. \\<br/\\>**21 May 2004** \\<li\\>Introduced categories to the\nlibrary references and updated NIPSystemReference page and each library\nreference page. \\<br/\\>**22 May 2004** \\<li\\>Finished the [recording and\nbehavior](NIPClassRecording) class. God, I\\'m tired of writing.\n\\<br/\\>**06 Aug 2004** \\<li\\>Added [spawner](NIPTodoSpawner) to\ntodo-list after request from Lovecraft team. \\<br/\\>**10 Aug 2004**\n\\<li\\>Completed [spawner](NIPLibRefSpawner). \\<li\\>Updated documentation\nfor the [trading](NIPLibRefTrading) library to reflect internal changes.\n\\<li\\>\\... and my god, we\\'ve reached 300 NIP documents. \\<br/\\>**18 Aug\n2004** \\<li\\>Completed and updated new library\n[wearer](NIPLibRefWearer). \\<li\\>Began writing the [Using behavior in\nhome-made code](NIPRefBehavior) reference. \\<br/\\>**31 Oct 2004 \\[NC\\]**\n\\<li\\>Changed hacky \\\"daily update\\\" features (courier, trash) into\nusing the not-so-hacky CronDaemon. \\<li\\>Added library\n[autostart](NIPLibRefAutostart). \\<li\\>Revision \\#26 (Aug 23): The new\nproperty type map system was implemented in every present (official) NIP\nlibrary, and thus, each library must be scanned and the property map\nentries retrieved. \\<li\\>Revision \\#27 (Oct 13): Musician hook tweak due\nto bug fix. \\<li\\>Revision \\#28 (Oct 27): The script \\\"merry:lib:slay\\\"\nwas added, to enable a \\'trashcan\\' feature for trashed items.\n\\<li\\>Revision \\#29 (Oct 29): Courier tweak to make couriers aware of\nteleporting recipients: The witness script \\\"witness:teleport%nip:core\\\"\nwas added. \\</ul\\>\n","dir":"/docs/unedited/","name":"NIPChangeLog.md","path":"docs/unedited/NIPChangeLog.md","url":"/docs/unedited/NIPChangeLog.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1116568320\\\" format=\\\"1.0\\\"\nversion=\\\"1.8\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPClassStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CLASS: Recording and behavior - \\[I - Making it\n\\\"behave.\\\"\\]\\</font\\>\n\n\\<font class=\\\"query\\\"\\>AUDIENCE:\\</font\\> BEGINNERS\n\n\\<font class=\\\"query\\\"\\>PREREQUISITE KNOWLEDGE:\\</font\\>\n\nYou need no knowledge prior to reading this class, except a basic\nunderstanding on how the SkotOS works, with staff (+)-commands, etc.\n\n\\<font class=\\\"query\\\"\\>SUMMARY:\\</font\\>\n\nThis class is divided into five chapters (this being the first). Each\nchapter covers one fundamentally isolated part of the NIP record system.\n\n\\* Chapter I - Making it \\\"behave.\\\" \\* [Chapter II -\nFreemoting.](NIPClassRecordingII) \\* [Chapter III - The scene\nmodel.](NIPClassRecordingIII) \\* [Chapter IV - Tracking and\nreplaying.](NIPClassRecordingIV) \\* [Chapter V - The setting\nmodel.](NIPClassRecordingV)\n\nYou are currently reading Chapter I - Making it \\\"behave.\\\" This chapter\nis comprised of the following:\n\n[]{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n## Introduction to behavior.\n\nOne of the major points of the NIP system is the flexibility and ease of\nuse regarding the concept of behavior. The NIP system divides behavior\ninto three classes: \\* Parsing. \\* Free-emoting. \\* Pausing.\n\nParsing is the act of behaving through the usage of the internal game\nparser. This is done by creating a set of complex properties which all\nmake up each possible parser action.\n\nFree-emoting is the act of behaving through emitting text.\n\nPausing is the act of waiting. We will not cover pausing at all in this\nchapter, so you can safely ignore this for now.\n\nBehaving is a fundamental requirement for all living beings in a\ntext-based environment (it\\'s not entirely as important for the dead -\nlike chairs and coffee cups). As such, it is important to understand the\nbehavior system structure.\n\nThe most logical thing to do would be to begin with the most basic form\nof behavior. We won\\'t do that, though, because the most logical form,\ncodewise, is not necessarily the most intuitive form to the user. As\nsuch, we\\'re going to begin with the parser-based recording. We will set\nup, record into, and use something called a behavior data object (BDO).\n\n------------------------------------------------------------------------\n\n## Correcting invalidly recorded data.\n\nSometimes, you spot a typo or the action just doesn\\'t come out right.\nTo remove it and (possibly) re-record it corrected, you use the \\'\\#\\'\nfeature.\n\n\\* If you wish to remove this: `smile happily \"!Hi tehre!\"` you would\ntype: `say \"#!\"` \\* To remove this: `say \">Kalle looks ahppy.\"` type:\n`say \"#>\"`\n\nEach time you invoke a \\\"\\#\\<type\\>\\\" command, you remove the latest\nentry of that type. You may do this multiple times to remove several\nentries.\n\n------------------------------------------------------------------------\n\n## The +nip record tool.\n\nAvailable to make things a little easier for us is the +nip tool.\nSpecifically, we\\'re going to use +nip\\'s \\\"record\\\" function to control\nour recording session(s). Further on, we\\'ll expand our usage of the\n+nip tool a little, but for now, let\\'s look at the usage for +nip\n\\\"record\\\" (which is the most complex syntax of all +nip tools, thus\nfar):\n\n`+nip \"record [start|stop|switch] [<woename>] <i>PAGE</i>\"`\n\nYes, that does look a little messy. Split it up into examples and it\nmakes a little more sense:\n\n`1. +nip \"record start Kalle:npc:behavior HAPPY\"`\n\n`2. +nip \"record switch SAD\"`\n\n`3. +nip \"record stop\"`\n\nConclusively, the record tool is used to initiate and end recording\nsessions. Recording sessions consist of three parts - receiver,\ncommander and session identifier. \\* Receiver = the behavior data object\n(BDO). \\* Commander = the **possessed body** from which the +nip\n\\\"record\\\" command was issued. \\* Session identifier = also known as\n\\\"MOOD\\\" or \\\"SITUATION\\\", this is the identifier which distinguishes\nbetween multiple topics in the same BDO.\n\nEach of these three parts are required in order to begin a recording\nsession. The +nip \\\"record switch\\\" function is used to switch between\nsession identifiers without switching the defined receiver.\n\nThere is one special session identifier that you should know about.\nIt\\'s called \\\"DB,\\\" and it is used in place of almost all other\nidentifiers, if they are not present in the NPC. We\\'re going to use the\n\\\"DB\\\" identifier throughout the first part of this chapter.\n\n------------------------------------------------------------------------\n\n## Setting up a new behavior data object.\n\n\\<table align=\\\"center\\\" width=\\\"75%\\\" style=\\\"border: solid \\#ff0000\n1px;\\\"\\>\\<tr\\>\\<td\\>\\<font color=red\\>Note:\\</font\\>\\<br/\\> Whichever\nbody you\\'re currently possessing will serve as the commander throughout\nthis class. You should consistently use the same body throughout it,\nhowever, and not jump between bodies unless necessary. Once you\\'re a\nbit more experienced with how recording works, you can do a little as\nyou wish, but do recall that recording session data is stored in **your\nbody**. To begin recording in another body, you\\'d have to establish a\nnew recording session in that body.\\</td\\>\\</tr\\>\\</table\\>\n\n1 The first thing we want to do is create a new property container,\nwhich will serve as our BDO - the receiver. So we type:\\<verbatim\\>+cobj\npropcontainer *Yourgame*:coders:*yourname*:myFirstBDO\\</verbatim\\> (In\nmy case, that would be\n`+cobj propcontainer Mortalis:coders:kalle:myFirstBDO`.) 2 Secondly, we\nneed to establish a recording session by connecting our currently\npossessed body with the property container we just\ncreated:\\<verbatim\\>+nip \\\"record start\n*Yourgame*:coders:*yourname*:myFirstBDO DB\\\"\\</verbatim\\>As you see, the\nvery last word in the command is `\"DB\"`. We are establishing a recording\nsession in our body, connecting ourselves with the property container.\nWhenever we record, we will feed this through the `\"DB\"` session\nidentifier into the property container. (This sounds complex, but it\\'s\nas simple as it gets, and perfectly reasonable in due time. For now,\njust nod and smile if you don\\'t get it all immediately.)\n\nVoila. We\\'ve just set up and connected with a BDO. We\\'re now ready to\nbegin the actual recording.\n\n------------------------------------------------------------------------\n\n## Recording syntax\n\nIf you start moving around, saying things, smiling, etc. you will notice\nthat there\\'s little difference now than before you connected with the\nBDO. This is because by default, the recorder will ignore all input,\nunless you specifically request otherwise. If we wish for our NPC to\nsmile, at times, we would then do the following:\n\n \\> smile\n You smile\n\n*Nothing happens, because we need to request that the recorder records.*\n\n \\> smile \"!\"\n You smile, \"!\"\n [STO:1]\n\nTake note of the difference between the two smiles above. Only the\nsecond smile, in which the user added an exclamation mark () as an evoke\nto the parser, was there any type of indication that the recorder\nnoticed the action. The `[STO:1]` line specifically means, \\\"I stored a\nregular parse - we now have 1 regular parses in total for this\nsession/BDO.\\\" As you continue recording, you will notice that the\nnumber after `STO:` increments by one each time.\n\nEvokes (spoken sentences) are added by beginning the sentence with an\nexclamation mark (), and then continuing as usual.\n\n \\> smile \"I like soup!\"\n You smile, \"I like soup!\"\n\n*The above was not recorded. It did not begin with a !*\n\n \\> smile \"!I like soup!\"\n You smile, \"!I like soup!\"\n [STO:2]\n\n\\<table align=\\\"center\\\" width=\\\"75%\\\" style=\\\"border: solid \\#ff0000\n1px;\\\"\\>\\<tr\\>\\<td\\>\\<font color=red\\>Warning:\\</font\\>\\<br/\\> Presume\nthat you make a BDO for a shark, and use your regular humanoid body to\ncreate the BDO data. The system is going to presume that you know what\nyou\\'re doing when you assign BDO\\'s to bodies, and will crash **hard**\nwhen it tries to e.g. wiggle its arm, whilst possessing a quite arm-less\nshark. Similarly, you will have little luck in trying to use any\nnon-humanoid details which a shark might possess (such as fins) unless\nyou possess a shark object while doing the recording. In general, it is\nrecommended that you possess the odd bodies before you record for\nthem.\\</td\\>\\</tr\\>\\</table\\>\n\n------------------------------------------------------------------------\n\n## Disabling the recorder.\n\nThe recorder should be disabled when we\\'re done. If it\\'s not, the\nsession is going to remain until we either 1) establish a new session to\nanother BDO (two sessions cannot exist simultaneously), or 2) we disable\nthe recorder.\n\nTo disable the recorder, we use the aforementioned +nip \\\"record stop\\\"\nfunctionality.\n\n +nip \"record stop\"\n\n------------------------------------------------------------------------\n\n## Results.\n\nPresuming you\\'ve recorded a couple of parser moves, we\\'re now going\nahead to configure our body as a nipper, using the\n[emoting](NIPLibRefEmoting) library.\n\n1 First off, we need to turn our regular woe object into a nipper\nobject. We do this through another +nip tool \\-- \\\"set\\\".\nType:\\<verbatim\\>+nip \\\"set Woename\\\"\\</verbatim\\>- where Woename is the\nwoename for your object. (If you\\'ve already got an NPC set up and just\nwant the configurative stuff, jump down to 4.) 2 Secondly, summon the\nobject unless it\\'s in your environment already.\\<verbatim\\>+summon\n*Woename*\\</verbatim\\> 3 Add the [emoting](NIPLibRefEmoting) library to\nthe NPC, unless the NPC is using it already.\\<verbatim\\>+setp \\<nipper\\>\n\\\"add emoting\\\"\\</verbatim\\> 4 Now we need to tell the nipper that it\nshould use our new BDO when it acts. We do this simply by setting the\nproperty `nip:behavior:db` in the nipper to the object reference for the\nBDO itself, `<<i>Yourgame</i>:coders:<i>yourname</i>:myFirstBDO>`. Thus,\nwe type:\\<verbatim\\>+setp \\<nipper\\> \\\"nip:behavior:db\n\\<Mortalis:coders:kalle:myFirstBDO\\>\\\"\\</verbatim\\> 5 For testing\npurposes, we\\'re going to temporarily set the emoting frequency to 1\n(100/1 % chance).\\<verbatim\\>+setp \\<nipper\\>\n\\\"nip:trait:emoting:frequency 1\\\"\\</verbatim\\> 6 Finally, we enable the\nnipper and wait around a minute. It should start spamming us like crazy\nwith random selections from the recorded actions we performed a moment\nago.\\<verbatim\\>+nip \\<nipper\\> \\\"live\\\"\\</verbatim\\>\n\nIf you feel confident that things worked as they should, feel free to\nignore the \\\"Log start-finish\\\" section in each chapter, as it is mostly\nthere as a secondary demonstration of what we\\'re doing.\n\n------------------------------------------------------------------------\n\n## Log start-finish.\n\nAt the end of each chapter, there is a log describing the (visible)\nactions that we did, in order.\n\n ---\n <b>> +cobj propcontainer Kalle:myFirstBDO</b>\n Done!\n <b>> +nip \"record start Kalle:myFirstBDO DB</b>\n Begun recording for mood/condition 'DB' in &lt;Kalle:thug-rabbit>. When you are done, type: +nip \"record stop\"\n <b>> smile</b>\n You smile.\n <b>> smile \"!</b>\n You smile, \"!\"\n [STO:1]\n <b>> smile \"I like soup!</b>\n You smile, \"I like soup!\"\n <b>> smile \"!I like soup!</b>\n You smile, \"!I like soup!\"\n [STO:2]\n <b>> +nip \"record stop</b>\n Stopped recording in &lt;Kalle:thug-rabbit>.\n <b>> +obname me</b>\n &lt;Kalle:thug-rabbit>; detail \"default\"\n <b>> +nip \"set Kalle:thug-rabbit</b>\n WELCOME TO THE 'NIP' CNPC SYSTEM!\n\n Hold one moment while the core library is set up in &lt;Kalle:thug-rabbit> ...\n --> Implementing base.\n --> Adding base libraries.\n [cut]\n --> Inserting system signals.\n [cut]\n --> Setting revision according to current system state.\n Done!\n <b>> +setp me \"add emoting</b>\n Setting 'add' in <Kalle:thug-rabbit> to \"emoting\".\n [cut]\n The 'emoting' library/hook has been loaded. Before your NPC will react, however, you must use (and make, if you haven't already) a behavior database.\n &lt;Lib:NIP:lib:emoting> loaded successfully.\n <b>> +setp me \"nip:behavior:db &lt;Kalle:myFirstBDO></b>\n Setting 'nip:behavior:db' in &lt;Kalle:thug-rabbit> to &lt;Kalle:myFirstBDO>.\n <b>> +setp me \"nip:trait:emoting:frequency 1</b>\n Setting 'nip:trait:emoting:frequency' in &lt;Kalle:thug-rabbit> to 1.\n <b>> +nip me \"live</b>\n [live] -> a violent looking trash-bunny\n NIP HEARTBEAT thread starting up...\n Scanning for updates ...\n Update Target = Kalle:thug-rabbit\n ... updates finished.\n Calculating sighook-path ...\n Connecting with NCS ...\n ... connected.\n Heartbeat loop starting now. \"My name is 001, how do you do?\"\n In a couple of minutes I'm going to hand you some stats on how this thread is doing.\n <b>> +possess kalle</b>\n\n You inhabit Kalle.\n A violent looking trash-bunny smiles.\n A violent looking trash-bunny smiles.\n A violent looking trash-bunny smiles, \"I like soup!\"\n A violent looking trash-bunny smiles.\n A violent looking trash-bunny smiles, \"I like soup!\"\n <b>> +nip bunny \"die</b>\n [term] -> a violent looking trash-bunny\n ---\n\n------------------------------------------------------------------------\n\n## Post summary.\n\nIn this chapter, we examined the following aspects of the NIP record\ntool:\n\n\\* The concept of \\'behavior\\'. \\* +nip \\\"record\\\" tool - how to start\nand stop recording. \\* BDO\\'s (behavior data object) \\* Parser recording\nsyntax\n\nTo read about freemoting, [proceed to Chapter II](NIPClassRecordingII).\nAlternatively, you may jump to either of the other chapters:\n\n\\* [Chapter II - Freemoting.](NIPClassRecordingII) \\* [Chapter III - The\nscene model.](NIPClassRecordingIII) \\* [Chapter IV - Tracking and\nreplaying.](NIPClassRecordingIV) \\* [Chapter V - The setting\nmodel.](NIPClassRecordingV)\n\nTo read more about recording behavior, read the [how to on the\ntopic.](NIPHowRecord)\n\n\\-- Main.KalleAlm - 21 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCLASS\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPClassRecording.md","path":"docs/unedited/NIPClassRecording.md","url":"/docs/unedited/NIPClassRecording.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1122866217\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPClassRecordingII\\\"}%\n[NIPClassStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CLASS: Recording and behavior - \\[III - The\nscene model.\\]\\</font\\>\n\n\\<font class=\\\"query\\\"\\>AUDIENCE:\\</font\\> EXPERIENCED\n\n\\<font class=\\\"query\\\"\\>PREREQUISITE KNOWLEDGE:\\</font\\>\n\n\\* You should be somewhat familiar with the +nip tool, especially the\n\\\"record\\\" function. \\* You should know what a BDO is. \\* You should\nknow the basic concept of recording behavior data - parser recording,\nfreemote recording, or both. \\* You should know the basics of Merry, and\nwhat a react-script is.\n\n\\<font class=\\\"query\\\"\\>SUMMARY:\\</font\\>\n\nIn this chapter we\\'re going to cover the concept of scene models, how\nyou can make use of scene models in your NPC\\'s and the various\ntechniques and tools there are available to make this process as\nefficient and easy as possible.\n\nThis chapter comprises of: []{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n## Introduction to scene models.\n\nWhen behavior data is recorded, the recording system does not presume a\nlot. For instance, it won\\'t presume that a pair of fluffy, pink mittens\nare going to be in your hands, always, even if they\\'re there at the\ntime of recording.\n\nThus, you cannot target your fluffy, pink mittens at all, when you\nrecord. In fact, if you try, the system will respond, \\<verbatim\\>\nAction ignored as only own details and \\'here\\' are accepted targets. If\nyou have set up a scene, the targets defined there may be used as well\nbut Kalle\\'s pair of fluffy, pink mittens was not listed if\nso.\\</verbatim\\>\n\nThe recording system allows you to target two things. \\* Details of your\nown body. The recording tool presumes that any details in your body that\nyou target will be present in the body of all NPC\\'s which will use the\nresulting BDO. \\* \\\"Here\\\", the room you\\'re in. This will be\nsubstituted with whatever room the NPC is in when it evaluates any\nbehavior data in which the room is targeted. However, no details in the\nroom other than the room itself may be targeted.\n\nMost of the time, this is enough. It may be limiting, but in all\nhonesty, unless we have a particular situation, we don\\'t need more than\nour own details and the room we\\'re in. Of course, we might have clothes\nand such in our inventory, but that\\'s admittedly a small issue.\n\nIn some cases, you record into a BDO for a particular reason. An example\nis a guard stopping a character from entering a room, because the\ncharacter is not allowed to enter. In this example, we need to be able\nto target more than just \\\"here\\\" and \\\"ourselves\\\". In this case, we\nhave what is called an **external entity** - the character.\n\nIn order for our guard to be able to target the character when we\nrecord, we need to set up a scene. A scene is any number of objects -\nscene actors - which each have a symbolic identifier. These symbolic\nidentifiers are stored when we interact with the scene actors. Later on,\nwhen we wish to replay the recorded behavior, each symbolic identifier\nwill be available to use in run-time as \\$(identifier).\n\n`<i>Figure 3-1</i>`\\<br/\\> \\<img\nsrc=\\\"%ATTACHURLPATH%/bdoscenemodel.png\\\" alt=\\\"bdoscenemodel.png\\\"/\\>\n\nIn figure 3-1, we have four objects. \\* The BDO (\\*), \\* the\nenvironment, \\* and two scene actors (\\~) - \\\"Lefty\\\" and \\\"Righty.\\\"\n\nIf we say that \\\"Lefty\\\" is the guard, and \\\"Righty\\\" is the person\ntrying to enter the room, we have ourselves a scene. \\\"Lefty\\\" and\n\\\"Righty\\\" are, of course, silly symbolic identifiers. We would most\nlikely give the character which is attempting to enter the symbolic\nidentifier \\\"victim\\\", \\\"person\\\" or perhaps \\\"actor\\\". Since we\\'re\nrecording exclusively from the guard\\'s perspective, the guard won\\'t\nhave a symbolic identifier at all. (We will look into when and why we\nwould give the acting entity a symbolic identifier in chapter IV.)\n\n------------------------------------------------------------------------\n\n\\<table align=\\\"center\\\" width=\\\"75%\\\" style=\\\"border: solid \\#ff0000\n1px;\\\"\\>\\<tr\\>\\<td\\>\\<font color=red\\>Note:\\</font\\>\\<br/\\> Whilst\nrecording, it is important to remember that the conditions of the\nrecording session differs from the conditions in which the recorded data\nwill be used. For instance, if you\\'re recording data for a tiger NPC in\nyour coder office, the conditions and surroundings will assuredly differ\nfrom the environment in which the tiger will eventually **make use** of\nthe recorded data. For example a jungle.\n\nAs such, when you\\'re setting up scenes, remember that the objects you\nuse as scene actors do not matter. What does matter is the symbolic\nidentifier each of these receive. You could be using your office desk or\na fellow staffer as for instace prey in a \\\"predator and prey\\\" scene\nrecording. \\</td\\>\\</tr\\>\\</table\\>\n\n## The +nip scene tool.\n\nTo assign a scene role to an object, you would use the +nip \\\"scene\\\"\ntool. It\\'s fairly straightforward.\\<verbatim\\>+nip \\<nipper\\> \\\"scene\n\\<symbolic identifier\\>\\\"\\</verbatim\\>to set a role,\\<verbatim\\>+nip\n\\<nipper\\> \\\"scene -\\\"\\</verbatim\\>to remove a particular actor from the\nscene, and\\<verbatim\\>+nip \\\"scene \\--\\\"\\</verbatim\\>to delete a scene\ncompletely (or rather - the scene actor information).\n\n------------------------------------------------------------------------\n\n## An example.\n\nWhy go through this trouble, then? What\\'s the point? Let\\'s look at a\nbrief example:\n\n ---\n <b>> smile at bunny \"!</b>\n You smile at a violent looking trash-bunny, \"!\"\n Action ignored as only own details and 'here' are accepted targets. If you have set up a scene, the \n targets defined there may be used as well but a violent looking trash-bunny was not listed if so.\n <b>> +nip bunny \"scene bunny</b>\n Scene role (bunny) set to a violent looking trash-bunny.\n <b>> smile at bunny \"!</b>\n You smile at a violent looking trash-bunny, \"!\"\n [STO:3]\n ---\n\nIn the BDO, if we examine the **db:obj** property, it will look\nsomething like this:\\<verbatim\\> ({ nil, nil, ({ ({ \\\"(bunny)\\\" }) })\n})\\</verbatim\\>\n\nI gave the violent-looking trash-bunny the symbolic identifier \\\"bunny\\\"\nin my scene. As you see in the property above, when I smiled at the\nviolent-looking trash-bunny, it resolved into the BDO as `\"(bunny)\"`.\nWhen this BDO is interpreted by the NIP parser at run-time, it will\ntransform `(bunny)` into the object reference hopefully found in the\nMerry variable `$bunny`. (If this does not make perfect sense so far,\nthat\\'s OK. We\\'ll get back to what this means further down.)\n\n------------------------------------------------------------------------\n\n## Live scene examples.\n\nThis all looks really good in theory, but does it work in practice? And\nthe various uses of this may or may not be too clear at this point.\nUsing a scene, you are allowed to target more than just \\\"here\\\" and\n\\\"yourself.\\\" Then, what? How will you let the NPC know what this new\nscene role should be pointing at?\n\nOne example is the [marrach-guards](NIPLibRefMarrachGuards) library.\nThis is a library specifically for the Castle Marrach game, where the\nguard performs various checks to see if a person has precedence enough\nto enter a particular room. Furthermore, the system will use a BDO which\nhas four pages (conditions/moods) - \\\"REFUSE-LOW\\\", \\\"REFUSE-HIGH\\\",\n\\\"ALLOW-LOW\\\" and \\\"ALLOW-HIGH\\\".\n\nThe two LOW pages will be used when a low-ranked person is refused or\nallowed entry. The two HIGH pages will be used when a high-ranked person\nis refused or allowed entry.\n\nThe [guarding](NIPLibRefGuarding) library will call the\n\\\"request-authority\\\" script found in\n[marrach-guards](NIPLibRefMarrachGuards), feeding it three arguments. \\*\n\\$who - the person trying to enter. \\* \\$what - what the person is\ntrying to do (enter). \\* \\$where - the NRef pointer to the exit.\n\nIf you\\'ve followed me thus far, things should be dawning right about\nnow. The library which handles the guard duties sets a number of\n\\$variables \\-- \\$variables can be used as object pointers to scene\nactors by giving an object a symbolic identifier equal to the variable\nname. What, then, if we initiate a recording session using the above\nconditions, and include a scene actor with the symbolic identifier\n\\\"who\\\"? Any actions we performed toward the corresponding object would\nbe automatically resolved and used by the guard, on the fly. If we add a\nscene actor with the role \\$where, we will be able to target the\nattempted exit as well.\n\n------------------------------------------------------------------------\n\n## Doing it ourselves.\n\nIn order to comprehend this entirely, we\\'re going to create a tiny\nscript in our NPC. This script will in turn trigger a BDO call, using\nsymbolic identifiers. Before we do this, however, we\\'re going to set up\na new scene.\n\nLet us for a moment imagine that we\\'re in the shoes of whatever NPC\nwe\\'ve made (in my case, a bunny). Let us also imagine that someone,\nanyone, just yelled something at us. How would we react to this? In\norder to be able to react appropriately, we\\'re going to set up the\nscene.\n\nClear whatever current scene you have, if any,\\<verbatim\\>+nip \\\"scene\n\\--\\\"\\</verbatim\\>\n\nLocate an appropriate object in the room that will serve as the scene\nactor. In my case, I\\'m going to target Lucy, who simply happens to be\nin the room with me at the moment. The symbolic identifier we\\'ll be\nusing for this target we name \\\"yeller.\\\" \\<verbatim\\>+nip \\<object\\>\n\\\"scene yeller\\\"\\</verbatim\\>\n\nWe need to enable recording, but before we do that, remember that\nyou\\'ve been using the `\"DB\"` page throughout the examples? Well, we\nwon\\'t use `\"DB\"` here. Instead, we\\'re calling this `\"myScene\"`. The\nrest is as it\\'s always been.\\<verbatim\\>+nip \\\"record start\n*Yourgame*:coders:*yourname*:myFirstBDO myScene\\\"\\</verbatim\\>\n\nWe\\'re ready to record some \\\"reactions\\\" for someone yelling at us.\nRemember that these recorded actions are in no way used in chronological\norder. They\\'re in fact fetched and used at random, so two subsequent\nactions are practically impossible to record, as they will most likely\nbe used out of order.\n\n ---\n <b>> growl at lucy annoyed \"!Shut it.</b>\n You growl at Lucy annoyedly, \"!Shut it.\"\n [STO:1]\n <b>> grunt at lucy \"!</b>\n You grunt at Lucy, \"!\"\n [STO:2]\n <b>> yell at lucy responsive \"!LALALALALALA!!!!!</b>\n You yell at Lucy responsively, \"!LALALALALALA!!!!!\"\n [STO:3]\n ---\n\nStop recording (`+nip \"record stop\"`) and prepare yourself to write one\nline of Merry code.\n\nWe\\'re going to make the script \\\"react-post:yell-iob\\\" in the NPC body\ndirectly. We won\\'t bother making libraries etc. for this.\n\n > +to me ed %woename-for-your-nipper react-post:yell-iob\n\nIn the text box, type in:\\<verbatim\\> Call( this,\n\\\"handler:emoting:parse\\\", \\$db: this.\\\"nip:behavior:db\\\", \\$mood:\n\\\"myScene\\\", \\$yeller: \\$actor );\\</verbatim\\>and hit Submit CHANGES.\n\nPresuming that went well, we\\'re ready to test our little experiment.\n\n ---\n <b>> yell at bunny</b>\n You yell at a violent-looking trash-bunny.\n A violent looking trash-bunny grunts at you.\n <b>> yell at bunny</b>\n You yell at a violent looking trash-bunny.\n A violent looking trash-bunny grunts at you.\n <b>> yell at bunny</b>\n You yell at a violent looking trash-bunny.\n A violent looking trash-bunny yells at you responsively, \"LALALALALALA!!!!!\"\n <b>> rub my ear</b>\n You rub your small right ear.\n ---\n\n\\<table align=\\\"center\\\" width=\\\"75%\\\" style=\\\"border: solid \\#ff0000\n1px;\\\"\\>\\<tr\\>\\<td\\>\\<font color=red\\>Warning:\\</font\\>\\<br/\\> I might\ntell you right off the bat that writing a bunch of react-scripts with\ncorresponding behavior data is a bad idea. The above only serves as an\nexample and would be an insane way to implement behavior for an NPC. But\nhopefully, it might give you a hint as to how scene models work and why\nthey\\'re useful. \\</td\\>\\</tr\\>\\</table\\>\n\nIf you feel confident in your knowledge about scene models, jump down to\n\\\"Post summary\\\".\n\n------------------------------------------------------------------------\n\n## Log start-finish.\n\n ---\n <b>> +nip \"scene --\"</b>\n Scene deleted.\n <b>> +nip lucy \"scene yeller</b>\n Scene role (yeller) set to Lucy.\n <b>> +nip \"record start Kalle:myFirstBDO myScene</b>\n Begun recording for mood/condition 'myScene' in <Marrach:players:K:kalle>. When you are done, type: +nip \"record stop\"\n <b>> growl at lucy annoyedly \"!Shut it.</b>\n You growl at Lucy annoyedly, \"!Shut it.\"\n [STO:1]\n <b>> grunt at lucy \"!</b>\n You grunt at Lucy, \"!\"\n [STO:2]\n <b>> yell at lucy responsive \"!LALALALALALA!!!!!</b>\n You yell at Lucy responsively, \"!LALALALALALA!!!!!\"\n [STO:3]\n <b>> +nip \"record stop</b>\n Stopped recording in <Marrach:players:K:kalle>.\n <b>> +obname bunny</b>\n &lt;Kalle:thug-rabbit&gt;; detail \"default\"\n <b>> +to me ed %Kalle:thug-rabbit react-post:yell-iob</b>\n Editing source in popup window.\n <b>> yell at bunny</b>\n You yell at a violent looking trash-bunny.\n A violent looking trash-bunny yells at you responsively, \"LALALALALALA!!!!!\"\n ---\n\n------------------------------------------------------------------------\n\n## Post summary.\n\nIn this chapter, we\\'ve covered the concept of NIP scene models. In\ndetail, we examined the following aspects:\n\n\\* Limited targets - internal (here, me) versus external entities\n(everything else). \\* The usage of scene actors. \\* Manipulating\n(creating, modifying, deleting) scenes. \\* The relationship between\nscene actors\\' symbolic identifiers and `$variables`. \\* The +nip scene\ntool. \\* Executing a BDO call externally (from a Merry script), using\nsymbolic identifiers to interpret the situation.\n\nTo read about tracking and replaying, [proceed to Chapter\nIV](NIPClassRecordingIV). If you feel unsure about the basics of\nrecording, you may want to head back to [Chapter I](NIPClassRecording)\nand/or [II](NIPClassRecordingII). Alternatively, you may choose either\nof the other chapters:\n\n\\* [Chapter I - Making it \\\"behave.\\\"](NIPClassRecording) \\* [Chapter II\n- Freemoting.](NIPClassRecordingII)\n\n\\* [Chapter IV - Tracking and replaying.](NIPClassRecordingIV) \\*\n[Chapter V - The setting model.](NIPClassRecordingV)\n\nRead more about [setting up a scene.](NIPTutorialScenery)\n\n\\-- Main.KalleAlm - 22 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCLASS\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n%META:FILEATTACHMENT{name=\\\"bdoscenemodel.png\\\" attr=\\\"h\\\" comment=\\\"\\\"\ndate=\\\"1085220207\\\" path=\\\"bdo scene model.png\\\" size=\\\"8713\\\"\nuser=\\\"kallea\\\" version=\\\"1.2\\\"}%\n","dir":"/docs/unedited/","name":"NIPClassRecordingIII.md","path":"docs/unedited/NIPClassRecordingIII.md","url":"/docs/unedited/NIPClassRecordingIII.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1149553944\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPClassRecordingIII\\\"}%\n[NIPClassStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>CLASS: Recording and behavior - \\[IV - Tracking\nand replaying.\\]\\</font\\>\n\n\\<font class=\\\"query\\\"\\>AUDIENCE:\\</font\\> EXPERIENCED\n\n\\<font class=\\\"query\\\"\\>PREREQUISITE KNOWLEDGE:\\</font\\>\n\n\\* You should be familiar with the +nip tool. Specifically the\n\\\"record\\\" and \\\"scene\\\" functions. \\* You should know what a BDO is. \\*\nYou should know how to record behavior data. \\* You should know the\nbasics of Merry. \\* You should know what a scene model is. \\* You should\nknow how to set up and manipulate scenes, and be somewhat clear on how\nthese interoperate with the behavior system.\n\n\\<font class=\\\"query\\\"\\>SUMMARY:\\</font\\>\n\nIn this brief chapter, we\\'re going to take a quick look at what the BDO\ntracker link is, and its uses, namely recording an ordered behavior\nsequence rather than, as is the default, one randomly aligned.\n\n[]{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n## Ordered versus random behavior sequence.\n\nAn ordered behavior sequence might for example be\\...\n\n Lucy officially straightens.\n\n Lucy strides formally to you.\n\n Lucy advertises her badge pointedly, \"You're under arrest!\"\n\nIf we recorded the above three things in a regular BDO, things would\n\\\"occur\\\" in a hopelessly nonsensical order in most cases, unless we\nwere \\\"fortunate.\\\"\n\n Lucy strides formally to you.\n\n Lucy strides formally to you.\n\n Lucy officially straightens.\n\n Lucy strides formally to you.\n\n Lucy advertises her badge pointedly, \"You're under arrest!\"\n\n Lucy strides formally to you.\n\n Lucy officially straightens.\n\nAnd so on. Nonsensical, stupid, useless, etc.\n\nIn order to do this accurately, we need to enable tracking before we\nbegin to record.\n\n------------------------------------------------------------------------\n\n## The +nip tracking function.\n\nThe +nip \\\"tracking\\\" function can be called in the following two\nways:\\<verbatim\\>+nip \\\"tracking on\\\"\\</verbatim\\>and\\<verbatim\\>+nip\n\\\"tracking off\\\"\\</verbatim\\>\n\nWhilst enabled, the recording tool will include something called a\ntracking vector which keeps track of the order in which we record our\ndata. By using the tracking vector, we can then **replay** the behavior\ndata in the correct order.\n\n------------------------------------------------------------------------\n\n## Random versus ordered sequence behavior data.\n\nWhen requesting a random sequence behavior data (RSBD) execution (where\nRSBD equals everything we\\'ve done so far), NIP will find and perform a\nbehavior data entry at random from the list of entries in the BDO. After\nperforming, NIP will simply call it a day and return to normal.\n\nIt\\'s not that simple when it comes to ordered sequence behavior data\n(OSBD), however. It won\\'t do to simply execute one of the entries at\nrandom. After all, that\\'s not very ordered of us, is it? Instead, NIP\nhas to explicitly perform each entry listed in the BDO before it is\ndone.\n\nThis introduces another minor problem. In the case of RSBD execution,\nthe time **between** each entry\\'s execution is not an issue, because\nRSBD execution only executes one entry at a time. But OSBD execution\ninvolves executing **every entry in the BDO page**. How will NIP know\nhow much time to wait in between each entry? The answer is simple - it\ncan\\'t. Therefore, you have to explicitly feed it this information.\n\n------------------------------------------------------------------------\n\n## Pause specifier.\n\nThus we introduce the final record tool symbol \\-- @ (\\\"at\\\").\n\nThe @ symbol is used to specify the amount of seconds to pause between\nthe previous entry and the entry which comes thereafter.\n\n <b>> say \"!Five and a half second will pass before I say so.\"</b>\n You say, \"!Five and a half second will pass before I say so.\"\n [STO:4]\n <b>> \"@5.5</b>\n You say, \"@5.5.\"\n [DELAY:7]\n <b>> say \"!So!</b>\n You say, \"!So!\"\n [STO:5]\n\nIf we execute the above, the NPC will first say \\\"Five and a half second\nwill pass before I say so.\\\" Then 5.5 seconds will pass, after which the\nNPC will say \\\"So\\\"\n\n------------------------------------------------------------------------\n\n## Result.\n\nThe usage of tracking requires the library\n[replaying](NIPLibRefReplaying). Thus, we need to add this library to\nany/all NPC\\'s which are to execute ordered sequence behavior data.\n\n1 Create a new BDO page by switching the session identifier to something\nunused. I\\'ll be using \\\"sequentialstuff\\\" as the session\nID.\\<verbatim\\>+nip \\\"record switch sequentialstuff\\\"\\</verbatim\\>(If\nyou have disabled recording entirely, type\n`+nip \"record start <i>woename</i> sequentialstuff\"` instead.) 2 Enable\ntracking.\\<verbatim\\>+nip \\\"tracking on\\\"\\</verbatim\\> 3 Record between\ntwo and half a dozen actions. (Remember to include pause information in\nbetween each action) 4 Stop recording.\\<verbatim\\>+nip \\\"record\nstop\\\"\\</verbatim\\> 5 Disable tracking.\\<verbatim\\>+nip \\\"tracking\noff\\\"\\</verbatim\\> 6 At this point, we\\'ve created ordered sequence\nbehavior data. Now all we need to do is execute it. We\\'ll do this by\ncreating a small Merry script in our NPC.\\<verbatim\\>+to me ed\n%woename-for-npc react-post:smile-iob\\</verbatim\\> 7 Type in the\nfollowing, then click Submit CHANGES:\\<verbatim\\>::handler_replay( \\$db:\nthis.\\\"nip:behavior:db\\\", \\$scene: \\\"sequentialstuff\\\" );\\</verbatim\\> 8\nAdd the NIP library \\\"replaying\\\" to the NPC.\\<verbatim\\>+setp\n\\<nipper\\> \\\"add replaying\\\"\\</verbatim\\>\n\nThat\\'s it. Now try to smile at the NPC and see if it\\'s reacting as it\nshould.\n\n------------------------------------------------------------------------\n\n## Log start-finish.\n\n ---\n <b>> +nip \"record switch sequentialstuff</b>\n Mood/condition changed from myScene to sequentialstuff in &lt;Kalle:charles&gt;.\n <b>> +nip \"tracking on</b>\n NIP record tracking vector enabled.\n <b>> smile \"!</b>\n You smile, \"!\"\n [Tracker link set up. See troll TWiki for details.]\n [STO:1]\n <b>> \"@2.5</b>\n You say, \"@2.5.\"\n [DELAY:1]\n <b>> wave \"!Halo.</b>\n You wave, \"!Halo.\"\n [STO:2]\n <b>> \"@2</b>\n You say, \"@2.\"\n [DELAY:2]\n <b>> introduce me happi \"!I'm Charles.</b>\n You introduce yourself happily, \"!I'm Charles.\"\n [STO:3]\n <b>> +nip \"record stop</b>\n Stopped recording in &lt;Kalle:charles&gt;.\n <b>> +nip \"tracking off</b>\n NIP record tracking vector disabled.\n <b>> +to me ed %Kalle:charles react-post:smile-iob</b>\n Editing source in popup window.\n <b>> +setp me \"add replaying</b>\n Setting 'add' in &lt;Kalle:charles&gt;;\n - from: nil\n - to: \"replaying\"\n [cut]\n The 'replaying' library was loaded. You can use this to replay entire recordings, provided these \n have a track link vector present. From within Merry, all you do is, e.g. ::handler_replay( $db: \n ${My:bdb}, $scene: \"HAPPY-GILMORE\" ); -- this will replay the entire recording sequence named \n \"HAPPY-GILMORE\", located in the object &lt;My:bdb&gt;.\n &lt;Lib:NIP:lib:replaying&gt; loaded successfully.\n <b>+poss nickademis</b>\n > You inhabit Nickademis.\n <b>> smile at charles</b>\n You smile at a phoenix.\n A phoenix smiles.\n A phoenix waves, \"Halo.\"\n A phoenix introduces himself happily, \"I'm Charles.\"\n ---\n\n------------------------------------------------------------------------\n\n## Post summary.\n\nIn this chapter, we covered the concept of tracking vectors, which are\nnecessary in ordered sequence behavior data. We talked about the\ndifference between ordered (OSBD) versus random (RSBD). We learnt about\nthe pause symbol (@), why we use it and how we use it. And finally, we\ncreated a brief example in which we used the\n[replaying](NIPLibRefReplaying) library to replay a BDO page orderedly.\n\n\\* The +nip \\\"tracking\\\" function. \\* RSBD and OSBD. \\* The pause\nspecifier (@).\n\nTo read about the setting model, [proceed to Chapter\nV](NIPClassRecordingV). If you feel unsure about the basics of\nrecording, you may want to head back to [Chapter I](NIPClassRecording),\n[II](NIPClassRecordingII) and/or [III](NIPClassRecordingIII).\nAlternatively, you may choose either of the chapters in the list below:\n\n\\* [Chapter I - Making it \\\"behave.\\\"](NIPClassRecording) \\* [Chapter II\n- Freemoting.](NIPClassRecordingII) \\* [Chapter III - The scene\nmodel.](NIPClassRecordingIII)\n\n\\* [Chapter V - The setting model.](NIPClassRecordingV)\n\n\\-- Main.KalleAlm - 22 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nCLASS\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nMaybe its just me, (seems to be the case alot) but the Tracking/Replay\ncommands doesnt work at all. Whenever I attempt to use it I receive the\nmessage stating the tracking function is not listed in the function\nlibrary. Nor s it listed under the +nip list. \\--\nMain.StoryBuilderLilith - 05 Jun 2006\n\nIt may not be loaded on your server. Which server are you on?\n\n-Kalle.\n\nI\\'m in the Lazarus system, which I believe is the same server as Castle\nMarrach. \\-- Main.StoryBuilderLilith - 05 Jun 2006\n\nFixed on Lazarus. There were un-registered calls in +nip. +nip tracking\nshould work now.\n\n-Kalle.\n","dir":"/docs/unedited/","name":"NIPClassRecordingIV.md","path":"docs/unedited/NIPClassRecordingIV.md","url":"/docs/unedited/NIPClassRecordingIV.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235641\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% [NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> b {\nfont-weight: bold; } .query { font-size: 12pt; color: \\#0000ff;\nfont-weight: bold; } .lib { color: \\#FF0000; font-weight: bold; } .title\n{ font-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPClassStyle.md","path":"docs/unedited/NIPClassStyle.md","url":"/docs/unedited/NIPClassStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1142281601\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>Spawn System (external)\\</font\\>\n\nThe spawn system is used by nippers to re-spawn based on \\\"areas\\\". Each\narea may have its own settings on matters such as \\\"how fast should a\nnipper \\'reincarnate\\'\\\", \\\"how many nippers should there be\\\", and so\non.\n\nThe spawn area is a simple property container containing the various\nspecifics for the area it targets. An area is simply defined by the\nphysical and practical boundaries of the various available spawn points.\nFor instance, if a spawn area had the outer bailey courtyard as its\nspawn point, then the nippers would basically be able to wander around\nthe entire outer bailey (but not the inner, unless they had precedence,\nand not the gaol, period).\n\nEach nipper master object tells the system which one spawn area it\nbelongs to. This is set in the property `nip:trait:spawn:area` in the\nnipper itself. The nipper must also have the\n[spawn-control](NIPLibRefSpawnControl) library loaded for this to take\neffect.\n\n\\<font color=red\\>*Note: whenever a nipper with spawn-control is slain,\nit is \\\"enqueued\\\" in the respawning process. Thus, unless you set a cap\non the \\# of nippers there may be, any new-spawned nippers will be\n**added** to the circle of life, thus increasing the overall\npopulation.*\\</font\\>\n\nSetting a cap on an NPC is a matter of setting the integer property\n`nip:trait:spawn:maxpop` in the master nipper itself. The area which\nthat particular nipper is associated with will only respawn an NPC of\nthat type if the number of available spawns is lower than the maxpop\nvalue.\n\nIn the spawn area (the property container), the following properties are\nsupported:\n\n Property Description Example / Recommended value\n ----------------- ------------------------------------------------------------------------ -----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n nip:delay:min The minimum time (in seconds) before the NPC is respawned 600\n nip:delay:max The maximum time (in seconds) before the NPC is respawned 86400\n nip:disabled 1 or 0; if 1, the spawn area will NOT respawn any NPC\\'s. 0\n nip:spawn-point Mapping of rooms-to-emits where the spawn area may respawn, at random. (\\[ \\<Kalle:rooms:area1:room1\\>:\\\"From a corner, (npc) crawls into the light.\\\", \\<Kalle:rooms:area1:room2\\>:\\\"(npc) startles you, rushing out into sight from a tiny berry bush.\\\" \\])\n\nTo avoid a spawn being entered into the circle of life, without using\nthe maxpop feature, you can set \\\"norespawn\\\" in the spawn before\nslaying it. The spawn system will ignore any NPC that is slain with this\nproperty set in its body.\n\n\\-- Main.KalleAlm - 13 Mar 2006\n","dir":"/docs/unedited/","name":"NIPExtSpawn.md","path":"docs/unedited/NIPExtSpawn.md","url":"/docs/unedited/NIPExtSpawn.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1115915560\\\" format=\\\"1.0\\\"\nversion=\\\"1.12\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<STYLE\\> HR { border: solid \\#aaaaaa 3px; width: 75%; height: 1px; }\n\\</STYLE\\>\n\n\\<A NAME=\\\"top\\\"\\>\\<FONT CLASS=\\\"title\\\"\\>Frequently Asked\nQuestions\\</FONT\\>\\</A\\>\n\nThis is the FAQ for the NIP system. The Q/A\\'s in here will probably\ngrow to quite a number in time, but only if you bother to ask the\nquestions. If something you\\'re trying to figure out **is not described\nhere**, I would be very thankful if you \\<A\nHREF=\\\"[mailto:kalle\\@marrach.skotos.net](mailto:kalle@marrach.skotos.net)\\\"\\>poked\nme about it so I can try to add it\\</A\\>. Thanks!\n\n[]{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n## How do I turn my object into a nipper?\n\nFigure out its woename (`+obname <npc>`), then type:\\<verbatim\\>+nip\n\\\"set woe:name\\\"\\</verbatim\\>\n\n------------------------------------------------------------------------\n\n## It doesn\\'t ever eat/drink/act! What\\'s wrong?\n\nCheck if your NPC is alive. If you get this,\n\n <B>> +delays NPC</B>\n There are no running delays on &lt;...>.\n\n\\- your NPC is not running. Start it up by typing,\n\n <B>> +nip NPC 'live'</B>\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I start it, but then after a little while it just dies on me.\n\nYou\\'ve probably encountered a bug. It shouldn\\'t die unless you\nspecifically tell it to. \\<A\nHREF=\\\"[mailto:kalle\\@marrach.skotos.net](mailto:kalle@marrach.skotos.net)\\\"\\>Let\nme know about this\\</A\\> so we can fix it.\n\nIf you\\'ve been doing **a lot of tweaking**, perhaps removing the signal\nDELAY (ouch) or setting the \\$NPC_PAUSE property insanely (very low),\nthe system will turn itself off, thinking it\\'s gone insane (which in\nthat case is true).\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I\\'d like to see some more debug stuff when I work with this.\n\nThere is built-in support for warnings/errors redirection, but it\\'s by\ndefault disabled. The ease-of-use for this will be improved over time,\nbut you can currently do the following to see the debug info:\n\n\\* **For warnings:** \\<VERBATIM\\>+setp NPC \\\"merry:setprop-post:warning\nX\\[M\\] EmitTo( \\${Your:woe:name}, this.warning );\\\"\\</VERBATIM\\>\n\n\\* **For errors:** \\<VERBATIM\\>+setp NPC \\\"merry:setprop-post:error\nX\\[M\\] EmitTo( \\${Your:woe:name}, this.error );\\\"\\</VERBATIM\\>\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I try to add a library but I keep getting \\\"Libraries are needed:\\\" errors.\n\nSome libraries depend on others to function properly. You will have to\nadd the library in question to make it work. If it says it needs\n\\<Lib:NIP:lib:something\\>, you should +setp NPC \\\"add something\\\"\n(without Lib:NIP:lib:).\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I\\'m trying to add a library, but the system can\\'t find it.\n\nThe system uses a thing called a \\\"library path\\\" to find the libraries\nyou\\'re attempting to add/remove. As such, you can\\'t place a library\n\\'anywhere\\', you have to put it in one of the paths listed.\n\nSome of these paths contain aliases for \\\"your theatre id\\\". If the\nlibrary in question is private for your game, you can place it in for\ninstance *yourtheatre*:NIP:lib.\n\nA complete list of possible locations for libraries can be found\n[here](NIPRefLibraries15), which is a page in the [library reference\ndocument](NIPRefLibraries).\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I\\'ve got problems getting my behavior database to work.\n\n\\* 1. Did you make a behavior db? It should be a propertycontainer,\nwhich should look like either of the examples in <Data:NIP:behavior>.\n\n\\* 2. Does it contain anything at all? It should have a series of very\nbizarre looking properties.\n\n\\* 3. If you\\'re using moods,\n\n\\* - does your NPC ever use the mood you specified in the +nip command?\n(*+nip \\\"record start Woe:for:db***MOOD***\\\"*)\\<BR\\>Check by typing\n\\<VERBATIM\\>+stat NPC \\\"property:npc:mood\\\"\\</VERBATIM\\>\n\n\\* 4. Did you use the universal mood **DB** when you recorded? The\nproperties in the behavior database should start with **\\\"db:\\\"**\n\n\\* 5. Did you specify the DB in the NPC? Property\n**\\\"nip:behavior:db\\\"**, optionally **\\\"nip:behavior:\\<MOOD\\>\\\"**.\n\n\\* 6. Is your NPC alive? \\<A\nHREF=\\\"\\#My_NPC_doesn_t\\_ever_eat_drink_ac\\\"\\>Hop here\\</A\\>.\n\n\\* 7. Did you add the emoting library to your npc? **+setp \\<npc\\> \\\"add\nemoting\\\"**\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## How do I use this/that library?\n\nIf the library is in the standard NIP collection, it should be well\ndocumented. If it\\'s not, feel free to \\<A\nHREF=\\\"[mailto:kalle\\@marrach.skotos.net](mailto:kalle@marrach.skotos.net)\\\"\\>give\nme a poke about it\\</A\\> and I\\'ll try to write one up for you.\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## How do I make my own library?\n\nLearn by doing. :) Also, there are an ever growing list of library docs\navailable. Check out either of the library references for an idea what a\nlibrary is supposed to do. Also be sure to read the [Creating a\nlibrary](NIPRefLibraries) tech ref doc.\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## What\\'s the difference between a signal and a hook?\n\nA signal is just an identifier and a priority. That\\'s all there is to\nsignals, whereas hooks are \\\"packages\\\" of scripts associated with\neither/all of the existing signals.\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I want to spawn several copies of the npc I just made; will there be any problems or things I should be aware of?\n\nYes. When spawning a NIP object, the spawn will become a child of the\nparent, **but** the child will not retrieve customizations done to the\nparent automatically. UrInheritance, for merry scripts, detail\ndescriptions, etc. will work just as normal, however.\n\n\\<A HREF=\\\"\\#top\\\"\\>Top\\</A\\>\n\n------------------------------------------------------------------------\n\n## I\\'m trying to add a library, but it\\'s crashing! What do I do?\n\nThe system has a lot of debug data when you manipulate the libraries,\nhooks and/or signals. You won\\'t see it, unless you **+possess the NPC**\nand do +setp me \\\"add \\<libraryname\\>\\\".\n\nIf things seem to be going wrong when you\\'re trying to add a library,\nsimply \\* +possess the NPC \\* start logging \\* add the library to\nyourself \\* stop logging \\* \\<a\nhref=\\\"[mailto:kalle\\@marrach.skotos.net](mailto:kalle@marrach.skotos.net)\\\"\\>mail\nit to me\\</a\\>, preferably with some info on what you did and where,\nwhich server, etc.\n\nOf course, you don\\'t need to email me if you manage to figure out the\nissue by looking at the debug output. Otherwise, I\\'ll gladly assist.\n\n------------------------------------------------------------------------\n\n## I\\'m trying to record, but keep getting \\\"Action ignored as only own details and \\'here\\' are accepted targets.\\\" messages.\n\nWhen recording with \\\"external entities\\\" (anything that is not\n**always** \\'there\\'), you need to set up a scene using the +nip\n\\\"scene\\\" tool. Further information on these topics:\n\n\\* [Class: recording and behavior.](NIPClassRecording) \\* [+nip-tool\n\\\"scene\\\"](NIPToolScene) \\* [Tutorial: Setting up a\nscene.](NIPTutorialScenery)\n\nOn recording in general,\n\n\\* [+nip-tool \\\"record\\\"](NIPToolRecord) \\* [How-to: Recording a\nbehavior database.](NIPHowRecord) \\* [How-to: Recording\nfreemotes.](NIPHowRecordFreemotes)\n\n------------------------------------------------------------------------\n\n## It won\\'t pick up or accept food! What\\'s wrong?\n\nand\n\n## My merchant npc won\\'t give me things!\n\nand\n\n## My trash-taking npc won\\'t take trash from me!\n\nYou may have done the classy mistake of not giving the NPC proper\ncapacity. This is in the bulk settings of the woe object. Set capacity\nand max weight to something appropriate and try again.\n\n------------------------------------------------------------------------\n\n## I am writing communications data with families and such. How do I write behavior for when my nipper doesn\\'t understand what is being said to them?\n\nAdd a new family to the comm db, and set it to `({ })`. This family will\ncatch everything that is being said to your NPC. Be sure to put this at\nthe very end of your `nip:families` array, since it\\'ll override\neverything after it otherwise.\n\n------------------------------------------------------------------------\n\n\\-- Main.KalleAlm - 15 Nov 2003\n","dir":"/docs/unedited/","name":"NIPFAQ.md","path":"docs/unedited/NIPFAQ.md","url":"/docs/unedited/NIPFAQ.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054586536\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { font-size: 12pt; color: \\#000000; font-weight: bold; } A {\ntext-decoration: none; font-size: 11pt; color: \\#0000ff; } .title {\nfont-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>What is a hook?\\</FONT\\>\n\n**Hooks** (in NIP) are packages of scripts attached to a specific\n[signal](NIPSignal) which are executed continuously from a loop called\n**the heartbeat thread**.\n\nEach hook may contain script references to any possible signal. The\nscripts will only be called if the specific signal exists, all handled\ninternally by the heartbeat thread.\n\nTo explain this better, I\\'m going to describe how a hook, \\'eating\\',\nworks by looking at pieces of the code and explaining what it does\n(apologies if the code is out-of-date, please let me know if so is the\ncase):\n\n --- <B>Lib:NIP:lib:eating/lib:eating:decide</B> ---\n object *inv, food;\n float relative_hunger;\n int i;\n\n /* First off, are we awake? */\n if( this.\"npc:state\" == \"asleep\" ) return nil;\n\n /* Awake we are. So, how hungry are we relatively speaking? Where 1 is full and 0 is starving (backwards, I know). */\n\n relative_hunger = Flt( this.\"npc:energy\" ) / Flt( this.\"nip:trait:eating:grammes\" );\n\n if( (this.\"npc:eating\" && relative_hunger < 1.0) || relative_hunger < 0.5 ){\n /* Okay, we wouldn't say no to a cookie and/or we're currently eating something. */\n food = this.\"npc:eating\";\n if( food && food.\"base:environment\" != this ) this.\"npc:eating\" = food = nil;\n if( !food ){\n /* Scan our inventory to see if we have anything edible. */\n inv = this.\"base:inventory\";\n for( i = 0; i < sizeof( inv ); i++ )\n if( !inv[i].\"base:edible\" ) inv[i] = nil;\n inv -= ({ nil });\n\n if( sizeof( inv )){\n /* It appears we have something edible in our possession. Grab one thing at random. */\n food = inv[random( sizeof( inv ))];\n }\n }\n if( food )\n if( !random( 1+Int( relative_hunger * 25.0 ))){\n Act( this, \"eat\", $what: ({ food }) );\n this.\"npc:eating\" = food;\n return $SIG_DONE;\n } else return nil;\n\n }\n\n if( relative_hunger < 0.3 && !random( 1+Int( relative_hunger * 30.0 ))){ \n /* Uh-oh. We're very hungry. Anything in the room to gnaw on? */\n\n /* Fetch our environment's inventory. */\n inv = this.\"base:environment\".\"base:inventory\";\n\n for( i = 0; i < sizeof( inv ); i++ )\n if( !inv[i].\"base:edible\" ) inv[i] = nil;\n inv -= ({ nil });\n\n if( sizeof( inv )){\n /* It appears there's food in the environment. Try to grab it! */\n food = inv[random( sizeof( inv ))];\n\n Act( this, \"take\", $what: ({ food }) );\n return $SIG_DONE;\n }\n }\n ---\n\nPossibly one of the biggest hook-scripts currently, the eating/DECIDE\nhook/signal script checks if the NPC is hungry enough to do something\nabout it, ranging from checking its inventory (\\\"got food in my\nhands?\\\") to checking its environment (\\\"any food in the room?\\\"). If it\ndecides to act, it will do so and return a certain signal that declares\nthat the rest of the signal should be ignored (see [signal\nstreams](NIPSignalStreams) for more information on the subject.\n\n --- <B>Lib:NIP:lib:eating/lib:eating:internal</B> ---\n int energy;\n\n energy = Int( this.\"npc:energy\" );\n energy -= Int( (this.\"base:intrinsicmass\" * (float) $NPC_PAUSE)/40.0 );\n if( energy < 0 ) energy = 0;\n this.\"npc:energy\" = energy;\n ---\n\nThe eating/INTERNAL hook/signal script simply increases the NPC\\'s\nhunger (or more correctly, decreases the NPC\\'s fat reserves), thus\nmaking it hungrier as time passes.\n\n --- <B>Lib:NIP:lib:eating/lib:eating:mood</B> ---\n float relative_hunger;\n int i;\n\n /* First off, are we awake? */\n if( this.\"npc:state\" == \"asleep\" ) return nil;\n\n /* Awake we are. How hungry are we? (0 = starving, 1 = full) */\n relative_hunger = Flt( this.\"npc:energy\" ) / Flt( this.\"nip:trait:eating:grammes\" );\n\n /* Are we hungry enough to be \"hungry\"? */\n if( relative_hunger < 0.4 )\n /* Yep. Strengthen the HUNGRY mood a bit. */\n this.\"nip:moodvals\"[\"HUNGRY\"] += Int(( 0.5 - relative_hunger ) * 150.0 );\n ---\n\nThe eating/MOOD hook/signal script will, if the MOOD signal is present,\nmake the mood, HUNGRY, relative to the NPC\\'s hunger, thus automatically\nmaking it possible for the NPC to be \\\"hungry\\\".\n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPHook.md","path":"docs/unedited/NIPHook.md","url":"/docs/unedited/NIPHook.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055635287\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SIGNAL/HOOK REFERENCE: DELIVERY\\</FONT\\>\n\n\\<QUERY\\>WOE NAME:\\</QUERY\\> Lib:NIP:signals:DELIVERY\n\n\\<QUERY\\>SIGNAL:\\</QUERY\\> DELIVERY\n\n\\<QUERY\\>INITIAL PRIORITY:\\</QUERY\\> 60000\n\n\\<QUERY\\>HOOK(S):\\</QUERY\\> delivery\n\n\\<QUERY\\>DEPENDENCIES:\\</QUERY\\> None.\n\n\\<QUERY\\>COMPATIBILITY:\\</QUERY\\> [courier](NIPLibRefCourier)\n\n\\<QUERY\\>INCOMPATIBILITY:\\</QUERY\\> None.\n\n\\<QUERY\\>MAIN PURPOSE\\</QUERY\\>\n\nThe DELIVERY signal is responsible for any delivery triggers, whereas\nthe main is in the delivery sig-hook, and is used to deliver items to\npeople in the room.\n\n\\<QUERY\\>DESCRIPTION\\</QUERY\\>\n\nThe delivery feature is, to save resources, stepping through the room\\'s\ninventory for anything with volition, and grabs one at a time and checks\nfor new scrolls. A couple of scripts are in place to handle most of the\ndelivery, but this script is a back-up feature for if some or all of\nthese must be replaced.\n\nIt is my belief that most of the scripts are already sufficient to deal\nwith this, but things like disconnecting in a room, having a scroll put\nin the queue for you, and then reconnecting, a courier wouldn\\'t realize\nyou were there if it wasn\\'t for this sig-hook.\n\n\\<QUERY\\>NIP PROPERTIES\\</QUERY\\>\n\n\\<LIB\\>nip:trait:delivery:database\\</LIB\\> \\<UL\\> This property points\nto a propertycontainer, and relies on the property **\\\"nip:delivery\\\"**\nwhich is in the format **(\\[ \\<recipient\\> : ({ \\<enqueued-object\\>,\n\\... }) \\])**. \\</UL\\>\n\n\\<QUERY\\>SIGNAL/HOOK SCRIPT REFERENCE(S)\\</QUERY\\>\n\n\\<LIB\\>merry:lib:handler:deliver\\</LIB\\> \\<UL\\> The deliver-script. Call\nthis with the argument \\$recipient as object reference to whoever is to\nbe given their things. Note that this script doesn\\'t check if the\nrecipient is in the same room. This check should be made before, unless\nglobal deliveries across rooms is accepted behavior.\n\nSyntax: **Call( this, \\\"handler:deliver\\\", \\$recipient: object );**\n\\</UL\\>\n\n\\<LIB\\>merry:lib:delivery:delivery-exec\\</LIB\\> \\<UL\\> (Signal DELIVERY,\nhook delivery, trigger exec)\\<BR\\> This sig-hook script steps through\nthe room\\'s inventory and anything with volition is checked for queued\nitems (and those are delivered if found). It checks **one volitioned\nobject per heartbeat**, whereas a beat takes place approx. every 20th\nsecond. \\</UL\\>\n\n\\-- Main.KalleAlm - 14 Jun 2003\n\n\\<QUERY\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPHookRefDelivery.md","path":"docs/unedited/NIPHookRefDelivery.md","url":"/docs/unedited/NIPHookRefDelivery.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055012203\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SIGNAL/HOOK REFERENCE: MOOD\\</FONT\\>\n\n\\<QUERY\\>WOE NAME:\\</QUERY\\> Lib:NIP:signals:MOOD\n\n\\<QUERY\\>SIGNAL:\\</QUERY\\> MOOD\n\n\\<QUERY\\>INITIAL PRIORITY:\\</QUERY\\> 100\n\n\\<QUERY\\>HOOK(S):\\</QUERY\\> mood\n\n\\<QUERY\\>DEPENDENCIES:\\</QUERY\\> None.\n\n\\<QUERY\\>COMPATIBILITY:\\</QUERY\\> [anger](NIPLibRefAnger),\n[eating](NIPLibRefEating), [emoting](NIPLibRefEmoting),\n[freemoting](NIPLibRefFreemoting), [happiness](NIPLibRefHappiness),\n[musician](NIPLibRefMusician), [sadness](NIPLibRefSadness),\n[sleeping](NIPLibRefSleeping)\n\n\\<QUERY\\>INCOMPATIBILITY:\\</QUERY\\> None.\n\n\\<QUERY\\>MAIN PURPOSE\\</QUERY\\>\n\nThe MOOD signal implements, together with the signal-hook \\'mood\\', the\naspect of a mood registry in an NPC. This mood registry can then be\nheavily customized and used in various ways to make an NPC\\'s current\nmood vary depending on whichever internal/external circumstances there\nmight be.\n\n\\<QUERY\\>DESCRIPTION\\</QUERY\\>\n\nInitially, MOOD sets the mood registry with one single mood\n(\\\"NEUTRAL\\\") which can then be added to either manually by calling the\nappropriate functions (see below) or by adding either of the \\\"mood\\\"\nlibraries, for instance [anger](NIPLibRefAnger).\n\nMaking your own mood is an easy enough thing to do. Simply: \\* create a\nlibrary, \\* call it something appropriate (e.g. \\\"irritation\\\"), \\* add\na hook, which you also call irritation, \\* put a\n\\<LIB\\>merry:lib:irritation:mood\\</LIB\\> sig-hook to it which adjusts\n**this.\\\"nip:moodvals\\\"\\[\\\"IRRITATED\\\"\\]** (the higher, the stronger) \\*\nand finally, put a \\<LIB\\>merry:lib:init\\</LIB\\> script in it, which in\nthe above case would do: **Call( this, \\\"core:add_mood\\\", \\$mood:\n\\\"IRRITATED\\\" );**\n\nSee further documentation on how to create signals, libraries and signal\nhooks for more information, or simply look at either of the existing\nscripts for reference.\n\n\\<QUERY\\>NIP PROPERTIES\\</QUERY\\>\n\n\\<LIB\\>npc:mood\\</LIB\\> \\<UL\\> String reference to the current mood,\ne.g. \\\"HAPPY\\\" \\</UL\\>\n\n\\<LIB\\>nip:moodvals\\</LIB\\> \\<UL\\> Mapping, mood registry property. The\nmoods in this property are all reset to 0 (except \\\"NEUTRAL\\\" which is\nset to 1) initially (e.g. **(\\[ \\\"HAPPY\\\" : 0, \\\"NEUTRAL\\\" : 1,\n\\\"SLEEPY\\\" : 0 \\])**) after which various sig-hooks attached to the MOOD\nsignal modify the values.\\<br\\> \\</UL\\>\n\n\\<QUERY\\>SIGNAL/HOOK SCRIPT REFERENCE(S)\\</QUERY\\>\n\n\\<LIB\\>merry:lib:core:add_mood\\</LIB\\> \\<UL\\> Script that may be used to\nadd a mood to the mood registry.\\<br\\> Call( this, \\\"core:add_mood\\\",\n\\$mood: \\\"MOOD\\\" ); \\</UL\\>\n\n\\<LIB\\>merry:lib:core:sub_mood\\</LIB\\> \\<UL\\> Script that may be used to\nremove a mood from the mood registry.\\<br\\> Call( this,\n\\\"core:sub_mood\\\", \\$mood: \\\"MOOD\\\" ); \\</UL\\>\n\n\\<LIB\\>merry:lib:init-post\\</LIB\\> \\<UL\\> NIP Library init-script.\\<br\\>\nSpecifically, this script uses the (internal) function \\\"core:add_mood\\\"\nto add the NEUTRAL mood to the NPC. \\</UL\\>\n\n\\<LIB\\>merry:lib:mood:delay\\</LIB\\> \\<UL\\> (Signal DELAY; hook\nmood)\\<BR\\> Makes the NPC think slower if the mood is \\\"neutral.\\\" (1.5\ntimes higher delay) \\</UL\\>\n\n\\<LIB\\>merry:lib:mood:mood-exec\\</LIB\\> \\<UL\\> (Signal MOOD; hook mood;\ntype EXEC)\\<br\\> This sig-hook grabs the result of the various mood\nsig-hooks\\' modifications to the **\\\"nip:moodvals\\\"** mapping, picks the\nstrongest mood and sets the **\\\"npc:mood\\\"** accordingly. \\</UL\\>\n\n\\<LIB\\>merry:lib:mood:mood-init\\</LIB\\> \\<UL\\> (Signal MOOD; hook mood;\ntype INIT)\\<br\\> This script resets the **\\\"nip:moodvals\\\"** mapping.\nInitially, the NEUTRAL mood has 1 strength, all others start at 0.\n\\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<QUERY\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPHookRefMood.md","path":"docs/unedited/NIPHookRefMood.md","url":"/docs/unedited/NIPHookRefMood.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1068727315\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SIGNAL/HOOK REFERENCE: NIP\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:hooks:nip\n\n\\<font class=\\\"query\\\"\\>HOOK(S):\\</font\\> nip\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[interaction](NIPLibRefInteraction)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>MAIN PURPOSE\\</font\\>\n\nTo submit and/or to accept interaction requests.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThis is the hook used by [the interaction library](NIPLibRefInteraction)\nto request/accept interaction with other NPC\\'s in the room.\n\n\\<font class=\\\"query\\\"\\>SIGNAL/HOOK SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:nip:decide\\</font\\> \\<UL\\> (Hook\n\\'nip\\'; signal \\'DECIDE\\')\n\n\\\"This sig-hook looks for broadcasts from other NPC\\'s in the room. If\nit finds one, it has appropriate behavior set up, and if it decides to\ngrab it, it will interact with that NPC.\\\" \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:nip:internal\\</font\\> \\<UL\\> (Hook\n\\'nip\\'; signal \\'INTERNAL\\')\n\n\\\"This sig-hook is responsible for broadcasting the NPC\\'s wish to\ninteract with any other NPC in the same room.\\\" \\</UL\\>\n\n\\-- Main.KalleAlm - 13 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPHookRefNip.md","path":"docs/unedited/NIPHookRefNip.md","url":"/docs/unedited/NIPHookRefNip.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1121803140\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SIGNAL/HOOK REFERENCE: room-cleaning\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:hooks:room-cleaning\n\n\\<font class=\\\"query\\\"\\>HOOK(S):\\</font\\> room-cleaning\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[trash-taker](NIPLibRefTrashTaker)\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[trash-taker](NIPLibRefTrashTaker)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>MAIN PURPOSE\\</font\\>\n\nTo (spontaneously) clean up rooms.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe room-cleaning hook randomly picks up trash from rooms the NPC\nencounters, unless these rooms have the property \\\"trash:protected\\\"\nset.\n\nNote: the old \\\"npc:disable-clean\\\" property is deprecated, but is still\nrespected. It should be replaced with \\\"trash:protected\\\" at some point,\nhowever.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:trash:frequency\\</font\\> \\<UL\\> How\nfrequently will we clean? 1 = always, 2 = 50% of the time, 3 = 33% of\nthe time, etc. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>SIGNAL/HOOK SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:room-cleaning:decide\\</font\\> \\<UL\\>\n(Hook \\'room-cleaning\\'; signal \\'DECIDE\\')\n\n\\\"The room-cleaning decide hook-script. This script will randomly pick\nup trash from \\\"the current room.\\\" An object is defined as trash\naccording to the SkotOS Trash System rules.\\\" \\</UL\\>\n\n\\-- Main.KalleAlm - 13 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nUpdated to use virtual trashcan and sscanf rules \\\"\\[%s\\]\\#%d\\\". See\nNIPLibRefTrashTaker for further information.\n\n\\-- Main.KalleAlm - 28 Oct 2004\n\nThis system is now compatible with the SkotOS TrashSystem.\n\n\\-- Main.KalleAlm - 19 Jul 2005\n","dir":"/docs/unedited/","name":"NIPHookRefRoomCleaning.md","path":"docs/unedited/NIPHookRefRoomCleaning.md","url":"/docs/unedited/NIPHookRefRoomCleaning.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"tonyd\\\" date=\\\"1121829503\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font color=red\\>This document underwent modifications in accordance to\nthe modifications made to the NIP trading system. The main modification\nwas converting all float properties into integer 2-decimal hack-floats\n(`123 = 1.23`)\\</font\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO create cash data objects?\\</FONT\\>\n\n**How:**\n\nThe CDO\\'s are a vital part of the [trading](NIPLibRefTrading) system in\nNIP. Additionally, the CDO\\'s are the most complicated objects in the\nprocess of introducing trade to your NPC\\'s. As such, we\\'re going to\nstep-by-step create a CDO here with support for both hard cash and\ncredit.\n\n\\* Firstly, I create a bunch of \\\"cash\\\" objects, a dollar-bill, five\ndollar-bill, ten-, twenty-, fifty-, and one hundred-dollar bills, plus\nvarious coins. I put all these in the woe folder \\\"Game:Props:cash\\\",\nand name them after their value (the 100-dollar bill is\n\\\"Game:Props:cash:100\\\", the quarter is \\\"Game:Props:cash:.25\\\", etc).\nAdditionally, I create a \\\"VISA\\\" card and call it\n\\\"Game:Props:cash:visa\\\".\n\nThe VISA card is the only object I need to set a special property in,\nand this only for testing purposes. I set the property \\\"cash:balance\\\"\nto an integer value, **20000**, which in USD would equal to \\$200.00.\n\nIf you\\'re only going to deal with \\\"credit\\\" type cash, then you can\nskip everything but the \\'VISA\\' part.\n\n\\* Secondly, I create the CDO itself, which is a property container. I\ngive this the name \\\"Game:<Data:NIP:cash:CDO>\\\" and set three properties\nin it.\n\nI set **\\\"cash:announce-change\\\"** to \\\\>\\\"\\$(npc) gives you back\n\\$(prefix)\\$(change)\\$(suffix) in change.\\\"\\</pre\\> 1 \\$(npc) will\nresolve as Describe( \\<npc\\> ), i.e. the brief description (\\\"a burger\nking dude\\\"). 2 \\$(prefix) will resolve the prefix of the cash. More\nabout this later. 3 \\$(suffix) -\\\"- 4 \\$(change) will resolve the amount\nof money given back in change.\n\nThen I set **\\\"cash:announce-cost\\\"** to \\\\>\\\"This will cost you\n\\$(prefix)\\$(cost)\\$(suffix).\\\"\\</pre\\> 1 \\$(cost) will resolve the\namount of money the item costs.\n\nThen I set **\\\"cash:announce-shortage\\\"** to \\\\>\\\"You do not have\nenough \\$(name) for \\$(item).\\\"\\</pre\\> 1 \\$(name) will resolve the name\nof the cash type (more later). 2 \\$(item) will resolve the name of the\nitem being requested (\\\"a beef roll\\\").\n\n\\<font color=\\\"\\#0000ff\\\"\\>Hint: use **+cobj** to create the object(s),\nand **+setp** with the @-feature to point to the object, like:\\\\>\\>\n+setp \\'\\@Game:<Data:NIP:cash:CDO>\\\"\\<br/\\>\\<br/\\> \\[pointer\\] \\--\\>\n\\<Game:<Data:NIP:cash:CDO>\\>\\<br/\\>\\<br/\\>\\> +setp\n\\'cash:announce-change \\$(npc) gives you back\n\\$(prefix)\\$(change)\\$(suffix) in change.\\'\\<br/\\>Setting\n\\'cash:announce-change\\' in \\<Game:<Data:NIP:cash:CDO>\\>;\\<br/\\> - from:\nnil\\<br/\\> - to: \\\"\\$(npc) gives you back \\$(prefix)\\$(change)\\$(suffix)\nin change.\\\"\\</pre\\>\\</font\\>\n\n\\* Now we need to create the \\\"options\\\" available to us. These are\n\\\"physical payment\\\" and \\\"non-physical payment\\\", purchase in cash, or\npurchase on credit. Each option is, in fact, its own property container\nwith its own settings.\n\n\\* First, we create the credit card option. I name this\n\\\"Game:<Data:NIP:cash:credit>\\\".\n\nIn the new credit card object \\\"Game:<Data:NIP:cash:credit>\\\" we set\n**\\\"cash:announce-pay\\\"** to \\\\>\\\"You pay \\$(npc)\n\\$(prefix)\\$(paid)\\$(suffix) with \\$(using).\\\"\\</pre\\> 1 \\$(npc) is a\nDescribe() of the NPC (\\\"a dusky looking merchant\\\") 2 \\$(prefix) and\n\\$(suffix) are the prefix/suffix of the currency (more in a bit). 3\n\\$(paid) will resolve the amount of money paid. 4 \\$(using) will\ndescribe the item used to make the purchase (\\\"your VISA-card\\\").\n\nSet **\\\"cash:name\\\"** to \\\\>\\\"credit\\\"\\</pre\\> This will be the\n\\$(name) used in the \\\"announce-shortage\\\" message.\n\nSet **\\\"cash:object\\\"** to \\\\>\\<Game:Props:cash:visa\\>\\</pre\\> (This\nis the visa card object we created earlier)\n\nSet **\\\"cash:physical\\\"** to \\\\>0\\</pre\\>\n\nSet **\\\"cash:pname\\\"** to \\\\>\\\"dollars\\\"\\</pre\\> (This is the word\nused to describe the money values)\n\nSet **\\\"cash:sname\\\"** to \\\\>\\\"dollar\\\"\\</pre\\> (This is also used\nto describe the money values)\n\nSet **\\\"cash:suffix\\\"** to \\\\>\\\" dollars\\\"\\</pre\\> (This is whatever\nyou want added to the end of the money values. E.g. 5 dollars, or 3\npence)\n\nSet **\\\"cash:prefix\\\"** to \\\\>\\\"\\$\\\"\\</pre\\> (This is whatever you\nwant added BEFORE the money values. E.g. \\$5 dollars)\n\nAnd the credit is set up.\n\nWe now return to the CDO, \\\"Game:<Data:NIP:cash:CDO>\\\" Set\n**\\\"cash:options\\\"** to \\\\>({ \\<Game:<Data:NIP:cash:credit>)\n})\\</pre\\>\n\nThe CDO now knows that we can pay for objects using credit. It should\nnow allow you to buy items, assuming you have a visa card, and a large\nenough balance stored in the card.\n\nSince we\\'ve set up non-physical payments, we can now set up physical\npayments.\n\n\\* We create the hard cash option. I name this\n\\\"Game:<Data:NIP:cash:cash-hard>\\\".\n\nIn the new hard cash object \\\"Game:<Data:NIP:cash:cash-hard>\\\" we set\n**\\\"cash:announce-pay\\\"** to \\\\>\\\"You hand\n\\$(prefix)\\$(paid)\\$(suffix) to \\$(npc).\\\"\\</pre\\> 1 \\$(npc) is a\nDescribe() of the NPC (\\\"a dusky looking merchant\\\") 2 \\$(prefix) and\n\\$(suffix) are the prefix/suffix of the currency (more in a bit). 3\n\\$(paid) will resolve the amount of money paid.\n\nSet **\\\"cash:name\\\"** to \\\\>\\\"money\\\"\\</pre\\> This will be used in\nthe error message, \\\"You do not have enough \\<cash:name\\> to buy this\nitem.\\\"\n\nSet **\\\"cash:object\\\"** to \\\\>(\\[ \\<Game:Props:cash:1\\>:100,\n\\<Game:Props:cash:2\\>:200, \\<Game:Props:cash:10\\>:1000,\n\\<Game:Props:cash:20\\>:2000, \\<Game:Props:cash:50\\>:5000,\n\\<Game:Props:cash:100\\>:10000 \\])\\</pre\\> This is a list of cash items,\nand their value. List all the notes and coins that we created earlier.\nList their values after it. Remember that \\$1 has a value of 100. So\n\\$20 has a value of 2000, and so on.\n\nSet **\\\"cash:physical\\\"** to \\\\>1\\</pre\\>\n\nSet **\\\"cash:pname\\\"** to \\\\>\\\"dollars\\\"\\</pre\\> The plural name of\nthe currency.\n\nSet **\\\"cash:sname\\\"** to \\\\>\\\"dollar\\\"\\</pre\\> The singular name of\nthe currency.\n\nSet **\\\"cash:prefix\\\"** to \\\\>\\\"\\$\\\"\\</pre\\> The prefix used when\ndescribing the currency. E.g. \\$5.\n\nSet **\\\"cash:suffix\\\"** to \\\\>\\\" dollars\\\"\\</pre\\> The suffix used\nwhen describing the currency. E.g. 5 dollars.\n\nSet **\\\"cash:range\\\"** to \\\\>({ 10000, 1 })\\</pre\\> The range of\nvalid cash, used when calculating change/taken cash from the actor in\nacts of purchase.\n\nSet **\\\"cash:slang\\\"** to \\\\>(\\[ 1 : \\\"cent\\\", 25 : \\\"quarter\\\", 100\n: \\\"dollar\\\" \\])\\</pre\\> An optional mapping containing a list of the\n\\\"coins\\\" or bills which have a slang name, in singular form.\n\nSet **\\\"cash:plang\\\"** to \\\\>(\\[ 1 : \\\"cents\\\", 25 : \\\"quarters\\\",\n100 : \\\"dollars\\\" \\])\\</pre\\> An optional mapping containing a list of\nthe \\\"coins\\\" or bills which have a slang name, in plural form.\n\nSet **\\\"cash:type\\\"** to \\\\>(\\[ 1:\\\"coin\\\", 100:\\\"bill\\\" \\])\\</pre\\>\nThe type, exclusively cosmetic, for describing transactions.\n\nFinally, we return to the CDO, \\\"Game:<Data:NIP:cash:CDO>\\\" Set\n**\\\"cash:options\\\"** to include \\\\>({\n\\<Game:<Data:NIP:cash:cash-hard>) })\\</pre\\> (So if you\\'d already added\nthe credit option, it should now look like this \\\\>({\n\\<Game:<Data:NIP:cash:cash-hard>), \\<Game:<Data:NIP:cash:credit>)\n})\\</pre\\>) (The order in which you add the options is important.\nBecause the cash-hard is listed first, the character will pay with any\ncash they are holding before they pay using their visa card. If we\nreversed the order, the character would pay using their visa card\nfirst.)\n\nWe\\'re now done, and our merchants can accept either hard cash in the\nform of notes and coins, or a visa card.\n\n\\-- Main.KalleAlm - 16 Feb 2004 Updated \\-- Main.TonyDemetriou - 19 Jul\n2005\n","dir":"/docs/unedited/","name":"NIPHowCashDataObjects.md","path":"docs/unedited/NIPHowCashDataObjects.md","url":"/docs/unedited/NIPHowCashDataObjects.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"alexl\\\" date=\\\"1126618740\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<h1\\>How to set an NPC up for basic communication\\</h1\\>\n\nThis document contains information on how to set the\n[communicate](NIPLibRefCommunicate) library up, including information\nabout how to define its communications data.\n\n\\<div style=\\'margin: 10px; border: dashed \\#000000 1px; background:\n\\#eeeeff;\\'\\> **NOTE:** A [new tool](NIPToolComm) is available which in\nmore than a few ways makes this document slightly obsolete. It **is**\nstill a useful read to understand the underlying logics of the\ncommunications system in NIP, but it is no longer required to comprehend\nit in full. For more information about the tool in question, go to the\n[+NIP tool spec: comm](NIPToolComm) page.\\</div\\>\n\nThis isn\\'t entirely trivial. In particular, you need to have a somewhat\nnice grasp on how properties in the SkotOS system work. (What is an\narray? How do you write an array? What is a multi-dimensional array? See\n[Properties and values](Properties and values) f.f.i.)\n\nNow that I\\'ve scared you away, let\\'s proceed with how to set up an NPC\nfor communication.\n\n[]{.twiki-macro .TOC}\n\n[Todd Nilson delves into teaching how to apply the Nip Comm\nLibraries](UntidyLogWellsNipTutoriual)\n\n[Tidy Version](TidyVerstionWellsTutorial)\n\n------------------------------------------------------------------------\n\n## What do you mean, exactly, by \\\"communication\\\"?\n\nThat\\'s a good question. Look at this example:\n\n------------------------------------------------------------------------\n\n\\> smile at janet \\\"Hi, Janet.\\\" You smile at Officer Janet, \\\"Hi,\nJanet.\\\"\n\nOfficer Janet raises her eyebrow at you, \\\"What do you want?\\\"\n\n------------------------------------------------------------------------\n\nA fascinating scene, but part from that, it is a perfect example of\ncommunication. Summarized, it is: \\\"a system used by NPC\\'s to parse\nthrough sentences and decide which reaction, if any, to give.\\\"\n\nSo how **does** Janet know what to reply when I say \\\"Hi, Janet.\\\"? It\nmay sound like a question best suited for a 5 year old, but it\\'s\nactually not that simple to figure out.\n\nLet\\'s look a little closer at how NIP figures this out further down.\nStill with me? You rock.\n\n------------------------------------------------------------------------\n\n## Dissecting Miss Janet\n\nJanet has graciously offered herself up for dissection \\-- no, Janet,\nlie still .. could someone tighten the gag, please? Thank you.. \\-- so\nwe will cut her up and take a peek inside. It\\'s going to be a little\nmessy but nothing a hot shower can\\'t fix.\n\n### Janet herself\n\nFirstly, Janet has the NIP library [communicate](NIPLibRefCommunicate).\nIf you\\'re trying this out (by applying the examples given on a test NPC\nin your work area in-game), you should be sure to add this library\nbefore continuing on.\n\nSecondly, there is a separate PropertyContainer which I call\n`\"Kalle:NIP:comm:janet\"`. This is referred to as Janet\\'s\n\\\"communications data object\\\", or \\\"comm db\\\". In Janet\\'s body, the\nproperty \\\"nip:trait:communicate:db\\\" points at this object.\n\nNothing odd there, I hope.\n\n### The \\\"comm db\\\"\n\nIn the \\\"comm db\\\", we have a few properties along with some behavior\ndata.\n\n \"family:greetings\" = ({ ({ \"hello\", \"hi\", \"yo\" }) })\n\nIt\\'s okay if you don\\'t get this just yet. If you can sort of guess at\nwhat it does, then that\\'s good.\n\n \"nip:families\" = ({ \"greetings\" })\n\nThis is easier. It\\'s a simple list (array) of families\\... whatever\nthose are.\n\n### Families\n\nBefore we continue, I need to tell you what I mean by \\\"families.\\\" A\nfamily, in this case, is a construct of word combinations which are used\nto determine whether or not a particular sentence is corresponding to a\nparticular reaction.\n\nAn example of a family is this, translated into English: \\\"If someone\nsays something to me, where their sentence contains one of the words\nHELLO, HI or YO, do \\...\\\"\n\nEach family has a one-word name (which may contain hyphens and\nunderscores), for example \\\"how-are-you\\\" or \\\"greetings\\\".\n\nCoincidentally, the aforementioned example would become:\\<verbatim\\>({\n({ \\\"hello\\\", \\\"hi\\\", \\\"yo\\\" }) })\\</verbatim\\>and if we gave it the\nfamily name \\\"greetings\\\", we would have\\<verbatim\\>\\\"family:greetings\\\"\n= ({ ({ \\\"hello\\\", \\\"hi\\\", \\\"yo\\\" }) })\\</verbatim\\>\n\nStill leaves a lot to explain, though. So let\\'s take a deep breath and\ntake a look at\\...\n\n------------------------------------------------------------------------\n\n### Communication logics\n\nIt would be impossible, or at least gravely impractical \\-- not to\nmention lag-causing \\-- for an NPC to parse through every sentence\nspoken, analyze it, and make sophisticated attempts at figuring out what\nit means. Lots and lots of attempts to do this have been made since the\nearly 20th century and are still made today. So far, noone has\nsuccessfully managed to make a computer \\\"talk\\\" like a human being and\nunderstand a human language. In the SkotOS environment, even attempting\nto do this kind of thing would be suicidal. But there are ways to make\nit appear as if the computer or NPC understands.\n\nA sentence is a group of words thrown together.\n\n\\\"I hate you,\\\" is a perfectly valid sentence,\n\nAs is \\\"Did you know that, yesterday, a friend of mine saw that guy from\nthat show which everybody is so damned obsessed about?\\\"\n\nThe first sentence is very much \\\"to the point.\\\" It\\'s easy to parse\nthrough some form of system and come up with a fitting response. The\nlatter is worse, though, since it contains a bunch of words and some, or\nmost, of them are practically useless.\n\nThe first step in figuring out what someone is saying is to consider\nwhich possible IMPORTANT word combinations there can be to say it. \\*\n(I) hate you. \\* (I) dislike you. \\* You suck. \\* You are (an) idiot. \\*\nYou are stupid.\n\nThose five (and I\\'m sure many others) are ways of saying that you hate,\nor at least strongly dislike, somebody. The words in parentheses are\nunimportant words. Taking those out, we get: \\* hate you \\* dislike you\n\\* you suck \\* you are idiot \\* you are stupid\n\nWe now see that there are three \\\"types\\\" of sentences in there. 1 (X)\nyou 2 you (X) 3 you are (X)\n\n\\... which means we can actually group those 5 sentences into 3 entries,\nlike this: 1 you suck 2 hate/dislike you 3 you are idiot/stupid\n\nWith me? Okay, because now we\\'re going to do some magic stuff with\nthese things to make NIP understand what they mean.\n\nThe communicate library uses a particular logic using multi-dimensional\narrays where each dimension is either an \\\"and-dimension\\\" or an\n\\\"or-dimension\\\". Let\\'s look at a couple of examples of how this is\nwritten.\n\nThe first dimension is an \\\"and-dimension\\\", which means ALL of the\nwords listed must exist in the sentence for it to be valid: \\* NIP:\n`({ \"hi\", \"there\" })` \\* English: hi there \\* Logic: hi AND there\n\nThe second dimension is an \\\"or-dimension\\\", so AT LEAST ONE of the\nwords listed must exist in the sentence: \\* NIP:\n`({ ({ \"hi\", \"hello\" }) })` \\* English: hi/hello \\* Logic: hi OR hello\n\nThe third dimension is, just like the first, an \\\"and-dimension\\\": \\*\nNIP: `({ ({ ({ \"hi\", \"there\" }) }) })` \\* English: hi there \\* Logic: hi\nAND there\n\nThe fourth is an \\\"or-dimension\\\", fifth is AND, sixth is OR, and so on,\nbut you know? If you start poking around in the sixth, you\\'re in\ndeeeeeeeeeeeeeeeep waters. You\\'ll at the most land on the 3rd or 4th.\n\nLet\\'s go back to the example we were working on \\-- the hate one, that\nis. So, as we said, we now have 3 entries: 1 you suck 2 hate/dislike you\n3 you are idiot/stupid\n\nTurning the 1st entry into logic, we get this: \\* Logic: you AND suck\n\nIt\\'s fairly straight-forward. Turning that into a NIP communication\narray, we get: \\* NIP: ({ \\\"you\\\", \\\"suck\\\" })\n\nNothing much to be said there. It\\'s all in the first dimension of the\narray, and the first dimension is a so called \\\"and\\\" dimension.\n\nTurning the 2nd entry into logic, we get this: \\* Logic: (hate OR\ndislike) AND you\n\nUh-oh, what\\'s with the parentheses? If you\\'ve ever written a program\nor script, you should know what it does. If you\\'ve been poking into\nmathematics past the more basic levels, you should also know what it\nmeans. \\* (1+2)\\*3 = 9 \\* 1+2\\*3 = 7\n\nWhy? Because multiplication takes precedence over addition. In the first\ncase, 1+2 is done first, then the resulting 3 is multiplied by 3. 3\\*3 =\n9. In the second case, 2\\*3 is done first, then the resulting 6 is added\nto the 1. 1+6 = 7. Using parentheses, we can define a precedence that\ndiffers from the natural precedence of mathematics.\n\nSimilarly, we are able, and in a lot of cases required, to define a\nprecedence in communication logics. The logical expression \\\"hate OR\ndislike AND you\\\" is ambiguous. Do we mean \\\"hate, or dislike and you\\\"?\nOr do we mean \\\"hate or dislike, and you\\\"? There is a difference there,\nbelieve it or not.\n\nIn the NIP communicate library, we express parentheses by expanding into\nthe next dimension. \\* Logic: (hate OR dislike) AND you \\* NIP: ({ ({\n\\\"hate\\\", \\\"dislike\\\" }), \\\"you\\\" })\n\nRemember what we said before? First dimension is an \\\"and\\\" dimension,\nsecond dimension is an \\\"or\\\" dimension?\n\nLet\\'s take the 3rd and final entry \\-- \\\"you are idiot/stupid\\\" \\-- and\nturn it into logic. \\* Logic: you AND are AND (idiot OR stupid)\n\nThis is basically the same deal as \\#2 but we have one additional word\nand the parenthesized words are at the end, instead of the beginning: \\*\nLogic: you AND are AND (idiot OR stupid) \\* NIP: ({ \\\"you\\\", \\\"are\\\", ({\n\\\"idiot\\\", \\\"stupid\\\" }) })\n\nStill with me? Amazing! We\\'re almost there, promise!\n\nUp until this point, we\\'ve only dealt with one sentence type logics.\nHowever, most of the time, this isn\\'t enough. Jumping away from the\ncurrent example for a sec, let\\'s take greeting someone as an example.\n\\* Hi! \\* Hello! \\* Yo! \\* Good day/morn/morning/eve/aft/afternoon!\n\nThese sentences all mean the exact same thing, which should be given the\nexact same type of response. But they\\'re constructed differently! We\nhave two sentence types: \\* (X)! \\* Good (X)!\n\nSaying \\\"Good hi\\\" would probably be silly. Saying \\\"Hi day\\\" would\nprobably be silly too. Let\\'s quickly turn these two into logics and NIP\nstructures: \\* Type: (X)! \\* Logic: hi OR hello OR yo \\* NIP: ({ ({\n\\\"hi\\\", \\\"hello\\\", \\\"yo\\\" }) })\n\n\\* Type: Good (X)! \\* Logic: good AND (day OR morn OR morning OR eve OR\naft OR afternoon) \\* NIP: ({ \\\"good\\\", ({ \\\"day\\\", \\\"morn\\\",\n\\\"morning\\\", \\\"eve\\\", \\\"aft\\\", \\\"afternoon\\\" }) })\n\nThere is, hopefully, nothing too surprising in those two. The surprise\ncomes now (maybe):\n\nWe want to put these two together into one single logic. How do we do\nthat? \\* Type: (X)! or Good (X)! \\* Logic: (hi OR hello OR yo) OR (good\nAND (day OR morn OR morning OR eve OR aft OR afternoon)) \\* NIP: ({ ({\n\\\"hi\\\", \\\"hello\\\", \\\"yo\\\", ({ \\\"good\\\", ({ \\\"day\\\", \\\"morn\\\",\n\\\"morning\\\", \\\"eve\\\", \\\"aft\\\", \\\"afternoon\\\" }) }) }) })\n\nWell, that may look hairy, but it\\'s really not. All I did was extend\nthe logic to be each sentence type parenthesized on its own with OR in\nbetween. The trickiest part is, honestly, the matching of the ({ })\\'s.\nThere are a lot of them in there, aren\\'t there\\...?\n\nSo let\\'s try that on our previous example. We had: \\* Sentence \\#1: You\nsuck! \\* Logic: you AND suck \\* ({ \\\"you\\\", \\\"suck\\\" })\n\n\\* Sentence \\#2: (I) hate/dislike you. \\* Logic: (hate OR dislike) AND\nyou \\* NIP: ({ ({ \\\"hate\\\", \\\"dislike\\\" }), \\\"you\\\" })\n\n\\* Sentence \\#3: You are (an) idiot/stupid. \\* Logic: you AND are AND\n(idiot OR stupid) \\* NIP: ({ \\\"you\\\", \\\"are\\\", ({ \\\"idiot\\\", \\\"stupid\\\"\n}) })\n\nThus, we get: \\* Logic: (you AND suck) OR ((hate OR dislike) AND you) OR\n(you AND are AND (idiot OR stupid)) \\* NIP: ({ ({ ({ \\\"you\\\", \\\"suck\\\"\n}), ({ ({ \\\"hate\\\", \\\"dislike\\\" }), \\\"you\\\" }), ({ \\\"you\\\", \\\"are\\\", ({\n\\\"idiot\\\", \\\"stupid\\\" }) }) }) })\n\nCan you nest your way through that? That one\\'s\\... pretty big. Let\\'s\ndissect it for the sake of:\n\n part dimension and/or comment\n ----------------------- ----------- -------- ------------------------------------------------------------------------------------------------------------------------\n ({ 1 AND Initial mode is \\\"AND\\\", always.\n ({ 2 OR \n ({ 3 AND Since we want \\\"you AND suck\\\", we need to actually hop into the 3rd dimension right away\n \\\"you\\\", \\\"suck\\\" 3 you AND suck\n }) 2 OR Back down to the OR level. So far, we\\'ve done (you AND suck), and now we want to start on ((hate OR dislike) AND you)\n , 2 (you AND suck) or \\...\n ({ 3 AND \n ({ 4 OR hate *OR* dislike, remember?\n \\\"hate\\\", \\\"dislike\\\" 4 hate OR dislike\n }), 3 AND hate/dislike, AND \\...\n \\\"you\\\" 3 \n }) 2 OR Back down to OR level again. We\\'ve got two out of three done so far. Go us!\n , 2 (you AND suck) OR ((hate OR dislike) AND you) OR \\...\n ({ 3 AND \n \\\"you\\\", \\\"are\\\", 3 you AND are AND \\...?\n ({ 4 OR \n \\\"idiot\\\", \\\"stupid\\\" 4 idiot OR stupid\n }) 3 AND \n }) 2 OR \n }) 1 AND \n }) 0 n/a End.\n\n------------------------------------------------------------------------\n\n### Families, again\n\nOkay, that was a little long, but never fear, it\\'s the messiest it\\'ll\nget.\n\nWe\\'re back at families, though. A family is, as you may have guessed,\nan identifier which points to a communicative logical construct, like\nwhat we played with just a moment ago. In Janet\\'s comm db, we\nhad:\\<verbatim\\>\\\"family:greetings\\\" = ({ ({ \\\"hello\\\", \\\"hi\\\", \\\"yo\\\"\n}) })\\</verbatim\\>Which is equal to the sentence type \\\"(X)\\\", or,\n\\\"Hello/hi/yo\\\". It also responds to \\\"\\<whatever\\> (X)\\\", \\\"(X)\n\\<whatever\\>\\\", \\\"\\<whatever\\> (X) \\<something else ever\\>\\\" and\n\\\"\\<whatever\\> (part of X) \\<something else ever\\> (other part of X)\n*and so on and so forth*\\\".\n\nIn short, any sentence which contains the words listed will be\nconsidered an appropriate target for this particular family. What next?\nIn Janet\\'s case, it\\'s simply recorded behavior. Some lustful builder\nhas already recorded behavior for Officer Janet, in **the comm db\nobject.**\n\nWhen recording behavior, you usually choose an object and a\nmood/situation. When doing so for families, you prefix the\nmood/situation with the family name.\n\nIn this case, the family name is \\\"greetings\\\". The mood name for\n\\\"catch \\'em all\\\" is \\\"db\\\" (since we don\\'t want to go into \\\"how\nwould Janet respond to \\'Hi\\' if she\\'s angry or sad or hungry etc.\\\").\n\nPutting the family name and the mood name together we thus get:\n\\\"greetings:db\\\" which we would then use when we recorded behavior, as\nsuch:\\<verbatim\\>+nip \\\"record start Kalle:NIP:comm:janet\ngreetings:db\\\"\\</verbatim\\>\n\n\\... but since someone\\'s done this for us already, we don\\'t have to do\nthat.\n\nI will soon put in examples on what else can be done using families and\ncommunication. For now, this should provide you with the basics, and the\ntricky part. I will attempt to write up a tool that can be used to\nconvert to and from \\\"English\\\" structures, like \\\"(hi OR hello) AND\nthere\\\" into a NIP structure. More info on this later, but don\\'t hold\nyour breath on this one. It might take awhile.\n\n\\-- Main.KalleAlm - 24 Apr 2005\n","dir":"/docs/unedited/","name":"NIPHowCommunication.md","path":"docs/unedited/NIPHowCommunication.md","url":"/docs/unedited/NIPHowCommunication.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1116820069\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO set consent allow all in spawned\nnippers?\\</FONT\\>\n\n**How:**\n\nSet the property \\\"nip-core:consent:allow-all\\\" in the nipper to 1\n(TRUE). To disable this feature, set that property to 0 (FALSE).\n\n\\-- Main.KalleAlm - 11 May 2004\n\nNote: the property \\\"nip-core:consent:deny-all\\\" is also available and\ndoes what you think it does.\n\n\\-- Main.KalleAlm - 22 May 2005\n","dir":"/docs/unedited/","name":"NIPHowConsent.md","path":"docs/unedited/NIPHowConsent.md","url":"/docs/unedited/NIPHowConsent.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1066674321\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make NPC\\'s interact with each\nother?\\</FONT\\>\n\n**How:**\n\n\\<a name=\\\"quick\\\"\\> \\</a\\> \\<font color=\\\"\\#0000ff\\\"\\>QUICK\nHOW-TO:\\</font\\>\\<br\\> *(if you feel comfident with the system, you\nmight want to read this quicker description; otherwise you might want to\n\\<a href=\\\"\\#long\\\"\\>hop down to the more explanative version\\</a\\>)*\n\nThis is a check-list for what you will need to do in order to make two\nNPC\\'s interact with each other: \\* You, naturally, need two NPC\\'s set\nup with the [emoting](NIPLibRefEmoting) library added. \\* You must then\nadd the [interaction](NIPLibRefInteraction) library to both NPC\\'s. \\*\nAt least one behavior data object must be set up (in case they\\'re \\\"of\nthe same type\\\", you only need one, otherwise you need two). \\*\n*Optionally, you can set the \\'nip:group\\' property in the NPC, to\ndefine more specifically what kind of NPC it is. If you do this,\nhowever, you must record for the group-name in the next step, instead of\n\\'nip\\'.* \\* You need to record **specifically** for the interaction, by\nusing the +nip tool \\\"scene\\\" to name the other \\\"npc\\\" ([see\ntutorial](NIPTutorialScenery)), in all behavior data objects, for the\nmood \\'nip\\'. \\* Both NPC\\'s must be set up to use these, by setting the\n**\\'nip:trait:interaction:db\\'** property in them to point at their\nrespective behavior data objects.\n\n*For testing purposes, you might want to set the property\n\\'nip:trait:interaction:chance\\' to 1. This property determines how big\nof a chance it is that an NPC should \\\"broadcast request\\\" or \\\"accept\nrequests\\\". Its default is 10 (which is 10%; 1 is 100%, 100 is 1%, etc.)\nwhich means the you will see some interaction approximately once every\n6th minute, which is a long wait if you just want to see if it works.\nJust don\\'t forget to set it back up to \\~10 when you\\'re finished, or\nyour NPC\\'s will be spam-beasts.*\n\n\\<hr noshade\\>\n\n\\<a name=\\\"long\\\"\\> \\</a\\> \\<font color=\\\"\\#0000ff\\\"\\>EXPLANATIVE\nHOW-TO:\\</font\\>\\<br\\> *(if you feel comfident with the system, you\nmight want to \\<a href=\\\"\\#quick\\\"\\>hop up to the quicker\ndescription\\</a\\>; otherwise you probably want to read this more\nexplanative version)*\n\nThis description shows an example on how to set two NPC\\'s up to\ninteract with each other:\n\n*I have two NPC\\'s; George and Lucy. I want George to occasionally wave\nto Lucy, and I want Lucy to occasionally wink at George. Simple enough,\neh? This is what I do, initially.*\n\n------------------------------------------------------------------------\n\n > +setp george \"add emoting\"\n Setting 'add' in &lt;Examples:George> to \"emoting\"\n Attempting to add library ...\n The 'emoting' library/hook has been loaded. Before your NPC will react, however, you must use (and \n make, if you haven't already) a behavior database.\n &lt;Lib:NIP:lib:emoting> loaded successfully.\n\n > +setp lucy \"add emoting\"\n [...]\n\n <strong>[Now that I have the emoting libs loaded (note: if you already have emoting, there's no point adding\n it again), I'm going to add the actual 'interaction' library as well.]</strong>\n\n > +setp george \"add nip\"\n Setting 'add' in &lt;Examples:George> to \"nip\"\n Attempting to add library ...\n - dependencies found. Checking prerequisites ...\n - OK.\n The NIP (NPC Interaction Protocol) has been loaded into the NPC. You can now create NPC-NPC \n interaction behavior, using the 'record' +nip-tool. See troll TWiki for further information.\n &lt;Lib:NIP:lib:interaction> loaded successfully.\n\n > +setp lucy \"add nip\"\n [...]\n\n <strong>[Next, I have to create two propertycontainers for their behavior.]</strong>\n <ul>\n > +cobj propcontainer \"Data:NIP:behavior:kalle:george\"\n OK.\n > +cobj propcontainer \"Data:NIP:behavior:kalle:lucy\"\n OK.\n </ul>\n <strong>[Thirdly, I need to record for each of them.]</strong>\n\n > +nip \"record start Data:NIP:behavior:kalle:george nip\"\n\n > +nip lucy \"scene npc\"\n Scene role (npc) set to Lucy.\n\n > wave to lucy \"!Hi Lucy!\"\n You wave to Lucy, \"!Hi Lucy!\"\n [STO:1]\n\n > +nip \"scene --\"\n Scene deleted.\n\n <strong>[And for Lucy too.]</strong>\n\n > +nip \"record start Data:NIP:behavior:kalle:lucy nip\"\n\n > +nip george \"scene npc\"\n Scene role (npc) set to George.\n\n > wink at george \"!Hey George!\"\n You wink at George, \"!Hey George!\"\n [STO:1]\n\n > +nip \"scene --\"\n Scene deleted.\n\n > +nip \"record stop\"\n\n <strong>[There we go! Now we only need to set a few values and see if Lucy and George will work \n together.]</strong>\n\n > +setp george \"nip:trait:interaction:db &lt;Data:NIP:behavior:kalle:george>\"\n\n > +setp lucy \"nip:trait:interaction:db &lt;Data:NIP:behavior:kalle:lucy>\"\n\n <strong>[And we're done. But let's temporarily set the chance of interaction to 100% (1) to make \n sure things work as they should. And, unless already enabled, let's turn the NPC's on.]</strong>\n\n > +setp george and lucy \"nip:trait:interaction:chance 1\"\n\n > +nip george \"live\"\n\n > +nip lucy \"live\"\n\n <strong>[And now, simply wait for them to act. Once they've done so (should take about a minute) \n return the chance value to 10 (10%)]</strong>\n\n > +setp george and lucy \"nip:trait:interaction:chance 10\"\n\n\\-- Main.KalleAlm - 07 Sep 2003\n","dir":"/docs/unedited/","name":"NIPHowInteractive.md","path":"docs/unedited/NIPHowInteractive.md","url":"/docs/unedited/NIPHowInteractive.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054842792\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make a mount (e.g. a horse)?\\</FONT\\>\n\n**How:**\n\n ---\n > +setp NPC \"add mounting\"\n ---\n\n**Tweaking functionality:**\n\nThere are a few values you can flip around to change how your NPC\nbehaves:\n\n ------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------- --------------------\n **Property:** **Description:** **Default value:**\n nip:trait:mounting:rider-gait Whenever someone mounts the NPC, the rider\\'s gait will change so that when the rider moves through rooms, it seems as if s/he is riding. \\\"riding\\\"\n ------------------------------- ------------------------------------------------------------------------------------------------------------------------------------------- --------------------\n\n**Further comment(s):**\n\nThe creation of this library was documented as a technical reference on\nhow to make libraries, [found here](NIPRefLibraries).\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPHowMakeAMount.md","path":"docs/unedited/NIPHowMakeAMount.md","url":"/docs/unedited/NIPHowMakeAMount.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1062195240\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make them accept things?\\</FONT\\>\n\nSome NPC\\'s should be able to accept and take things from people, such\nas trash-taking servants, credit-card clerks in hotels, scroll-snatching\ncouriers and such. The [offers](NIPLibRefOffers) library is used to do\nthis. However, the offers library keeps a list of **scripts** that will\nbe executed. These scripts will then return TRUE or FALSE, depending on\nwhether they wish to accept the offered object or not. Check out the\nlibrary reference for [eating](NIPLibRefEating), specifically the\n**merry:lib:handler:offer-eating** script.\n\n**How:**\n\nAdd the offers library to your NPC. If your NPC does not have the asking\nlibrary yet, you must add this as well.\\\\>\\> +setp \\<npc\\> \\\"add\noffers\\\" \\<font color=\\\"\\#ff0000\\\"\\>The core \\'offer\\' handler has been\nadded to this CNPC. This library is for example required by the\n\\'eating\\' library.\\</font\\>\\</pre\\>\n\nAfter successfully adding the offers library, you may now proceed to add\nyour script to the offer script chain by, whilst possessing the NPC,\ndoing:\\<verbatim\\>\\> +tool merry exec Call( this, \\\"core:add_offer\\\",\n\\$script: \\\"**script-name**\\\" );\\</verbatim\\>\n\n**Tweaking functionality:**\n\nNone.\n\n**Further comment(s):**\n\nThis is currently somewhat tricky. I will toss together a simple offer\ncontainer library sometime soon, so you won\\'t have to bother with\nscripts. The reason for the script thing is because at times it\\'s not\njust a matter of checking whether a property exists in the offered\nobject; a lot of the times checks need to be made to see if the NPC\nwould have use for the thing, or whether the NPC would refuse to take\nit.\n\n\\-- Main.KalleAlm - 29 Aug 2003\n","dir":"/docs/unedited/","name":"NIPHowOffers.md","path":"docs/unedited/NIPHowOffers.md","url":"/docs/unedited/NIPHowOffers.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1062193920\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make them give out things?\\</FONT\\>\n\nThe more practical CNPC\\'s, such as couriers, cooks, tailors, and such,\nmust be able to distribute things. That\\'s where the\n[presents](NIPLibRefPresents) library comes into the picture.\n\n**How:**\n\nAdd the library \\'presents\\'. You will need to add \\'asking\\' first,\nthough, if your NPC doesn\\'t have it already.\\\\>\\> +setp \\<npc\\>\n\\\"add presents\\\" \\<font color=\\\"\\#ff0000\\\"\\>The \\'presents\\' handler has\nbeen added to this CNPC. This means you can now attach things that the\nNPC will \\'hand out\\' to people. For instance, \\'scrolls\\' for courier\nCNPC\\'s and such.\\</font\\>\\</pre\\>\n\nNow, use the +NIP \\\"present\\\" tool to add items to the NPC. If it is a\ncook, for instance, you might want to add\n\\<Generic:food:meat:beef-roll\\>:\\\\>\\> +nip \\<npc\\> \\\"**present add\nGeneric:food:meat:beef-roll**\\\" The object Generic:food:meat:beef-roll\nadded.\\</pre\\>\n\nThe system automatically grabs all the snames from the object\\'s prime\ndetail and tacks them to the list of choices. If we wish to decide the\nnames to use, we simply write the names ourselves instead.\\\\>\\> +nip\n\\<npc\\> \\\"present add Generic:food:meat:beef-roll **beef meat food**\\\"\n\n**Tweaking functionality:**\n\nNone.\n\n**Further comment(s):**\n\nNone.\n\n\\-- Main.KalleAlm - 29 Aug 2003\n","dir":"/docs/unedited/","name":"NIPHowPresents.md","path":"docs/unedited/NIPHowPresents.md","url":"/docs/unedited/NIPHowPresents.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055168752\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make an NPC move through rooms\nrandomly?\\</FONT\\>\n\n**How:**\n\n > +setp NPC \"add movement\"\n\n**Tweaking functionality:**\n\nThere are a few values you can tweak to change how often your NPC moves\naround:\n\n ------------------------------ -------------------------------------------------------------------------------------------------- --------------------\n **Property:** **Description:** **Default value:**\n nip:trait:movement:frequency Movement frequency. 0 = don\\'t ever move; the higher the value the more seldom the NPC will move 10\n ------------------------------ -------------------------------------------------------------------------------------------------- --------------------\n\n**Further comment(s):**\n\nA [more advanced movement library](NIPTodoAdvancedMovement) is to be\ndeveloped further on. This library will simply scan for exits, pick one\nat random, and attempt to walk through it. I will add in code for\nopening doors that are closed and unlocking doors the NPC has access too\neventually (to this lib).\n\n\\-- Main.KalleAlm - 08 Jun 2003\n","dir":"/docs/unedited/","name":"NIPHowRandomMove.md","path":"docs/unedited/NIPHowRandomMove.md","url":"/docs/unedited/NIPHowRandomMove.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1084988806\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>How to record a behavior\ndatabase?\\</FONT\\>\\<br\\> *Also known as \\\"Proper Usage Of The Virtual\nCam\\\"*\n\n**First off,** what is a behavior db?\\<BR\\> Simply put, it\\'s an object\ncontaining a set of very complex properties which, interpreted by the\nsystem, makes it possible for the NPC to \\\"act out\\\" pre-made parser\nmoves (\\'A parrot smiles adoringly at you, \\\"Hi there schweetie\\\"\\').\n\n**So, how do I make one?**\n\n\\* First make sure you have added the emoting library to the npc -\n`+setp npc \"add emoting\"` \\* Create a propcontainer\n(`+cobj propcontainer`) and give it an appropriate name, which\npreferably (but not necessarily) go by the naming convention\n\\<Theatre\\>:<Data:NIP:behavior:%3Ctopic>\\>. \\* Execute from the parser,\n`+nip 'record start <i>WOENAME</i> DB'` \\* *WOENAME* = the woename for\nyour aforementioned property container. \\* *DB* = the name of the record\n\\\"mood/situation\\\". DB is an alias for \\\"everything.\\\"\n\n(At this point, you have begun recording. Note that it doesn\\'t matter\nif you record FROM your own or any other body. The data is stored in the\nobject, not in your own body. However, if your NPC is missing limbs, so\nto say, or if it has extra details (wings, fur, tail, etc.) it is\ncertainly recommended that you +possess the NPC before you start\nrecording.)\n\n\\* Begin by using the parser to act as the NPC would do. To actually\nrecord, however, your evoke must begin with an exclamation mark ().\n\nE.g.\n\n ---\n > smile happily \"!\n [STO:1]\n You smile happily, \"!\"\n\n > grin thoughtfully \"!\n [STO:2]\n You grin thoughtfully, \"!\"\n\n > glance contemplatively \"!I like muffins!\"\n [STO:3]\n You glance contemplatively, \"I like muffins!\"\n\n > bounce around here ecstatically \"!\n [STO:4]\n You bounce around StoryCoder Kalle's laboratory ecstatically, \"!\"\n ---\n\nWhen you\\'re done recording, disable recording by typing\n`+nip \"record stop\"`\n\nTo specify that the NPC should use your newly created behavior database,\nyou need to: `+setp <NPC> \"nip:behavior:db <Woe:for:your:new:db>\"`\n\n**Take special note**: the above is for moodless NPC\\'s. If you wish to\nrecord for NPC\\'s with varying moods, you may use the above method to\ncreate a default behavior (for when there is no mood-specific data\nstored). For each mood which behavior you wish to define, you must call\nthe `+nip \"record start Woe:name MOOD\"` command, where Woe:name is the\nwoename for the behavior db (<Data:NIP:behavior>:\\...) and MOOD is the\nname of the mood in question.\n\nE.g. if you have an NPC with the moods HAPPY and HUNGRY, you could do\nsomething like this:\n\n ---\n > +nip \"record start Data:NIP:behavior:my_db HAPPY\"\n Begun recording for mood 'HAPPY' in &lt;Marrach:players:K:kalle>.\n > smile happily, \"!I'm happy!\"\n [STO:1]\n You smile happily, \"!I'm happy!\"\n\n > bounce gleefully, \"!Wee!\"\n [STO:2]\n You bounce gleefully, \"!Wee!\"\n\n > +nip \"record switch HUNGRY\"\n Begun recording for mood 'HUNGRY' in &lt;Marrach:players:K:kalle>.\n > gaze hungrily \"!\"\n [STO:1]\n You gaze hungrily, \"!\"\n\n > peer silently at here \"!\n [STO:2]\n You peer silently at StoryCoder Kalle's laboratory.\n\n > whine sadl \"!I'm hungry!\"\n [STO:3]\n You whine sadly, \"!I'm hungry!\"\n\n > +nip \"record switch DB\"\n Begun recording for mood 'DB' in &lt;Marrach:players:K:kalle>.\n > nod coolly \"!\n [STO:1]\n You nod coolly, \"!\"\n\n > +nip \"record stop\"\n ---\n\nYou do not need a separate database object for each mood. All moods may\nreside in the same db. In the above case, we use the +nip \\\"record\nswitch\\\" function, which switches between moods in the same object,\nautomatically.\n\n\\<table style=\\\"border: solid \\#000000 1px;\\\"\\> \\<tr\\>\\<td\ncolspan=\\\"4\\\"\\>\\<center\\>**Special\nrecord-characters**\\</center\\>\\</td\\>\\</tr\\>\n\\<tr\\>\\<td\\>**Char**\\</td\\>\\<td\\>**Indicator**\\</td\\>\\<td\\>**Example**\\</td\\>\\<td\\>**Result**\\</td\\>\\</tr\\>\n\\<tr\\>\\<td\\>\\</td\\>\\<td\\>Record parser action.\\</td\\>\\<td\\>smile happily\n\\\"\\\"\\</td\\>\\<td\\>\\<NPC\\> smiles happily.\\</td\\>\\</tr\\>\n\\<tr\\>\\<td\\>\\>\\</td\\>\\<td\\>Freemote record.\\</td\\>\\<td\\>say \\\"\\>The\nground shakes violently.\\\"\\</td\\>\\<td\\>The ground shakes\nviolently.\\</td\\>\\</tr\\> \\<tr\\>\\<td\\>@\\</td\\>\\<td\\>Record delay\n(pause).\\</td\\>\\<td\\>say \\\"\\@2.5\\\"\\</td\\>\\<td\\>\\<2.5 second\npause\\>\\</td\\>\\</tr\\> \\</table\\>\n\nThe delay char (@) is only applicable in tracked recordings. Tracked\nrecordings are like regular recordings with a side-vector which tracks\nthe order in which each command is recorded. Tracked recordings can then\nbe replayed in full by the emoting parser through callback by the user.\n\nMore information on the topic of tracked recordings will appear soon.\n\n\\-- Main.KalleAlm - 19 May 2004\n","dir":"/docs/unedited/","name":"NIPHowRecord.md","path":"docs/unedited/NIPHowRecord.md","url":"/docs/unedited/NIPHowRecord.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1077576129\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO add in the \\'ask NPC about TOPIC\\' stuff\ninto my NPC (aka. \\'rumours\\')?\\</FONT\\>\n\n**How:**\n\nAdd the [rumours](NIPLibRefRumours) library:\n\n > +setp &lt;npc> \"add <b>rumours</b>\"\n <font color=\"#ff0000\">The rumours library was loaded. You will need to set the rumour data object to use in the property 'nip:trait:rumour:database'.</font>\n\nSet up a propertycontainer and name it something appropriate, e.g.\n*<Data:NIP:rumours:courier>*.\n\nAdd the topics and rumours to it;\n\n\\<li\\> **Topics**: \\<ul\\> To make the NPC reply to \\\"ask NPC about\nVIVIENNE\\\", with either \\\"Long May She Reign\\\" or \\\"Queen Vivienne is\nour gracious ruler\\\", you would use, \\<li\\> the property\n**\\'topic:vivienne\\'**\\<br\\> and set it to \\<li\\> **({ \\\"Long May She\nReign\\\", \\\"Queen Vivienne is our gracious ruler\\\" })** \\</ul\\> \\<li\\>\n**Aliases**: \\<ul\\> To make the same NPC also reply with the above, to\n\\\"ask NPC about QUEEN\\\", you would use, \\<li\\> the property\n**\\'alias:queen\\'**\\<br\\> and set it to \\<li\\> **\\\"vivienne\\\"** \\</ul\\>\n\nWhen you\\'re done making your rumour data object, you would set the\nproperty **\\'nip:trait:rumour:database\\'** in the NPC to\n\\<*woename:for:the:rumour:<data:object>*\\>.\n\nAnd you\\'re all set. Now you should be able to ask NPC about VIVIENNE\nand s/he should reply according to your object.\n\nNote: currently, the ask command is +ask, until the old ask command is\nripped out.\n\n\\-- Main.KalleAlm - 06 Sep 2003\n","dir":"/docs/unedited/","name":"NIPHowRumours.md","path":"docs/unedited/NIPHowRumours.md","url":"/docs/unedited/NIPHowRumours.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1062192653\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO turn an object into an NPC?\\</FONT\\>\n\n**How:**\n\nMake sure your object is backed up (in case something would go wrong).\n\nSummon it into your environment if you wish. It\\'s not needed, though.\n\nType: **+nip \\\"set Woename:for:your:object\\\"**\n\nYou will receive a brief welcome message, and then you\\'re done!\n\n**Tweaking functionality:**\n\nThe NPC will at this point contain a number of properties. These\nproperties are nip:**, nip-core:** and npc:**.\\<br\\>The most important\nones to remember are the nip:** ones.\\<br\\>nip-core:\\* should usually be\nleft as is.\\<br\\>npc:\\* is a property representation of the NPC\\'s\ncurrent state, and should not contain any system configuration\nproperties.\n\n**Further comment(s):**\n\n[Check out the tutorials and/or howto\\'s](NIPSystemReference) on what to\ndo next.\n\n\\-- Main.KalleAlm - 03 Jun 2003\n","dir":"/docs/unedited/","name":"NIPHowSetUp.md","path":"docs/unedited/NIPHowSetUp.md","url":"/docs/unedited/NIPHowSetUp.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054842018\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO make them sleep?\\</FONT\\>\n\n**How:**\n\n\\> +setp NPC \\\"add sleeping\\\"\n\nDone!\n\n**Tweaking functionality:**\n\nThere are a few values you can flip around to change how your NPC\nbehaves sleeping-wise:\n\n ----------------------------- -------------------------------------------------------------------------- ----------------------------------\n **Property:** **Description:** **Default value:**\n nip:trait:sleeping:effect How fast does it recover while sleeping? 2\n nip:trait:sleeping:interval Approximately, how many seconds before we\\'re tired. 57600\n nip:trait:sleeping:states The states in which the NPC might reside. Don\\'t change unless you must. (\\[ \\\"awake\\\":1, \\\"sleep\\\":1 \\])\n ----------------------------- -------------------------------------------------------------------------- ----------------------------------\n\n**Further comment(s):**\n\nThe sleeping effect value determines how much one second is worth while\nsleeping, compared to one whilst awake. Effect 1 would be 100%, e.g. NPC\nis awake for 12 hours, gets tired, sleeps for 12, gets up, etc. Effect 2\nwould be 200%. NPC is awake for 12 hours, sleeps for 6, awake 12, sleep\n6, etc. Effect 3 = awake 12, sleep 4. And so on.\n\nA number of scripts rely on this script\\'s states, being \\\"awake\\\" or\n\\\"sleep\\\", but it\\'s not a dead set thing and can be changed if scripts\nthat were necessary were given a new name and modified accordingly.\n\n\\-- Main.KalleAlm - 01 Jun 2003\n","dir":"/docs/unedited/","name":"NIPHowSleep.md","path":"docs/unedited/NIPHowSleep.md","url":"/docs/unedited/NIPHowSleep.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092188965\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font color=red\\>This document underwent modifications in accordance to\nthe modifications made to the NIP trading system. The main modification\nwas converting all float properties into integer 2-decimal hack-floats\n(`123 = 1.23`)\\</font\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>HOW TO set up a nipper to use\n[trading](NIPLibRefTrading)?\\</FONT\\>\n\n**How:**\n\n[Trading](NIPLibRefTrading) is a nipper library used to enable\n\\\"transactions,\\\" or \\\"purchases,\\\" NPC-to-PC. It allows the usage of\n\\\"hard\\\" cash (bills and coins) and/or \\\"credit\\\" type cash (like an\nactual credit card, or some form of credit system or another), depending\non how the CDO is set up (in this case, CDO is abbr. \\\"Cash Data\nObject\\\"). [\\[more information on CDO\\'s](NIPHowCashDataObjects)\\]\n\nIn this how-to, I am going to presume that you have a CDO set up (for\nyou, or by you), and that you simply wish to enable this CDO setup in\nyour NPC. If this is not the case, either [go\nhere](NIPHowCashDataObjects) (to find out how to make CDO\\'s), or stop\nreading now and poke someone worldly into doing it.\n\n\\<hr/\\>\n\n(From here on, I\\'m going to refer to your CDO\\'s woe object as\n\\<CDO\\>.)\n\nAny objects the NPC will sell need to have a \\\"cost\\\" property set;\nnamely the property **\\\"export:nip:item:cost\\\"**. This property **must\nbe an integer value**, e.g. 100. If your currency is in dollars and\ncents, and one dollar equals 100 cents, then all money values should be\nwritten in **cents**.\n\nIn order to fully test the set up, you need at least one item with the\n**\\\"export:nip:item:cost\\\"** property set. Grab whatever, a beef roll or\nsomething, and set this property to, for example, **500** (\\$5.00)\n\nThis, of course, presuming you do not already have a set of items\nalready set up for sale, in which case you can use one or several of\nthem.\n\n1 Summon your NPC.\\\\>\\> +summon *Woe:name:for:my:npc*\\</pre\\> 2 You\nneed these three NIP libs, in this order: [asking](NIPLibRefAsking),\n[presents](NIPLibRefPresents), [trading](NIPLibRefTrading)\\\\>\\>\n+setp *npc* \\'add asking\\'\\<br/\\>\\> +setp *npc* \\'add\npresents\\'\\<br/\\>\\> +setp *npc* \\'add trading\\'\\</pre\\>(Now, obviously,\nif you already use one or both of the aforementioned libraries, you\nneedn\\'t add them a second time.) 3 Set the property\n**\\\"nip:trait:trading:object\\\"** to \\<CDO\\> (where \\<CDO\\> is, as stated\nearlier, the woename of your CDO within \\< and \\>\\'s.)\\\\>\\> +setp\n*npc* \\'nip:trait:trading:object \\<Woename:for:my:CDO\\>\\'\\</pre\\> 4 Add\nyour item-for-sale to the nipper\\'s list of \\\"presents\\\" by using the\n+nip-command\\'s [present](NIPToolPresent) command.\\\\>\\> +nip *npc*\n\\'present add *Woename:for:my:item*\\'\\</pre\\>\n\nAnd now, things should work. Start out by trying to ask the NPC (just\n\\'ask npc\\') to see if the item is listed.\n\n ---\n > ask <i>npc</i>\n <i>An NPC</i> can give you a beef roll.\n ---\n\nGood. Now, presuming you have some cash at hand, you should be able to\ncomplete a purchase.\n\n ---\n > ask <i>npc</i> for beef roll\n <i>An NPC</i> offers his beef roll to you.\n Type 'accept from an NPC' to take this item.\n Type 'refuse an NPC' to refuse to take it.\n This will cost you $23.45.\n\n > accept beef roll\n You hand your three half dollars, your two bucks and your twenty dollar bill to an NPC, paying him $23.50.\n An NPC gives you back $.05 in change.\n You take a beef roll from an NPC.\n ---\n\n\\<font color=\\\"\\#ff0000\\\"\\>Note: currently, the \\'ask\\' verb is still\nhooked with the old NPC system; a temporary \\'+ask\\' verb exists in its\nstead.\\<br/\\>Further note: this goes for the CM server only. The other\nservers are using the NPC \\'ask\\' verb.\\</font\\>\n\n\\-- Main.KalleAlm - 16 Feb 2004\n","dir":"/docs/unedited/","name":"NIPHowTrading.md","path":"docs/unedited/NIPHowTrading.md","url":"/docs/unedited/NIPHowTrading.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235654\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% [NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> b {\nfont-size: 12pt; font-weight: bold; } .query { font-size: 12pt; color:\n\\#ff0000; font-weight: bold; } .title { font-size: 20pt; font-weight:\nbold; color: \\#000000; } hr { position: absolute; shade: none; width:\n75px; left: 10px; clear: left; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPLaborationStyle.md","path":"docs/unedited/NIPLaborationStyle.md","url":"/docs/unedited/NIPLaborationStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1139250230\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: anger\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:anger\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> [MOOD](NIPHookRefMood)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nAnger provides the mood \\'angry\\' to the NPC.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe anger mood uses the default MOOD system to include the \\'angry\\'\nmood. See **nip:mood:registry** in any NPC using the system. Also see\n\\<font\nclass=\\\"lib\\\"\\>Lib:NIP:signals:MOOD\\</font\\>/**lib:core:add_mood** and\n\\<font\nclass=\\\"lib\\\"\\>Lib:NIP:signals:MOOD\\</font\\>/**lib:core:sub_mood** for\nmore details on how to create a new mood.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:anger:mood\\</font\\> \\<UL\\> (Signal MOOD;\nhook anger)\\<br\\> This script is supposed to regulate the ANGRY mood\naccording to how the NPC feels. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> NIP Library init\nscript. \\</UL\\>\n\n\\-- Main.KalleAlm - 05 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nWhen does a NIP become more angry? Under what conditions? And can those\nconditions be controlled via +setp or should they be left alone? \\--\nMain.ToddNilson - 05 Feb 2006\n\nVery much an undeveloped aspect. The only thing, to my knowledge, that\nmodifies anger is the [relations library](NIPLibRefRelations), which\nlacks proper tools to be truly useful.\n","dir":"/docs/unedited/","name":"NIPLibRefAnger.md","path":"docs/unedited/NIPLibRefAnger.md","url":"/docs/unedited/NIPLibRefAnger.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1098744977\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: autostart\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Internal](NIPCategoryInternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:autostart\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None known.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nStart the heartbeat thread upon spawning automatically.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nWhen a nipper using the autostart library is spawned, it will\nautomatically start the heartbeat thread.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:start:auto\\</font\\> \\<ul\\>\nAuto-start handler. \\</ul\\>\n\n\\-- Main.KalleAlm - 25 Oct 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefAutostart.md","path":"docs/unedited/NIPLibRefAutostart.md","url":"/docs/unedited/NIPLibRefAutostart.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1150029360\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: commanding\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:commanding\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe commanding lib is used to handle evoked commands to NPC\\'s, and may\ncome in handy when making guards whom obey orders or animals who do\ntricks, or anything similar.\n\nThe library provides two functions, **lib:core:add_command** and\n**lib:core:sub_command** inherited in the NPC when the lib has been\nloaded. These functions can be used to add/remove scripts to the command\nchain, **\\\"nip:trait:commands\\\"**.\n\nExample lib:init script for a library using the command lib, which adds\na command *\\\"jump\\\"* which is triggered when someone says *\\\"jump\\\"*,\n*\\\"bounce\\\"* or *\\\"skip\\\"* to the NPC.\n\n --- <B>merry:lib:init</B> in <B>Example:Library:Using:Commanding</B> ---\n Call( this, \"core:add_command\", $trigger: ({ \"jump\", \"bounce\", \"skip\" }), $script: \"jump\" );\n ---\n\nThe script in the above example **must** be named\nmerry:lib:command:*jump*. Read [the naming rules for\nscripts](NIPScriptGroups) for further information on this.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe commanding library hooks the\n**react-post:evoke-dob**/**react-post:evoke-iob**-scripts in the NPC on\nload, which in turn call the **lib:commanding** script. The commanding\nscript checks the command chain (**\\\"nip:trait:commands\\\"**) for any\nmatches in the evoke. The first match (if any) triggers the appropriate\nlib:command:\\*-script. This means that you must call any script called\nin this way [lib:command:something](NIPScriptGroups), or it won\\'t be\nfound.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:commands\\</font\\> \\<UL\\> Mapping of\ntrigger-\\>script references. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:commanding\\</font\\> \\<UL\\> This script\nis called from the **react:evoke-dob**/**react:evoke-iob**-scripts\nwhenever something is spoken to the NPC.\\<br\\> It scans the\n**\\\"nip:trait:commands\\\"** property in the NPC for possible\ninterpretations and, if found, executes the appropriate script (again,\nif found). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:core:add_command\\</font\\> \\<UL\\> The\nadd_command script is a function for use by libraries using the\ncommanding library, and is used to add trigger-to-script references to\nthe command chain.\\<br\\> The script takes two arguments, **\\$trigger**\nand **\\$script**, both required.\\<BR\\> The \\$trigger argument may be **a\nstring** or **array of strings**.\\<BR\\> The \\$script argument must refer\nto a merry:lib:command:**(\\$script)**-merry script which must reside,\ninheritantly or natively, in **this** (the NPC). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:core:sub_command\\</font\\> \\<UL\\> The\nsub_command script removes references from the command chain.\\<BR\\> It\nrequires one argument, **\\$trigger**, which may be **a string** or\n**array of strings**. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:react-post:evoke-dob\\</font\\>,\\<font\nclass=\\\"lib\\\"\\> merry:react-post:evoke-iob\\</font\\> \\<UL\\> These scripts\nare shells for direct-object and indirect-object evoke signals, and call\nthe \\<font class=\\\"lib\\\"\\>merry:lib:commanding\\</font\\> script. \\</UL\\>\n\n\\-- Main.KalleAlm - 05 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nKalle is it possible to get an actual Tutorial on using this particular\nlibrary? I\\'ve ready over the information here several times, and really\ncant make heads or tails of it. I\\'m attempting, well was attempting to\nuse in for our new Pets on Lazarus, but because of my inability to\nproperly read and use this I\\'ve been forced to create a library of\ncommands through merry. I just wonder if, using the command library, it\nwould have been an easier. \\-- Main.StoryBuilderLilith - 07 Jun 2006\n\nIt\\'s already there: NIPHowCommanding :) -Kalle.\n","dir":"/docs/unedited/","name":"NIPLibRefCommanding.md","path":"docs/unedited/NIPLibRefCommanding.md","url":"/docs/unedited/NIPLibRefCommanding.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1143046199\\\" format=\\\"1.0\\\"\nversion=\\\"1.10\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: communicate\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:communicate\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[Emoting](NIPLibRefEmoting)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [MOOD](NIPHookRefMood),\n[omni-comm](NIPLibRefOmniComm)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nNPC-to-PC response by verbal triggers.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nCommunicate, light version. Using a set of behavior recordings based on\nresponse families, which in turn are individually constructed sentence\nrecognition arrays.\n\nAdditionally, each response family can be recorded for specific moods.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:communicate:db\\</font\\> \\<UL\\> (Object\npointer.)\\<br/\\> Pointer to the data object in which the communicate\ndata is located, as well as the recorded behavior for the individual\nfamilies. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:communicate:log-to\\</font\\> \\<UL\\>\n(Object pointer.)\\<br/\\> Optional pointer to an object in which entries\nshould be logged, whenever the NPC fails to comprehend something spoken\nto it. This can be useful to in the long term improve the comprehension\nlevels of nippers by finding out what players ask about. The entries are\nstored where the property is a UNIX timestamp of the date when the\nquestion was asked, and in the format \\\"\\[Describe(NPC)\\] was asked by\n\\[Describe(actor)\\] and failed to reply: \\\\\\\"\\[evoke\\]\\\\\\\"\\\". \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>npc:comm:alt:\\<family\\>\\</font\\> \\<UL\\>\n(String.)\\<br/\\> If \\<family\\> is triggered, and npc:comm:alt:\\<family\\>\nexists, the behavior/situation called will be\n\\<family\\>\\<value\\>.\\<br/\\> E.g. if the family \\\"i-love-you\\\" is\ntriggered, the system will look for the property\n\\\"npc:comm:alt:i-love-you\\\" in the NPC. If \\\"npc:comm:alt:i-love-you\\\"\nis set to e.g. \\\"-yes\\\" the family trigger will turn from \\\"i-love-you\\\"\ninto \\\"i-love-you-yes\\\" and if behavior data for \\\"i-love-you-yes\\\"\nexists, it will be used instead. Additionally, the execution (if the\nfamily is set to be \\\"executed\\\") will use the alternative name. Thus,\nthe script \\\"merry:lib:i-love-you-yes\\\" would be called. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>npc:comm:disabled:\\<family\\>\\</font\\> \\<UL\\>\n(Boolean.)\\<br/\\> If \\\"npc:comm:disabled:\\<family\\>\\\" exists, \\<family\\>\nwill never be checked for a match. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:core:reply\\</font\\> \\<UL\\>\n\\\\>\\\"Process a sentence (\\$evoke_to_npc) and return a result spoken\nstring.\\\"\\</pre\\> \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:family_resolve\\</font\\> \\<UL\\>\n\\\\>\\\"Resolve a family array and return success/failure.\n\nRequired arguments: \\$family: family data \\$map_string: mapping with\nstring words to match \\\"\\</pre\\> \\</UL\\>\n\n\\<font\nclass=\\\"lib\\\"\\>merry:react-post:evoke-dob%nip:communicate\\</font\\> and\n\\<font\nclass=\\\"lib\\\"\\>merry:react-post:evoke-iob%nip:communicate\\</font\\>\n\\<UL\\> \\\\>\\\"Evoke response for the communicate lib.\\\"\\</pre\\>\n\\</UL\\>\n\n\\-- Main.KalleAlm - 08 Dec 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nThis is pretty damn uninformative when someone wants to use it. More\ndocs..\n\n\\-- Main.KalleAlm - 23 Feb 2004\n\nFixed minor bug in family resolution.\n\nAdditionally, fixed dependency bug to include\n[emoting](NIPLibRefEmoting). The system would crash without it.\n\n\\-- Main.KalleAlm - 23 Feb 2004\n\nFixed another bug and added [omni-comm](NIPLibRefOmniComm) as a\nsupplementary option.\n\n\\-- Main.KalleAlm - 24 Feb 2004\n\nAdded (previously) a few new features to this:\n\n\\* Property \\\"execute:\\<family\\>\\\" (boolean) - if set (1), a call to\n\\\"merry:lib:\\<family\\>\\\" in the communications library will be made when\nthis family is triggered. \\$npc is passed as an object representator of\nthe NPC object.\n\n\\* Behavior/situation \\\"\\<family\\>\\<alternative\\>:\\<mood\\>\\\" (behavior\ndata) - some complex communication requires that the NPC responds\ndifferently at a given point. E.g. \\\"ask creature \\'What is your\nname?\\'\\\" - creature responds with its name - \\\"ask creature \\'What is\nyour name?\\'\\\" - creature grunts \\\"I told you already\\\"\n\n\\* Property \\\"npc:comm:alt:\\<family\\>\\\" (string) - if set to anything\nbut nil, the behavior for \\<family\\> will be using the alternative\n\\<family\\>\\<alternative\\>:\\<mood\\> behavior data (see above note).\n\n\\* Property \\\"npc:comm:disabled:\\<family\\>\\\" (boolean) - if set (1),\n\\<family\\> is never checked for matches.\n\n\\-- Main.KalleAlm - 05 Mar 2004\n\nBegan docs ([NIPHowCommunication](NIPHowCommunication)). Also clarified\nspecification on the concept of alternative family executions.\n\n\\-- Main.KalleAlm - 24 Apr 2005\n\nAdded new tool, [comm](NIPToolComm), which is used to construct family\ndata.\n\n\\-- Main.KalleAlm - 15 May 2005\n\nModified code slightly. If behavior data is not found for a particular\nfamily, the system will presume that FREEMOTE behavior data does exist.\n\nThus, freemotes in communication responses is currently disabled unless\nno emote data exists. There are some issues with this (\\\"when should I\nuse what where? just because -this- family has freemote data doesn\\'t\nmean -that- one does. where should the frequency difference lie between\nfreemote and emote? on a per family level, per nipper level?\\\" and so on\nand so forth).\n\n\\-- Main.KalleAlm - 07 Jun 2005\n\nAdded log-to feature.\n\n\\-- Main.KalleAlm - 22 Mar 2006\n","dir":"/docs/unedited/","name":"NIPLibRefCommunicate.md","path":"docs/unedited/NIPLibRefCommunicate.md","url":"/docs/unedited/NIPLibRefCommunicate.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1099051740\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: courier\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Example](NIPCategoryExample)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:courier\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[offers](NIPLibRefOffers), [presents](NIPLibRefPresents),\n[DELIVERY](NIPHookRefDelivery)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None specific.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\>\n[mounting](NIPLibRefMounting)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nEnqueuing and distributing enqueued items from the delivery database.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe courier library uses the delivery database to hand out / enqueue\nobjects from within the game.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act-post:enter\\</font\\> \\<UL\\> This script\nis triggered when the courier has moved from a room into another. The\ncourier is added to the new room in the delivery database\\'s nip:covered\nmapping. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act-post:teleport\\</font\\> \\<UL\\> This\nscript is triggered when the courier has been teleported into a new\nroom. The courier is added to the room in question\\'s nip:covered\nmapping. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:enter\\</font\\> \\<UL\\> This script is\ntriggered **before** the courier has entered a new room, while the\ncourier is still in the old room. The courier is removed from the old\nroom\\'s nip:covered mapping. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:teleport\\</font\\> \\<UL\\> This script is\ntriggered **before** the courier has been teleported out of a room into\nanother. The courier is removed from the left room in the nip:covered\nmapping. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:offers:addressed\\</font\\> \\<UL\\>\nAn [offers](NIPLibRefOffers) handler added to the offers script chain\nwhen this library is loaded into an NPC. Anything offered to the NPC\nwhich is addressed to someone is accepted and enqueued appropriately.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> NIP Library\ninitialization script.\\<BR\\> This script adds the \\<NPC:misc:scroll\\> to\nthe present dist list, adds the \\<font\nclass=\\\"lib\\\"\\>offers:addressed\\</font\\> handler to the offers script\nchain, and makes the NPC a scriptrunner if it isn\\'t one already.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:witness:enter-from\\</font\\> \\<UL\\> This\nscript is triggered whenever someone enters the room. The target is\nautomatically checked for enqueued scrolls and if found, these are all\ndelivered instantly. \\</UL\\>\n\n\\-- Main.KalleAlm - 14 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nWe need for lovecraft country some type of inanimate object that acts\nlike a courier, i.e.:\n\n > enter mailroom\n You arrive in the mailroom.\n > check mailbox\n You get 5 envelopes from your mailbox.\n\n\\-- Main.ChristopherAllen - 17 Jun 2003\n\nDefinitely. A variety of different methods to collect the items\nshould/will be available soon.\n\nI guess the big question is whether letters and such should be separated\nfrom items and deliveries of that nature. Someone has a new T.V. sent to\nthem via mail. Would that be handed by a courier, be put in a mailbox,\nor be available at some mail office with NPC clerks/desk assistants.\n\nSo yeah, the issue is \\\"broad\\\" to say the least. If you wish to do\nsomething LC-specific, please do. I do have plans to do this some time\nwithin the week/next week though.\n\n\\-- Main.KalleAlm - 18 Jun 2003\n\nNew feature implemented - alternative recipients (assistants).\n\nThere are two properties that affect this.\n\n1 In every PC body, if the property \\\"nip:delivery:alternative\\\" is set\nto another object, all scrolls to the PC will be redirected (but not\nre-addressed) to the alternative body. Thus, assistants can take their\nmaster\\'s scrolls (CM). 2 In the actual letter/scroll/package, if the\nproperty \\\"nip:delivery:direct\\\" is set (1), the item will **not** be\nredirected. Thus, it is still possible to send things to the PC\ndirectly.\n\n\\-- Main.KalleAlm - 24 Aug 2004\n\nThe courier example library now uses the CronDaemon to purge old\nundelivered scrolls (purge = deliver). Make sure it is enabled.\n\n\\-- Main.KalleAlm - 29 Oct 2004\n","dir":"/docs/unedited/","name":"NIPLibRefCourier.md","path":"docs/unedited/NIPLibRefCourier.md","url":"/docs/unedited/NIPLibRefCourier.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1161785832\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: death\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:death\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [Prey](NIPLibRefPrey),\n[fighting-fake](NIPLibRefFightingFake).\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nExtends the \\\"death\\\" concept of libraries to include decaying and\nrotting and, eventually, disintegration of the nipper after it has been\nkilled and left in-game (as opposed to it being killed and gutted or\neaten or whatever).\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe \\'death\\' library adds a single action handler called\n\\'act:nip/die\\', which overrides existing act:nip/die inherits. The\nnip/die action shuts the nipper down and puts it through a process of\ndecaying, rotting, and disintegration specified via a number of\nspecialized description types. These types are: \\* dead-examine \\*\ndead-look \\* dead-brief \\* dead-pbrief \\* rotting-brief \\*\nrotting-examine \\* rotting-look \\* rotting-pbrief \\* skeleton-brief \\*\nskeleton-examine \\* skeleton-look \\* skeleton-pbrief\n\nIf these descriptions are found in the killable nipper, they will\nreplace the descriptions when the nipper enters the \\\"stage\\\" in\nquestion. The stages are: \\* dead \\* rotting \\* skeleton\n\nThe time interval between each stage can be defined using the\n\\\"nip:trait:death:XXX_time\\\" properties (see NIP PROPERTIES section for\nfurther information), and default to: \\* dead -\\> rotting in 1 day\n(86400 seconds). \\* rotting -\\> skeleton in 3.5 days (302400 seconds).\n\\* skeleton -\\> disintegrates in 1 week (604800 seconds).\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`object <font class=\"lib\">nip:trait:death:dead</font>` \\<ul\\> When the\nnipper dies, if this property is set to a valid object, the nipper\\'s\nUrParent will be set to the object in question, and the remaining\nfunctionality of the death library will be disabled. \\</ul\\>\n\n`int <font class=\"lib\">nip:trait:death:rot_time</font>` \\<ul\\> The\nnumber of seconds from the point of death that it will take before this\nnipper begins to use the \\'rotten\\' descriptions. \\</ul\\>\n\n`int <font class=\"lib\">nip:trait:death:skeleton_time</font>` \\<ul\\> The\nnumber of seconds it will take for this nipper to go from the rotting\nstate to the skeleton state. \\</ul\\>\n\n`int <font class=\"lib\">nip:trait:death:disintegrate_time</font>` \\<ul\\>\nThe number of seconds it will take for this nipper to go from the\nskeleton state to it disintegrating (read: it is slain). \\</ul\\>\n\n`boolean <font class=\"lib\">npc:is_dead</font>` \\<ul\\> If this property\nis **unset** while the death library is processing the nipper, the death\nprocessing is aborted. The death library sets this property upon\ninitializing. \\</ul\\>\n\n`int <font class=\"lib\">npc:death:time</font>` \\<ul\\> Timestamp when the\nnipper died. \\</ul\\>\n\n`int <font class=\"lib\">npc:death:state</font>` \\<ul\\> State of the\nnipper\\'s decaying. \\* 1 = freshly dead \\* 2 = rotten \\* 3 = skeleton\n\\</ul\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:nip/die\\</font\\> \\<ul\\> Perform the\nrotting, skeleton-turning, and disintegration of the nipper. \\</ul\\>\n\n\\-- Main.KalleAlm - 03 Aug 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nFixed bug where death-but-not-prey nippers did not properly lose\nvolition upon death.\n\nMain.KalleAlm 2006-10-25.\n","dir":"/docs/unedited/","name":"NIPLibRefDeath.md","path":"docs/unedited/NIPLibRefDeath.md","url":"/docs/unedited/NIPLibRefDeath.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"toddn\\\" date=\\\"1139507887\\\" format=\\\"1.0\\\"\nversion=\\\"1.9\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: eating\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:eating\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> [offers](NIPLibRefOffers)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [MOOD](NIPHookRefMood)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe eating library provides, if the MOOD signal is available, the\n\\'HUNGRY\\' mood automatically. It uses the [offers](NIPLibRefOffers)\nlibrary to accept food offered to it (something that can be disabled\nand/or restricted at the whim of the user).\n\nIt eats food in its hands if it\\'s hungry enough.\n\nIt also takes food in its environment, if it\\'s very hungry.\n\nThe hunger is determined by looking at the **\\\"npc:energy\\\"** property.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe eating library is pretty much described above. It adds the aspect of\nhunger to the NPC and the mood (if appl.) \\'HUNGRY\\' as well.\n\nInternally, the NPC keeps track of the **\\\"npc:energy\\\"** value which\ndetermines how hungry it is (the lower energy, the hungrier). The hunger\nis also affected by the **\\\"nip:trait:eating:grammes\\\"**, which\nspecifies (in grammes) how much food the NPC has to eat to be \\\"full\\\".\nThe property **\\\"nip:trait:eating:accepts\\\"** represents a list of\nproperties that the NPC will regard as \\'food\\'.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:eating:accepts\\</font\\> \\<UL\\> Mapping,\nlike (\\[ \\\"property name\\\" : \\\"property value\\\" \\]) specifying a list of\nproperties and values. These values are then used in the \\<font\nclass=\\\"lib\\\"\\>merry:lib:handler:offer:eating\\</font\\> script, whereas\nif either is found in an offered item, the NPC will accept it as food\n(if it\\'s hungry enough). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:eating:burn\\</font\\> \\<UL\\> Float, the\nnumber of grammes of food (energy) burnt per hour.\n\nDefault value is 300 grammes per hour, which will let the default NPC (2\nkg energy stock) hungry once every \\~6-7th hour.\n\nThe burn rate is how many grammes the NPC burns. The **lower** that\nvalue, the **less** hungry it will be, or rather, the longer it will go\nfull. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:eating:grammes\\</font\\> \\<UL\\> Integer,\ndescribes how many grammes of food an NPC must eat to be full. \\* If the\nrelative hunger (energy / grammes) is less than 0.5, the NPC will eat if\nit has food in its inventory. \\* If the relative hunger is less than 0.3\n(w/ some random modifiers), the NPC will get anything it regards as\nfood, which lies in its direct environment.\n\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>npc:energy\\</font\\> \\<UL\\> Integer. The npc:energy\nvalue determines the NPC\\'s current fat reserves: the lower the value,\nthe hungrier the NPC. The higher the energy value, the more food it can\neat before it is full. Energy is decreased based on the burn rate, so a\nvery high energy with a low burn rate will result in an NPC that eats\n**less** often. To figure out the relational hunger of the NPC, do\n(this.**\\\"npc:energy\\\"** / this.**\\\"nip:trait:eating:grammes\\\"**).\n(Multiply that by 100 to get a percentage value.)\n\n\\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:eat\\</font\\> \\<UL\\> This script is\ntriggered whenever the NPC eats something. The script is responsible for\nincreasing the NPC\\'s energy a bit (**\\\"npc:energy\\\"**) whenever it\ntakes a bit of something. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:done-post\\</font\\> \\<UL\\> NIP Library\nde-initialization script. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:eating:decide\\</font\\> \\<UL\\> (Signal\nDECIDE, hook eating)\\<br\\> This script scans the energy values and\ndecides if the NPC should do something about its hunger, and if so,\nwhat. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:eating:internal\\</font\\> \\<UL\\> (Signal\nINTERNAL, hook eating)\\<br\\> This script simply makes the NPC gradually\nhungrier. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:eating:mood\\</font\\> \\<UL\\> (Signal\nMOOD, hook eating)\\<br\\> This script is only loaded if the MOOD signal\nis present. It will modify the \\\"HUNGRY\\\" mood according to the hunger.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:offer:eating\\</font\\> \\<UL\\>\nThis handler script is called from the **react-post:offer-to** script,\nas specified in [the offers library](NIPLibRefOffers). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:hook:init-post\\</font\\> \\<UL\\> This\nscript is attached to a special hook called \\\"hook\\\" which is triggered\nwhenever a hook is loaded, where **\\$HID** is the hook ID. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> (NIP Library init\nscript.)\\<br\\> This script adds the handler \\\"offer:eating\\\" (\\<font\nclass=\\\"lib\\\"\\>merry:lib:handler:offer:eating\\</font\\>) to the offer\nchain. \\</UL\\> \\</font\\>\n\n\\-- Main.KalleAlm - 05 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefEating.md","path":"docs/unedited/NIPLibRefEating.md","url":"/docs/unedited/NIPLibRefEating.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1116192129\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: emoting\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Appearance](NIPCategoryAppearance)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:emoting\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [MOOD](NIPHookRefMood)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nParser emoting functionality for CNPCs. The emoting library makes use of\na behavior database and randomly emotes via the parser.\n\nIf the NPC is using moods, the emoting library will look in the\nspecified database for mood-specific data. See [How To record a behavior\ndatabase](NIPHowRecord) for further details.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe emoting library uses a (group of) specified behavior database(s) to\nrandomly express how an NPC feels (if moods are available), or simply to\nshow it\\'s alive.\n\nThe library uses behavior databases constructed using the NIP extension\nLib:NIP:EXT:record (to be documented) \\-- again, see [How To record a\nbehavior database](NIPHowRecord) for details on this.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:emoting:frequency\\</font\\> \\<UL\\> The\nemoting frequency. The default value is 10, which means the NPC will\nemote on average every 200th second (i.e. every 3m20s\\'d).\n\nThe lower the value, the more frequent the NPC\\'s emotes will be (every\n(20 \\* frequency)\\'th second, on average). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:titles:default\\</font\\> \\<UL\\> Default\ntitles to use for men/women when they have none and the behavior uses\nthe \\\"(title)\\\" keyword. This defaults to \\\"sir/ma\\'am\\\" if no property\nis set whatsoever.\n\nThe system attempts to grab the property from <Data:NIP:system>\n(titles:default) when the emoting library is added to an NPC. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:behavior:db\\</font\\> \\<UL\\> This property\nshould point to the default behavior database which should be used when\nno other more appropriate one is found. Initially, this value is not\nset, so **you have to do it to make emoting work**. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:behavior:\\<mood\\>\\</font\\> \\<UL\\> The\nproperties nip:behavior:\\* are fetched by the emoting system based on\nthe NPC\\'s current mood.\n\nIf, for instance, the NPC is currently \\\"**HAPPY**\\\", the emoting system\nwill first look for a **\\\"nip:behavior:happy\\\"** property, and if none\nis found, it will go for the aforementioned **\\\"nip:behavior:db\\\"**.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:hints:db\\</font\\> \\<UL\\> The standard\nhints database, in which rumors are stored. This is optional but\ninternally supported. When recording behavior, if the emote \\\"(hint)\\\"\nis used, the NPC will attempt to draw hints from the hints database\ninstead of using static emotes. Also see +nip command \\\"hints\\\". \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:behave\\</font\\> \\<UL\\> Shorthand script\nfor the emoting parser. \\\\> merry \\-\\-- ::behave(\\$db: object,\n\\$mood: string); \\-\\-- \\</pre\\> \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:emoting:decide\\</font\\> \\<UL\\> (Signal\nDECIDE, hook emoting)\\<br\\> This sig-hook script will randomly force the\nNPC to emote something specified in the appropriate behavior\ndatabase(s).\\<br\\> The script will not be executed if the NPC is\n[sleeping](NIPLibRefSleeping). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:emoting:parse\\</font\\> \\<UL\\>\nThe database parser. This is used by the emoting/DECIDE sig-hook script\nto perform a random parser move from a specific db/mood. \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nFixed minor issue with property map that could cause a crash in\ninvalidly configured nippers.\n\n\\-- Main.KalleAlm - 12 May 2005\n\nAdded \\\"nip:trait:titles:default\\\" property.\n\n\\-- Main.KalleAlm - 15 May 2005\n","dir":"/docs/unedited/","name":"NIPLibRefEmoting.md","path":"docs/unedited/NIPLibRefEmoting.md","url":"/docs/unedited/NIPLibRefEmoting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145486\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: fighting\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:fighting\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[fighting-marrach](NIPLibRefFightingMarrach)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nCombat handler for an external combat system.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nFighting is an NPC-vs-PC/NPC-vs-NPC wrapper for NIP, which makes use of\nan external, time-based combat system. (A turn-based combat system\nwrapper will be put in place at some point, as well, but will be an\nentirely different library.)\n\nThe library requires that you set it up according to the rules of the\ncombat system. One way of doing this (the preferred way) is to create a\nsecondary library. One example of such is\n[fighting-marrach](NIPLibRefFightingMarrach), which makes use of the\nCastle Marrach duelling system.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`mapping <font class=\"lib\">nip:trait:fighting:condition_map</font>`\n\\<UL\\> Map of external conditions which affect the nipper\\'s\ndecision-making. Property syntax:\\\\>(\\[ \\\"\\<property in NPC\\>\\\" : ({\n\\<middle value\\>, \\<effect\\>, &ltpositive list\\>, \\<negative list\\> })\n\\])\\</pre\\>\n\nE.g.\\\\>(\\[ \\\"duelling:fatigue\\\":({ 50, 0.2, ({ \\\"cut\\\", \\\"jab\\\",\n\\\"feint\\\" }), \\\"rest\\\" }) \\])\\</pre\\> \\</UL\\>\n\n`mapping <font class=\"lib\">nip:trait:fighting:delay_map</font>` \\<UL\\>\nMap of delay-time in between actions, with min-to-max values. Property\nsyntax:\\\\>(\\[ \\\"\\<command\\>\\\" : ({ \\<min time\\>, \\<max time\\> })\n\\])\\</pre\\>\n\nE.g.\\\\> (\\[ \\\"advance\\\":({ 0.5, 1.0 }), \\\"cut\\\" :({ 2.1, 3.0 }),\n\\\"dodge\\\" :({ 1.1, 2.0 }), \\\"feint\\\" :({ 2.1, 3.0 }), \\\"guard\\\" :({ 0.5,\n4.0 }), \\\"jab\\\" :({ 2.1, 2.5 }), \\\"lunge\\\" :({ 3.5, 5.5 }), \\\"rest\\\" :({\n0.1, 0.3 }), \\\"retire\\\":({ 0.5, 1.0 }), \\\"slip\\\" :({ 4.0, 6.0 }) \\])\n\\</pre\\> \\</UL\\>\n\n`mapping <font class=\"lib\">nip:trait:fighting:imperative_map</font>`\n\\<UL\\> Map of imperatives with probability values. See\n[fighting-marrach](NIPLibRefFightingMarrach) for explanative example.\n\\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n`<font class=\"lib\">core_fight_done()</font>` \\<UL\\> When a fight is\nended, the core_fight_done() function **must** be called, in order to\ndisable the internal combat thread. As soon as a fight has ended, no\nmatter how it ended, this function should be called as soon as possible.\n\\</UL\\>\n\n`<font class=\"lib\">core_fight_init()</font>` \\<UL\\> Initiate combat.\nThis function will take control over the NPC for the duration of the\nfight, and attempt to perform various combat-related commands to win a\nfight. \\</UL\\>\n\n\\-- Main.KalleAlm - 09 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefFighting.md","path":"docs/unedited/NIPLibRefFighting.md","url":"/docs/unedited/NIPLibRefFighting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1145031083\\\" format=\\\"1.0\\\"\nversion=\\\"1.8\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: freemoting\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Appearance](NIPCategoryAppearance)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:freemoting\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[Emoting](NIPLibRefEmoting), [MOOD](NIPHookRefMood).\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe freemoting library, contrary to the [emoting\nlibrary](NIPLibRefEmoting), uses a stored set of simple strings of emits\nand emits those at random. New as of August 2004, the library also\nsupports variable resolving.\n\nA proper recording feature is not yet implemented in this system.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe freemoting library is basically the same thing as the emoting\nlibrary, except the emoting library uses a complex database of stored\nparser moves, while the freemoting library has already-made strings of\nemits.\n\nAs of August 2004, the freemoting library supports variable resolving.\nVariable resolving enables you to for example write a freemoting action\nlike this:\\\\>\\\"\\>Harry looks at \\$(actor) and grunts.\\\"\\</pre\\> The\nvariable resolving will convert objects, nrefs and arrays of objects\nand/or nrefs into a description of those. If the variable type is a\nstring, the resolving will simply insert that string as is.\n\nHint: The NPC itself can be referred to as \\$(this) or \\$(npc).\n\nAs of April 2006, the freemoting library supports un-nested SAM oneof\nexpressions.\\\\>The dog {bounces\\|skips\\|hops} in a {flurry\\|frenzy}\nupon receiving the {sausage\\|food}.\\</pre\\>Note that nested expressions\nsuch as \\\\>{in a {flurry\\|frenzy}\\|with joy}\\</pre\\> are NOT\nSUPPORTED.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`int <font class=\"lib\">nip:trait:freemoting:frequency</font>` \\<UL\\> The\nfreeemoting frequency. The default value is 10, which means the NPC will\nfreeemote on average every 200th second (i.e. every 3m20s\\'d).\n\nThe lower the value, the more frequent the NPC\\'s freemotes will be\n(every (20 \\* frequency)\\'th second, on average). \\</UL\\>\n\n`object <font class=\"lib\">nip:behavior:db</font>` \\<UL\\> Pointer to the\nobject containing the default freemotes. The property in the database\nshould be either **\\\"\\<mood\\>:freemotes\\\"** or **\\\"db:freemotes\\\"**,\nwhere the latter is used if the former isn\\'t found. \\<font\ncolor=\\\"\\#ff0000\\\"\\>Note that this property\\'s name has changed, and the\nprevious name (\\\"nip:behavior:freemoting:db\\\") is deprecated, and will\nbe rendered invalid in the future.\\</font\\> \\</UL\\>\n\n`object <font class=\"lib\">nip:behavior:<mood></font>` \\<UL\\> Pointer(s)\nto the object(s) containing mood-specific freemotes. The property\nsearched for is still done in the same way, first\n**\\\"\\<mood\\>:freemotes\\\"**, then **\\\"db:freemotes\\\"**. Thus, several\nmood\\'s freemotes can be stored in the same object, or separated, at the\nwhim of the user. \\<font color=\\\"\\#ff0000\\\"\\>Note that this property\\'s\nname has changed, and the previous name\n(\\\"nip:behavior:freemoting:\\<mood\\>\\\") is deprecated, and will be\nrendered invalid in the future.\\</font\\> \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:freemoting:decide\\</font\\> \\<UL\\>\n(Signal DECIDE, hook freemoting)\\<BR\\> This sig-hook script will\nrandomly emit a free-form text string to the NPC\\'s environment based on\nthe various settings described above. The script will not be executed if\nthe NPC is [sleeping](NIPLibRefSleeping). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>::handler_freemote()\\</font\\> \\<UL\\> This is the\ninternal freemote handler, logically enough. It is called from the\nfreemoting:decide script when it is decided that the NPC should\nfreemote. It is also called from, for example, the\n[replaying](NIPLibRefReplaying) library when necessary. \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\n\\<font color=\\\"\\#ff0000\\\"\\>Note: the properties\n\\\"nip:behavior:freemoting:\\*\\\" are deprecated, and should not be used.\nUse \\\"nip:behavior:\\*\\\" instead.\\</font\\>\n\nUpdated library, separating handler from hook script. \\-- Main.KalleAlm\n- 19 May 2004\n\nUpdated library to enable support for variable resolving. \\--\nMain.KalleAlm - 18 Aug 2004\n\nUpdated library to include support for un-nested oneofs. \\--\nMain.KalleAlm - 14 Apr 2006\n","dir":"/docs/unedited/","name":"NIPLibRefFreemoting.md","path":"docs/unedited/NIPLibRefFreemoting.md","url":"/docs/unedited/NIPLibRefFreemoting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145486\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: guarding\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:guarding\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nHandle someone entering a precedence-set entrance, and other things\n(more to come, by request).\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nA base guarding shell library, which is entirely dependent on an\nexternal library, to perform various guard duties. The marrach guard\nlibrary will be made available in time, to show an example of this.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:request-authority\\</font\\>\n\\<UL\\> \\\\>\\\"Authority request script. This is generic and useless in\nmost cases, and a secondary library should override it.\n\nExpected input: \\$who: (object) Who is acting? \\$what: (string) What is\n\\$who doing? \\$where: (NRef) Upon what/where is \\$who doing \\$what?\n\nReturned values: TRUE to allow; FALSE to deny.\\\"\\</pre\\>\n\nThis script is supposed to be replaced by an external library (simply\nmake a \\\"lib:handler:request-authority\\\" script and make the library\ndepend on the guarding lib). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:witness:enter-into%nip:core\\</font\\> \\<UL\\>\n\\\\>\\\"Make sure someone is authorized to enter an exit.\\\"\\</pre\\>\n\nThis script will call the handler:request-authority script like\nso:\\\\>\\$authority = Call( this, \\\"handler:request-authority\\\",\n\\$who: \\$actor, \\$what: \\\"enter\\\", \\$where: \\$target );\n\nreturn \\$authority;\\</pre\\>\n\nIf the script returns TRUE; the action will go through. If not, the\naction will be aborted. \\</UL\\>\n\n\\-- Main.KalleAlm - 08 Dec 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefGuarding.md","path":"docs/unedited/NIPLibRefGuarding.md","url":"/docs/unedited/NIPLibRefGuarding.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: happiness\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:happiness\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> [MOOD](NIPHookRefMood)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nHappiness provides the mood \\'happy\\' to the NPC.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe happiness mood uses the default MOOD system to include the \\'happy\\'\nmood. See **nip:mood:registry** in any NPC using the system. Also see\n\\<LIB\\>Lib:NIP:signals:MOOD\\</LIB\\>/**lib:core:add_mood** and\n\\<LIB\\>Lib:NIP:signals:MOOD\\</LIB\\>/**lib:core:sub_mood** for more\ndetails on how to create a new mood.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<LIB\\>merry:lib:happiness:mood\\</LIB\\> \\<UL\\> (Signal MOOD; hook\nhappiness)\\<BR\\> This sig-hook script scans various properties in the\nNPC and adjusts the \\'HAPPY\\' mood accordingly. \\</UL\\>\n\n\\<LIB\\>merry:lib:init\\</LIB\\> \\<UL\\> NIP Library init script. \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.) %META:TOPICMOVED{by=\\\"kallea\\\"\ndate=\\\"1055012274\\\" from=\\\"Builders.NIPLibRefHappinesss\\\"\nto=\\\"Builders.NIPLibRefHappiness\\\"}%\n","dir":"/docs/unedited/","name":"NIPLibRefHappiness.md","path":"docs/unedited/NIPLibRefHappiness.md","url":"/docs/unedited/NIPLibRefHappiness.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145486\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: herbi\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:herbi\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[predator](NIPLibRefPredator)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> [prey](NIPLibRefPrey)\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nNPC library, for use by herbivores to extract food from plants. (used in\nthe PLANT, not the NPC)\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nWhen \\\"attacked,\\\" the herbi library spawns a specific object and places\nit in the NPC attacker\\'s hands.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:herbi:extract\\</font\\> \\<UL\\> (Object\npointer.)\\<br/\\> The pointer to the object that should be spawned when\nthe NPC is attacked. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:herbi:message\\</font\\> \\<UL\\>\n(String.)\\<br/\\> Optional. Set this to the message that should be\nemitted when an NPC extracts from the herb NPC plant. Keywords\nare:\\\\> - (npc) Extracts into Describe(npc) E.g. \\\"a cow\\\" - (prey)\nExtracts into Describe(extract) E.g. \\\"a mouthful of grass\\\" - (room)\nExtracts into Describe(env) E.g. \\\"the field\\\" E.g. \\\"(npc) finds (prey)\nin (room).\\\" would result in \\\"A cow finds a mouthful of grass in the\nfield.\\\"\\</pre\\> \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:type\\</font\\> \\<UL\\> (String\narray.)\\<br/\\> The prey type list. By default set to ({ \\\"plant\\\" }),\nbut can be defined more accurately to distinguish plants from each\nother, by whatever classification, so that herbivores can be more\nselective in their food. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:prey:defend\\</font\\> \\<UL\\>\nDummy-script for equality with [prey](NIPLibRefPrey) and compatibility\nwith [predator](NIPLibRefPredator) which returns \\\"always success.\\\"\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:prey:die\\</font\\> \\<UL\\> This\nscript spawns the extract object and places it in the hands of the\nattacker. \\</UL\\>\n\n\\-- Main.KalleAlm - 01 Mar 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nAdded \\\"nip:trait:herbi:message\\\" property.\n\n\\-- Main.KalleAlm - 03 Mar 2004\n","dir":"/docs/unedited/","name":"NIPLibRefHerbi.md","path":"docs/unedited/NIPLibRefHerbi.md","url":"/docs/unedited/NIPLibRefHerbi.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: interaction\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:interaction\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[emoting](NIPLibRefEmoting)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [nip](NIPHookRefNip)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThis library is a shell-loader for the [NIP hook](NIPHookRefNip).\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\n\\-\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:interaction:chance\\</font\\> \\<UL\\>\nChance the NPC will request/accept interaction. 1 = 100%, 2 = 50%, 3 =\n33%, etc. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:interaction:ttl\\</font\\> \\<UL\\>\nTime-to-live (in seconds) for an interaction request. \\</UL\\>\n\n\\-- Main.KalleAlm - 13 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefInteraction.md","path":"docs/unedited/NIPLibRefInteraction.md","url":"/docs/unedited/NIPLibRefInteraction.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145486\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: killer\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:killer\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[wounding](NIPLibRefWounding), [movement](NIPLibRefMovement),\n[predator](NIPLibRefPredator)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[eating](NIPLibRefEating), [emoting](NIPLibRefEmoting),\n[freemoting](NIPLibRefFreemoting)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nPC-wounding NPC default library.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nKiller is as much an example as it is a functional library. It is used\nto determine whether a nipper will attack or flee from a \\'living\\'\nbeing (volitional). The core is based off of hunger, which means, if the\nnipper is hungry enough, it\\'ll attack **anything**. If it\\'s not\nhungry, it will most likely flee from the scene if it encounters another\nliving being.\n\nIf the [eating](NIPLibRefEating) library is not used, the NPC will\nalways attack if it encounters a volitional being.\n\nThis is based off of a \\\"wild\\\" animal, and should probably not be used\n(unless modified accordingly) with any tame nippers.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`pointer <font class=\"lib\">nip:behavior:killer</font>` \\<UL\\> If set to\na woe object reference, behavior for \\'ATTACK\\' may be recorded and will\nthen be used whenever a nipper attacks a PC. The \\\"victim\\\" scene object\nrole must be set to a subject representing the target during recording.\n[(further information on sceneries)](NIPTutorialScenery)\n\nTake note that if set, the system presumes [emoting](NIPLibRefEmoting)\nis enabled. A crash will occur if this is not the case and this property\nis set. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n`<font class=\"lib\">merry:lib:predator:decide</font>` \\<UL\\>\n(Modification to [predator](NIPLibRefPredator) script.)\\<br/\\> All of\nthe predatorial behavior, with the additional \\\"fight or flight\\\"\nbehavior of the killer library. \\</UL\\>\n\n\\-- Main.KalleAlm - 29 Mar 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nLooks fantastic! Can\\'t wait to try it out. Will there be a separate\nlibrary possible for domestic beasts? For example, in Oasis, we have\ncamels and donkeys that probably wouldn\\'t bite unless they were\nparticularly mean or provoked. But I can see applications of a\n\\\"gentler\\\" version of this library for domestic beasts (dogs, cats,\nhorses, etc.). \\-- Main.ToddNilson - 30 Mar 2004\n\nThat would definitely be possible, but would most likely be an entirely\ndifferent NIP library. This is for \\\"predators\\\" in the hunting aspect,\nwhile what you talk about is more along the lines of \\\"provoced\nreactions\\\". \\-- Main.KalleAlm - 30 Mar 2004\n\nMinor bug fix. Currently, the killer lib is outside of the consent\nboundaries, for obvious reasons. Games that have \\\"risks\\\" wouldn\\'t be\nvery risky if the NPC nicely asked for consent to wound the adventurous\nadventurer, now would they? :) But if the need for a consent-based\nkiller-lib is something we want, it can be arranged. \\-- Main.KalleAlm -\n17 May 2004\n","dir":"/docs/unedited/","name":"NIPLibRefKiller.md","path":"docs/unedited/NIPLibRefKiller.md","url":"/docs/unedited/NIPLibRefKiller.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1141676071\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: librarian\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Example](NIPCategoryExample)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:librarian\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[emoting](NIPLibRefEmoting), [guarding](NIPLibRefGuarding)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\>\n[marrach-guards](NIPLibRefMarrachGuards)\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe librarian library is used to allow NPC\\'s to stop people who are\ntrying to leave with an object that is \\\"marked\\\". This is written to\nwork on libraries and library books, but can be used in any similar\ninstance.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe librarian library can be used in a setting where an NPC \\\"watches\nover\\\" items. The area can be completely public, and characters will be\nable to enter and leave as they wish, as long as they do not try to\nleave with a marked item in their inventory.\n\nThe code is based on StoryCoder Gilmere\\'s librarian code for the Castle\nMarrach female librarian NPC, and will behave identically.\n\nThe string property \\\"nip:trait:librarian:stamp\\\" must be set in the\nlibrarian NPC to the property-name which defines whether an item belongs\nin the specific area or not. This can be any string, and as long as the\nproperty is set to anything but 0 or nil, the NPC will detect it in\nobjects even if they are deep-inventoried (i.e. in a person\\'s pouch\\'s\npouch\\'s wallet\\'s purse\\'s box) and refuse to allow anyone to leave\nwithout dropping the particular item.\n\nBehavior data must be recorded for the NPC in order to behave whenever\nsomeone attempts to leave carrying a marked item. The DBO must be set in\nthe \\\"nip:behavior:librarian\\\" object, and must contain a behavior\nrecording for \\\"LIBRARIAN-CATCH\\\". The recording may optionally contain\neither or all of the following scene roles: \\* **thief** - the person\ntrying to leave carrying an item \\* **item** - the item that is being\ndetected (the first item, if multiple are detected) \\* **container** -\nthe top-most container upon the actor in which the item is located \\*\n**where** - the exit through which the actor is trying to leave\n\nIf a library (or its equivalent) contains multiple rooms, each of the\nrooms belonging to the library itself must have the\n\\\"detail:library-interior\\\" property set to 1. Do this by doing +setp\n\\[exit\\] \\\"library-interior 1\\\". Alternatively, you may set\n\\\"details:\\[the exit id\\]:library-interior\\\" in the room itself instead,\nwhich is essentially the same thing. Doing this will prevent the NPC\nfrom stopping someone trying to walk around inside the library itself\ncarrying marked items.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`string <font class=\"lib\">nip:trait:librarian:stamp</font>` \\<ul\\> The\nproperty-name of the stamp that is present in marked items. If this\nproperty is set to \\\"mark:library\\\", then all items in the library\nshould have the property \\\"mark:library\\\" set. \\</ul\\>\n\n`BDO(object) <font class=\"lib\">nip:behavior:librarian</font>` \\<ul\\>\nBehavior data object pointing to the location where behavior data is\nrecorded for the librarian. \\</ul\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:request-authority\\</font\\>\n\\<ul\\> Handler for the [guarding](NIPLibRefGuarding) implementation for\nthe librarian instance. \\</ul\\>\n\n\\-- Main.KalleAlm - 24 Jan 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\n\\<br\\> \\<font color=\\\"green\\\"\\>For example, ABN would like to setup an\nice skating area in the winter where a NIPped NPC rents out ice skates.\nHe would want to prevent those attempting to leave the area with his\nrented skates until they hand them back over. But those who OWN their\nown skates can come and go freely.\n\nOur first usage of this library will be to set a guard dog, Napoleon, to\nkeep students from exiting the Orne Library with a University book.\nStudents may be holding other non-University-owned books, but we would\nlike those that the library owns to stay within the library. Napoleon\nwill be set to stand guard at the single entrance to the library. Anyone\npassing out will hopefully be caught and held at bay until the student\nreturns the book. That way we do not have to OOC\\'ly run about\n+summoning books back to the library on a routine cleaning when players\ncheck out a book, but don\\'t return it. This will also prevent the need\nfor us to code a library book check-out system. After all, this is\nArkham By Night, not Skotos\\' Cthulhu library online.\n\nI suppose should we want to get fancy with the scene we can NIP a\nlibrarian human to show up and demand the book back or even have a\npinkerton (cop for hire type) show up and drag the fool off to a special\nroom until the book is returned.\n\nIt has been talked about allowing a successful sneak or thiefery skill\nto get by such guard points. But I consider that to be a future\nenhancement, and not something I\\'d want to have happen automatically in\nevery NIP I setup with this library. For example, the skate man, sure,\nsteal his skates. But steal the Necronomicon? No. I\\'ll setup a special\nplotter-run scenario for that if I want it. Otherwise I\\'ll have a\nnightmare of stolen books on my hands.\n\n\\~ Willow ( Main.KathyPlamback )\\</font\\>\n\nThe ice skating scenario would be easily implemented using this same\nlibrary. As for the rest, yeah, improvements can definitely be made when\nthe time is right for them.\n\n\\- Main.KalleAlm - 24 Jan 2006\n\nWhat stops a player from taking the book, then logging out? Waiting half\nan hour, and logging back into their guestroom, complete with stolen\nbook?\n\nI\\'m sure there will be other ways of cheating the system, too. Like\nteleporting (if that\\'s an ability you have), or any other way of moving\nrooms that don\\'t do the normal checks.\n\nAlso, if there are two exits (in different, linked rooms), I assume that\nwe need a librarian in each?\n\nA possible extension would be to have a list of books that the librarian\nis aware of, and the location that they should stay (third shelf?) -\nthen every day or so, the librarian could check where the books are,\nleave them if they are being used by someone in the library, tidy them\nto their location if they are unused and in the room, and\\...maybe\nteleport them to their location if they have somehow escaped? (a player\ntakes the book, logs out, and never returns?)\n\nThis would also allow the possibility of borrow-able items (rent a gun\nfor the day, only \\$50, no need to buy one, and you can get your revenge\nthen return it)\n\n\\-- Main.TonyDemetriou - 24 Jan 2006\n\nGood point, Tony. The library rooms of course have to be flagged as\nsticky (I think that\\'s the safe flag), just like prison cells and such.\n\nAs for two exits in different locations, yes, would need two librarians,\nbut they\\'d use the same stamp so not a big deal really. The books would\nonly be marked once anyway.\n\nI like the extension idea. :)\n\n\\-- Main.KalleAlm - 25 Jan 2006\n\nBug regarding the [guarding](NIPLibRefGuarding) library fixed, which\naffects this library. CM and LC have been NCS updated so all existing\nnippers should be fixed already.\n\n\\-- Main.KalleAlm - 06 Mar 2006\n","dir":"/docs/unedited/","name":"NIPLibRefLibrarian.md","path":"docs/unedited/NIPLibRefLibrarian.md","url":"/docs/unedited/NIPLibRefLibrarian.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092344312\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: marrach-guards\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Example](NIPCategoryExample)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:marrach-guards\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[Guarding](NIPLibRefGuarding), [emoting](NIPLibRefEmoting)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None known.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\n(Dis)allowing people from entering exits based on \\\"marrach:precedence\\\"\nproperty and a precedence setting for the exit(s). Example library, but\nwill eventually be used in the Castle Marrach game.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe marrach-guards library currently only handles the allowing and\ndisallowing of people from entering certain exits marked with a certain\nprecedence requirement. In Castle Marrach, characters are only allowed\ninto areas which are beneath or equal to their own in-game precedence (a\nperson\\'s precedence is determined by their work and/or intrinsic rank\nwithin the castle).\n\nThe [guarding](NIPLibRefGuarding) library contains a shell \\'authority\\'\nscript which is replaced by an actual script in the marrach-guards\nlibrary.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`object <font class=\"lib\">nip:trait:exit-precedence</font>` \\<ul\\> Data\nobject containing information regarding exits and their precedence. If\nyou wish to set one such up, initialize it properly by setting the\nproperty `nip:precedence` to `([ ])`. \\</ul\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:request-authority\\</font\\>\n\\<ul\\> Script replacing the shell authority script in the\n[guarding](NIPLibRefGuarding) library. \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<ul\\> NIP library\ninitialization script, called once every time the library is added to an\nNPC configuration. Sets the NPC\\'s skill in Teanga to Grand Master, its\ncurrent language to Teanga and enables the scriptrunner flag for the\nwitness scripts. \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:marrach:court_pass\\</font\\> \\<ul\\>\nSimple court-pass check script, used specifically when a person tries to\nenter a precedence-1 set door with precedence 0. \\</ul\\>\n\n\\-- Main.KalleAlm - 12 Aug 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefMarrachGuards.md","path":"docs/unedited/NIPLibRefMarrachGuards.md","url":"/docs/unedited/NIPLibRefMarrachGuards.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145486\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: mounting\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Service](NIPCategoryService)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:mounting\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\n(Horse)-back riding library.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe mounting library (w/. the [mountrider](NIPLibRefMountrider) lib)\nmakes it possible to mount the NPC and move around in the room/through\nrooms, sitting on its back.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:mounting:rider-gait\\</font\\> \\<UL\\> The\ngait, set whenever a character mounts the NPC. This gait should be\nsomething like \\\"rides\\\", as it will show as:\\<PRE\\>**George \\<gait\\>\nout through the north gate.**\\</PRE\\> This property restores whatever\nthe gait was, when NPC is dismounted. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> NIP Library init\nscript.\\<br\\> This script figures out the NIP object name for\n\\'mountrider\\', for future reference, and stores this in\n**\\\"nip:trait:mounting:riderlib\\\"** \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:react:mount-dob\\</font\\> \\<UL\\> This react\nscript puts the person on the NPC, provided some checks turn out right,\ne.g. whether the NPC is already mounted and/or whether the person is\nmounting something already. \\</UL\\>\n\n\\-- Main.KalleAlm - 08 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefMounting.md","path":"docs/unedited/NIPLibRefMounting.md","url":"/docs/unedited/NIPLibRefMounting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145431\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: mountrider\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[External](NIPCategoryExternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:mountrider\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[mounting](NIPLibRefMounting)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe mountrider lib contains inherit scripts for the rider of a mounted\nNPC. **Note: This library should not be loaded in an NPC; it is taken\ncare of automatically by the [mounting](NIPLibRefMounting) library.**\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe mountrider lib is not an actual NIP library, in that it is never\nloaded to an NPC directly. It is, however, used by the NIP library\n[mounting](NIPLibRefMounting) to put a set of inherits into a body which\nmounts the NPC.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act-post:enter\\</font\\> \\<UL\\> This script\nhandles all movement through rooms. It is inherited by the rider.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:approach\\</font\\> \\<UL\\> This script\ndeals with approach issues. It is inherited by the rider. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:dismount\\</font\\> \\<UL\\> This script\nwill, when the rider types \\'dismount\\', remove him/her from the NPC and\nunload the inherits. It is inherited by the rider. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:leave\\</font\\> \\<UL\\> This script deals\nwith leave issues. It is inherited by the rider. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:stance\\</font\\> \\<UL\\> This script deals\nwith stance issues. It is inherited by the rider. \\</UL\\>\n\n\\-- Main.KalleAlm - 08 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefMountrider.md","path":"docs/unedited/NIPLibRefMountrider.md","url":"/docs/unedited/NIPLibRefMountrider.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145372\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: musician\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\> [Example](NIPCategoryExample)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:musician\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> [MOOD](NIPHookRefMood),\n[commanding](NIPLibRefCommanding)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[emoting](NIPLibRefEmoting), [freemoting](NIPLibRefFreemoting)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe musician library specifically sets an NPC up so that whenever\nsomeone orders the NPC to \\\"play\\\", it will *want to* play. This is done\nby adding a mood called \\\"**PLAY**,\\\" which is stimulated when the\nNPC\\'s should play, and is suppressed when they\\'re not.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe musicians are (soon) used live on Marrach. They can be directed when\nto play and when not to, simply by telling them. They currently use\nstatic data such as **marrach:precedence** to determine whether a person\nis allowed to order them or not. A person must also speak Northern or\nTeanga, and do so as skilled as or more skilled than a\n**fellowcraftsman**.\n\nEspecially the **marrach:precedence** check must be converted to use a\nmore dynamic form of authority-check. This is a low priority upgrade\nuntil someone voices interest in using the musician lib.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:command:music:begin\\</font\\> \\<UL\\> This\nscript uses the [commanding library](NIPLibRefCommanding)\\'s command\nchain feature, and is called when someone says \\'begin\\', \\'start\\', or\n\\'proceed\\' to the NPC. The script will set the boolean\n**\\\"npc:playing\\\"** to TRUE, which will be used (described below) by the\n\\<font class=\\\"lib\\\"\\>merry:lib:musician:mood\\</font\\> sig-hook. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:command:music:end\\</font\\> \\<UL\\> This\nscript is a clone of the script described above, except it will set the\n**\\\"npc:playing\\\"** property to FALSE. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> NIP Library init\nscript.\\<br\\> The mood \\'PLAY\\' is added using **core:add_mood**, the\ncommands \\\"**music:begin**\\\" and \\\"**music:end**\\\" are added using the\n**core:add_command** script. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:musician:mood\\</font\\> \\<UL\\> (Signal\nMOOD; hook musician)\\<BR\\> This script will set the mood \\'PLAY\\' to \\*\n20, if the property **\\\"npc:playing\\\"** is TRUE \\* 0, if the property\n**\\\"npc:playing\\\"** is FALSE \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefMusician.md","path":"docs/unedited/NIPLibRefMusician.md","url":"/docs/unedited/NIPLibRefMusician.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: omni-comm\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:omni-comm\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[communicate](NIPLibRefCommunicate)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None at this point.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nWitness add-on to communicate.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nSpecifically for NPC\\'s which need to be particularly user-friendly (and\nanswer **everything**, whether it\\'s addressed to them or not).\n\nNot recommended unless the NPC is in a room alone with the player (as\nother NPC\\'s/players\\' chatter will be responded to as well).\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:witness:evoke%omni-comm\\</font\\> \\<UL\\>\nWitness add-on script. \\</UL\\>\n\n\\-- Main.KalleAlm - 24 Feb 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefOmniComm.md","path":"docs/unedited/NIPLibRefOmniComm.md","url":"/docs/unedited/NIPLibRefOmniComm.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: Predator\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:predator\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[eating](NIPLibRefEating), [prey](NIPLibRefPrey),\n[emoting](NIPLibRefEmoting), [sleeping](NIPLibRefSleeping)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe predator aspects of \\\"wildlife hunting NPC\\'s\\\", like cats, wolves,\ncrocodiles, lions, snakes, etc.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe predator library gives the NPC the following features: \\* Predator\nattacking - that is, attacking prey, attempting to kill it. \\* Eating\noffers handler replacement - see Scavenger. \\* Scavenger - the option of\nwhether the NPC is a scavenger or not. If not, (default) the NPC will\nnot accept nor take food that it **did not kill, itself**. \\*\nAgility/Offensive strength \\\"skills\\\" - a basic form of \\\"skills\\\"\nsystem, used to define the various skills with which NPC\\'s hunt prey.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:stats:agility\\</font\\> \\<UL\\> Integer,\ndefaults to: 10\\<br\\> The \\'agility\\' skill determines how fast the NPC\nis. This skill is the only common skill that both prey and predator has,\nwhich is used to determine if an NPC, despite offensive weakness, may\ntake down prey due to its speed. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:behavior:predator\\</font\\> \\<UL\\> Object\npointer, defaults to: nil\\<br\\> This property should point to a data\nobject which contains the behavior data for the predator. This behavior\ndata is specific to predators, but may reside in a common behavior\nobject, if the NPC designer so wish.\\<br\\> The following mood/situation\nneed to be recorded for, in the behavior data object: \\* KILL - When the\nNPC kills a prey (\\\"break rat\\'s neck sharply\\\")\n\n(More moods/situations may occur in this later, if the system is\nredefined/enhanced.) \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:stats:offense\\</font\\> \\<UL\\> Integer,\ndefaults to: 10\\<br\\> The offense skill is the actual skill used to\ndetermine if the NPC successfully kills the intended prey, or if the\nprey manages to defend itself. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:predator:prey\\</font\\> \\<UL\\> String\narray, defaults to: ({ \\\"prey\\\" })\\<br\\> This property contains a list\nof **all** types of prey that the NPC would regard as valid targets. For\nexample a cat\\'s \\\"predator:prey\\\" value might look like this:\\\\>({\n\\\"prey\\\", \\\"rodent\\\", \\\"small\\\" })\\</pre\\> The predator\\'s predator:prey\nstring array must contain **all** values which reside in the target\nprey\\'s prey:type.\\<br\\> (See [prey](NIPLibRefPrey), specifically the\nnip:trait:prey:type property description, for more information on this.)\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:predator:scavenger\\</font\\> \\<UL\\>\nBoolean, defaults to: 0 (FALSE)\\<br\\> The scavenger flag is set (1) if\nthe NPC is a scavenger. By default, an NPC only eats food which it\nkilled itself. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:predator:cannibal\\</font\\> \\<UL\\>\nBoolean, defaults to: 0 (FALSE)\\<br\\> The cannibal flag is set (1) if\nthe NPC would consider other NPC\\'s with the same urparent (of the same\ntype) as valid prey. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:act:predator:attack\\</font\\> \\<UL\\>\n(DECIDE handler for attacking prey.)\\<br\\> This script calls the\n\\\"defend\\\" handler in the prey, to see if the predator succeeds in\nattacking the prey, or not. If the predator succeeds, the script acts\nout a \\\"KILL\\\" behavior from the predator behavior, after which the\n\\\"die\\\" script in the prey is called.\n\nThis script was intentionally kept as very simple and you are encouraged\nto make your own replacement for this. A specific information page on\nhow to replace features in existing libraries is available\n\\[-BEING_WRITTEN-\\]. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:offer:eating\\</font\\> \\<UL\\>\n(Replacement for the eating handler script in the\n[eating](NIPLibRefEating) library.)\\<br\\> The predator eating offers\nhandler simply adds an additional check on whether or not the NPC is a\nscavenger, and if it\\'s not, the NPC makes sure that whatever offered\nwas originally killed by the NPC. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:hook:init-post\\</font\\> \\<ul\\> (NIP hook\ninit-post script.)\\<br\\> This script, called each time a new hook is\nadded, immediately replaces the eating offers handler (if the eating\nhook is loaded) with its own. \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:predator:decide\\</font\\> \\<ul\\> (Signal\nDECIDE; hook predator)\\<br\\> This is the \\\"decide\\\" sig-hook script for\nthe predator hook. The system checks how hungry the NPC is (if\napplicable), whether it\\'s awake (if applicable), whether there is prey\nin the area, and whether it matches the NPC predator\\'s prey settings.\nIf the NPC finds valid prey, the predator:decide sig-hook will make it\nattack. \\</ul\\>\n\n\\-- Main.KalleAlm - 20 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefPredator.md","path":"docs/unedited/NIPLibRefPredator.md","url":"/docs/unedited/NIPLibRefPredator.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1154678452\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: Prey\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:prey\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[Predator](NIPLibRefPredator), [emoting](NIPLibRefEmoting),\n[sleeping](NIPLibRefSleeping), [death](NIPLibRefDeath).\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe \\'prey\\' library is used to set an NPC up in various ways, so that\npredator NPC\\'s may target it and make dinner out of it.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe prey library implements the following features into the NPC: \\*\nDefending feature - (attempt to) defend against attacking predators. \\*\nDying - and what to exactly turn the NPC into when slain. \\*\nAgility/Defense strength \\\"skills\\\" - a basic form of \\\"skills\\\" system,\nused to define the various skills with which NPC\\'s defend against\npredators.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:behavior:prey\\</font\\> \\<UL\\> Object pointer,\ndefaults to: nil\\<br\\> This property should point to the behavior data\nobject of the NPC, which should contain data for the following\nmoods/situations: \\* EVADE - For when the NPC successfully avoids an\nattacking predator. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:stats:agility\\</font\\> \\<UL\\> Integer,\ndefaults to: 10\\<br\\> Agility, speed, haste, the NPC\\'s ability to avoid\nbeing eaten through force of speed. This property is used to determine\nwhether or not the predator receives a bonus to its attack. This occurs\nif the attacking predator\\'s agility roll falls above the prey\\'s\nagility roll. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:stats:defense\\</font\\> \\<UL\\> Integer,\ndefaults to: 10\\<br\\> The defensive skill of the NPC. If the attacking\npredator\\'s offense roll (including potential bonuses for agility rolls)\nfalls below the defending prey\\'s defense roll, the prey evades the\nattack, and survives. If the offense roll is higher than the defense\nroll, the prey is caught and slain by the predator. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:chunk-object\\</font\\> \\<UL\\> Object\npointer, defaults to: \\<Lib:NIP:EXT:prey-chunk\\>\\<br/\\> The pointer to\nthe object which is to be spawned as a chunk of meat for this animal.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:dead\\</font\\> \\<UL\\> Deprecated:\nuse [death](NIPLibRefDeath) library\\'s nip:trait:death:dead property.\n\nObject pointer, defaults to: nil\\<br/\\> This optional property can be\nset to a version of the NPC which is its \\\"dead state.\\\" This other\nobject mustn\\'t be a nipper, in fact, it is recommended that it isn\\'t\n(dead things don\\'t interact very well anyway). If this property is set,\nthe nipper will change its UrParent to the object defined in\n\\\"nip:trait:prey:dead\\\" rather than try to find alteration solutions to\nitself. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:descripts\\</font\\> \\<UL\\> Integer,\ndefaults to: 3\\<br/\\> Number of description types for the prey, once it\nhas been killed. This can be used to create SAM {?when \\| \\... }\nconstructs to describe the various states of the animal as it is being\nripped to shreds by its predators. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:dead-chunks\\</font\\> \\<UL\\>\nInteger, defaults to: nil\\<br/\\> Number of chunks before an animal has\nbeen \\\"stripped\\\" of meat. The higher this value, the more chunks\nanimals will be able to rip out of it before it\\'s clean. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:prey:type\\</font\\> \\<UL\\> String array,\ndefaults to: ({ \\\"prey\\\" })\\<br\\> This property contains a list of the\n\\\"classes\\\" that this NPC is a part of. It is important to realize that\neach and every one of these classes must be found in the predator\\'s\npredator:prey string array. However, the reverse is not the case, which\nmeans a predator may have more prey types in its list, while a prey is\nconsidered invalid if it has a single type the predator does not have.\n\\<br\\> In the [predator](NIPLibRefPredator) library, I gave an example\nof a cat with the predator:prey set to:\\\\>({ \\\"prey\\\", \\\"rodent\\\",\n\\\"small\\\" })\\</pre\\>\\<br\\> If for instance a mouse had the prey\n\\\"nip:trait:prey:type\\\" value set to either of:\\\\> - ({ \\\"prey\\\" })\n- ({ \\\"rodent\\\" }) - ({ \\\"small\\\" }) - ({ \\\"prey\\\", \\\"rodent\\\" }) - ({\n\\\"prey\\\", \\\"small\\\" }) - ({ \\\"rodent\\\", \\\"small\\\" }) - ({ \\\"prey\\\",\n\\\"rodent\\\", \\\"small\\\" })\\</pre\\> then it would be valid prey for the\ncat. However, if it had e.g.:\\\\>({ \\\"prey\\\", \\\"rodent\\\", \\\"mouse\\\"\n})\\</pre\\>it would no longer be valid prey, since the cat didn\\'t have\nthe \\\"mouse\\\" value in its list. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:nip/die\\</font\\> \\<UL\\>\n\\\\>\\\"Die.\\\"\\</pre\\>\n\nThis is a simple placeholder action that shuts the nipper down and marks\nit as dead. There is at the point of writing one alternative that will\nextend this functionality, and that is the library\n[death](NIPLibRefDeath). The [death](NIPLibRefDeath) library description\ngoes:\n\nThis script will do a *bunch* of things to make your NPC look dead.\nFirst of all, it disables the heartbeat thread if one is running.\nSecondly, it attempts to disable scriptrunning, and it also unsets\nvolition in the object.\n\nThe volition aspect brings up another point that you need to be aware of\nin this case, which is the fact that none of the parents for a prey NPC\nmust have volition set. This means the NPC will look very odd when\nsummoned, but when spawned, the NPC will look \\\"correct.\\\"\n\nFurthermore, the script will attempt to change the NPC\\'s description\ninto a more \\\"unwell\\\" look. Unless a specific look and/or examine\ndescription exists, these values will remain as is. But the brief will\nbe examined and a somewhat good guess will be made to change it\nappropriately. Further documentation on this subject will be available\nshortly. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:prey:defend\\</font\\> \\<UL\\>\n\\\\>\\\"The prey defend script, which calculates the outcome of a\nhunter/prey situation.\n\nThe following arguments are expected: \\$predator: (object pointer) The\nhunting/attacking NPC object. \\$offense: (integer) The hunter\\'s\noffensive strength. \\$agility: (integer) The hunter\\'s agility.\n\nReturn value: TRUE if hunter successfully attacks prey, and FALSE if\nhunter fails.\\\"\\</pre\\>\n\nThe prey:defend handler is used to determine whether or not a\npredator\\'s attack on a prey NPC succeeds. This script is, again, very\nsimple, and is so for a reason. And I encourage you to replace it with\nyour own feature if you require a more complicated check for this.\nPersonally, I think this works, since we\\'re not aiming for a \\\"complete\nsimulation\\\", but more the \\\"illusion.\\\" \\[-BEING_WRITTEN-\\] \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:prey:die\\</font\\> \\<UL\\>\n\\\\>\\\"The prey die script, which turns an NPC into a dead\nbody.\\\"\\</pre\\>\n\nThis script used to handle decaying and such, of bodies, but this\nfunctionality now resides in the [death](NIPLibRefDeath) library\\'s\nact:nip/die script.\n\n*In order to obtain the previously-default death behavior for nippers\nusing this library, you must now add the death library as well.*\n\nThis script will hand over control to the \\\"nip/die\\\" action in the\nnipper. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:start:prey\\</font\\> \\<UL\\> This\nis a start handler for the NPC act:start feature (spawn). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> (NIP library init\nscript.)\\<br\\> This script will unset volition in the object, as well as\nadd the \\\"start:prey\\\" handler to the act:start script chain. \\</UL\\>\n\n\\-- Main.KalleAlm - 20 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nAdded \\\"nip:trait:prey:dead\\\" property w/ functionality.\n\n\\-- Main.KalleAlm - 01 Mar 2004\n\nAdded the whole chunk-feature which allows predators to rip chunks of\nflesh out of prey. Ew.\n\n\\-- Main.KalleAlm - 14 Feb 2006\n\nExtracted \\\"die\\\" handler from this library and turned it into its own\nlibrary, called [death](NIPLibRefDeath).\n\nMain.KalleAlm Aug 3 06.\n","dir":"/docs/unedited/","name":"NIPLibRefPrey.md","path":"docs/unedited/NIPLibRefPrey.md","url":"/docs/unedited/NIPLibRefPrey.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1151685240\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: relations\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:relations\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nRelations reaction and recall. Using the complex relation-rules builder,\ndefine how a nipper reacts to various (physical) actions directed\ntowards it, such as when someone grins at the nipper, or kicks the\nnipper, and so on.\n\nAdditionally keep track of any number of relations categories, which can\nbe modified (improved or impaired) using triggers in a rule.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe relations system allows you to define a set of rules which an NPC\nuses to determine how a character is behaving towards them. For\ninstance, a barmaid might wink at you when she delivers you beer if\nyou\\'ve been acting friendly enough towards her for an extended period\nof time, or she might flat out refuse to serve you if you\\'ve been\npinching her butt once too many (you dirty, dirty old man).\n\nThe relations system lets the nipper do one or both of two things: 1 It\nreacts to actions directed at it 2 It remembers the action by altering a\nrelationship for the actor\n\nThis can be extended infinitely. You could theoretically use the\n`query_relationship` function in whatever code (say, the \\\"actor wants\nto buy beer\\\" code) and determine if the actor\\'s friendship is too low\nto serve him. This might look something like this: \\<ul\\>\n\n int rel;\n\n rel = ::query_relationship($category: \"friendship\");\n if (rel < -30) {\n /* Nope, they suck. Act out refusal. */\n ::behave($db: this.\"nip:behavior:relations\", $mood: \"REFUSE\", $subject: $actor);\n return FALSE;\n } else if (rel > 30) {\n /* Let's give'm a wink, cause they've been nice. */\n ::behave($db: this.\"nip:behavior:relations\", $mood: \"FLIRT\", $subject: $actor);\n } else {\n /* Be professional. */\n ::behave($db: this.\"nip:behavior:relations\", $mood: \"PROFESSIONAL\", $subject: $actor);\n }\n /* give-actor-their-beer code goes here */\n\n\\</ul\\>\n\nThe above code would first fetch the \\\"friendship\\\" relationship and\ndump it in the rel integer. THen it\\'d check first if the actor\\'s been\nTOO MEAN to be served. If they have, it behaves using the internal\nbehavior system and then exits. If they haven\\'t been too mean, it\nchecks if they\\'ve been GOOD ENOUGH to deserve special treatment in the\nform of flirting. If they haven\\'t, the NPC simply behaves as it will\nany normal, new customer. It is only in the \\'too mean\\' instance where\nthe code refuses to give the actor beer (by returning before it reaches\nthe \\\"give-actor-their-beer\\\" code).\n\nThis can be applied and used in any number of ways with a bit of Merry\nskills.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:relations:db\\</font\\> \\<UL\\> The data\nobject in which the relations structure is set up. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:behavior:relations\\</font\\> \\<UL\\> The BDO\ncontaining relations behavior. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:relations\\</font\\> \\<UL\\>\n\\\\>\\\"This script is used by the relations NIP library to determine\nthe type of action performed.\n\nThe script requires that the property \\'nip:trait:relations:db\\' exists,\nand points to a valid property-container with relations data.\\\"\\</pre\\>\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:query_relationship\\</font\\> \\<UL\\>\nquery_relationship(\\$actor: object, \\$category: string) \\[figure out\n\\\"my\\\" relationship with \\$actor for the category \\$category\\]\n\nReturn value: (int) Numeric relationship. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:react:command-iob/dob%nip-relations\\</font\\>\n\\<UL\\> \\\\>These scripts \\\"pipe\\\" commands to\nlib:handler:relations.\\</pre\\> \\</UL\\>\n\n\\-- Main.KalleAlm - 08 Dec 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nNote that this library reference was modified June 30th, 2006, to adhere\nto the new relations system. - Main.KalleAlm.\n","dir":"/docs/unedited/","name":"NIPLibRefRelations.md","path":"docs/unedited/NIPLibRefRelations.md","url":"/docs/unedited/NIPLibRefRelations.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085250064\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPChangeLog\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: replaying\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Appearance](NIPCategoryAppearance)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:replaying\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[emoting](NIPLibRefEmoting)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None/All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None known.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nReplaying of NPC behavior data in order (as opposed to \\'randomly\\').\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nFunctionality to replay pre-recorded NPC parser usage, freemotes and\ndelays (pauses).\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler_replay\\</font\\> \\<UL\\> The\nreplay handler, called from within the NPC as such,\n`::handler_replay( $db: ${object}, $scene: \"string\" )`.\n\nThe replay handler will require the existence of the tracking link\nvector in order to function properly. \\</UL\\>\n\n\\-- Main.KalleAlm - 19 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefReplaying.md","path":"docs/unedited/NIPLibRefReplaying.md","url":"/docs/unedited/NIPLibRefReplaying.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145459\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: resource-control\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Internal](NIPCategoryInternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:resource-control\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nResource-control controls when to disable and enable a NPC. The NPC will\ncompletely shut down when the time since an object entered or logged is\ngreater than the defined ttl (time to live), if there is not an object\nin the area with volition (that is not an NPC also).\n\nThe NPC will also restart when an object with volition enters the area\nor logs into the area.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nSee features.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:resource-control:ttl\\</font\\> \\<UL\\>\nStores the time to live value in seconds. When the time since an object\nentered the area or logged in is greater than the TTL, then the NPC\nchecks for shutdown. Default value is 1800 (30 minutes). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:resource-control:ttl_increase\\</font\\>\n\\<UL\\> If there is a non-npc object in the area with volition, this\nvalue is added to the npc:resource-control:live_time property and the\ncycle repeats. Default value is 600 (10 minutes). \\</UL\\> \\<font\nclass=\\\"lib\\\"\\>npc:resource-control:live_time\\</font\\> \\<UL\\> Anytime an\nobject enters the area or logs into the area, this property is updated\nwith the current time() timestamp on the NPC. \\</UL\\> \\<font\nclass=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:entering\\</font\\> \\<UL\\> This script is\nused to record the timestamp when an object enters the area of the NPC\nor logs in. This script will also restart the NPC if it was previously\nin a state of shutdown.\n\nBoth witness-post:login%nip:resource-control and\nwitness-post:enter-from%nip:resource-control use this script. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:resource-control:internal\\</font\\>\n\\<UL\\> This is the guts of the lib. This script determines if an NPC\nshould be checked for shutdown status and shutdown. \\</UL\\>\n\n\\-- Main.JessieBrickner - 25 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nThe script \\'witness-post:teleport%resource-control\\' was added.\n\n\\-- Main.KalleAlm - 23 Mar 2004\n","dir":"/docs/unedited/","name":"NIPLibRefResourceControl.md","path":"docs/unedited/NIPLibRefResourceControl.md","url":"/docs/unedited/NIPLibRefResourceControl.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: rumours\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:rumours\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> [asking](NIPLibRefAsking)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[presents](NIPLibRefPresents)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nAsking an NPC about something (e.g. \\\"ask npc about queen\\\")\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe rumours library is the replacement of the currently existing (but\nfairly unused) \\\"ask \\<npc\\> about \\<topic\\>\\\" feature.\n\nA tutorial on the usage of this library can be found\n[here](NIPHowRumours).\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:rumour:database\\</font\\> \\<UL\\> (object)\nThe reference to the data object which contains the rumour database.\n(see aforementioned tutorial for more information) \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:ask-about\\</font\\> \\<UL\\> \\\"The\nrumour-handler; this script is called whenever someone asks an NPC (with\nthe \\'rumours\\' library implemented) about **something**. It will look\nin the specified data object (\\'nip:trait:rumour:database\\') for the\ntopic in question, or say \\\"(S)He doesn\\'t know anything about that.\\\"\nif it was not found.\\\" \\</UL\\>\n\n\\-- Main.KalleAlm - 13 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n\nUpdated to abide the documentation. (doc says \\\"topic:*name*\\\", code\nlooked for \\\"**rumour**:*name*\\\" \\-- code now looks for\n\\\"**topic**:*name*\\\")\n\n\\-- Main.KalleAlm - 23 Feb 2004\n","dir":"/docs/unedited/","name":"NIPLibRefRumours.md","path":"docs/unedited/NIPLibRefRumours.md","url":"/docs/unedited/NIPLibRefRumours.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: sadness\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<QUERY\\>WOE NAME:\\</QUERY\\> Lib:NIP:lib:sadness\n\n\\<QUERY\\>DEPENDENCIES:\\</QUERY\\> [MOOD](NIPHookRefMood)\n\n\\<QUERY\\>COMPATIBILITY:\\</QUERY\\> None/All.\n\n\\<QUERY\\>INCOMPATIBILITY:\\</QUERY\\> None.\n\n\\<QUERY\\>FEATURES\\</QUERY\\>\n\nSadness provides the mood \\'sad\\' to the NPC.\n\n\\<QUERY\\>DESCRIPTION\\</QUERY\\>\n\nThe sadness mood uses the default MOOD system to include the \\'sad\\'\nmood. See **nip:mood:registry** in any NPC using the system. Also see\n\\<LIB\\>Lib:NIP:signals:MOOD\\</LIB\\>/**lib:core:add_mood** and\n\\<LIB\\>Lib:NIP:signals:MOOD\\</LIB\\>/**lib:core:sub_mood** for more\ndetails on how to create a new mood.\n\n\\<QUERY\\>NIP PROPERTIES\\</QUERY\\>\n\nNone.\n\n\\<QUERY\\>LIBRARY SCRIPT REFERENCE(S)\\</QUERY\\>\n\n\\<LIB\\>merry:lib:init\\</LIB\\> \\<UL\\> NIP Library init script. \\</UL\\>\n\n\\<LIB\\>merry:lib:sadness:mood\\</LIB\\> \\<UL\\> (Signal MOOD; hook\nsadness)\\<br\\> This script looks at how the NPC feels at the moment\n(e.g.i.a. hunger) and adjusts the mood \\'SAD\\' accordingly. \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<QUERY\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefSadness.md","path":"docs/unedited/NIPLibRefSadness.md","url":"/docs/unedited/NIPLibRefSadness.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>LIBRARY REFERENCE: sleeping\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:sleeping\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> [MOOD](NIPHookRefMood)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nThe sleeping library features sleeping. A couple of properties can be\nadjusted (see below) to determine the NPC\\'s sleeping rhythm, etc. It\nalso features (if applicable) the mood \\'SLEEPY\\', which is loaded and\nset accordingly, if [MOOD](NIPHookRefMood) is used.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nTwo separate states are introduced with the sleeping library, found in\nthe property **\\\"npc:state\\\"**. Initially, these are either\n\\\"**awake**\\\" or \\\"**sleep**\\\".\n\nIf the NPC is asleep, the DELAY signal (which determines how much\nresources the NPC uses) is substantially slowed down (four times slower,\nto be exact).\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:sleeping:effect\\</font\\> \\<UL\\> This\nproperty decides how efficiently sleeping reduces weariness (increases\nfatigue). \\* 1 means the property is 100% efficient. If the NPC is awake\nfor 8 hours, it has to sleep for 8 hours to regain itself. \\* 2 means\nthe property is 200% efficient. This is the default value, and is most\nappropriate for a human. Awake for 16 hours, sleep for 8. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:sleeping:interval\\</font\\> \\<UL\\> The\ninterval property decides how weary the NPC can be before it goes to\nbed. The NPC weariness is measured in \\\"seconds awake\\\". This property\nis by default set to 57600 (16 hours). \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:sleeping:states\\</font\\> \\<UL\\> Which\nstates are present. It is recommended, at least initially, to keep the\ntwo states \\\"sleep\\\" and \\\"awake\\\". However, it is possible (but\nuntried) to remove or alter these states however you\\'d like.\\<BR\\>\n\\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:act:sleep:state\\</font\\> \\<UL\\> This\nscript is executed whenever the NPC changes state (awake/asleep) through\nthe usage of e.g. the library\\'s own \\<font\nclass=\\\"lib\\\"\\>sleeping:decide\\</font\\>-script.\\<br\\> It will call the\nappropriate handler in \\'this\\' (the NPC), namely\n\\\"**merry:lib:handler:state:\\<state\\>**\\\"\\<br\\> \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:state:awake\\</font\\> \\<UL\\> The\nstandard awakening-script. It will emit a simple \\\"\\<NPC\\> wakes up.\\\",\nset the state to awake and stance to \\\"standing\\\". \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:state:sleep\\</font\\> \\<UL\\> The\nstandard sleep-script. It will emit a simple \\\"\\<NPC\\> falls asleep.\\\",\nset the state to asleep and stance to \\\"lying\\\". \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:hook:init-post\\</font\\> \\<UL\\> This\nscript is attached to a special hook called \\\"hook\\\" which is triggered\nwhenever a hook is loaded, where \\$HID is the hook ID. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:sleeping:decide\\</font\\> \\<UL\\> (Signal\nDECIDE; hook sleeping)\\<br\\> This sig-hook-script will check whether the\nNPC is, \\* too tired to stay awake (in which case it will go to sleep)\n\\* rested enough to wake up (in which case it should wake up) Of course\ndepending on whether it is sleeping or if it\\'s awake. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:sleeping:delay\\</font\\> \\<UL\\> (Signal\nDELAY; hook sleeping)\\<br\\> This script will, if the NPC is sleeping,\nmultiply the delay time by four. This means the NPC will \\\"think\\\" four\ntimes slower whilst asleep, than it would whilst awake. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:sleeping:internal\\</font\\> \\<UL\\>\n(Signal INTERNAL; hook sleeping)\\<br\\> This script will increment\nweariness if the NPC is awake, or decrement it if the NPC is sleeping.\n\\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:sleeping:mood\\</font\\> \\<UL\\> (Signal\nMOOD; hook sleeping)\\<br\\> This script will handle the mood \\'SLEEPY\\'\naccording to how tired the NPC is. \\</UL\\>\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefSleeping.md","path":"docs/unedited/NIPLibRefSleeping.md","url":"/docs/unedited/NIPLibRefSleeping.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145459\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: spawn-control\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Internal](NIPCategoryInternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:spawn-control\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nRe-spawning of slain NPC\\'s, with various settings for how this should\nbe done.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe spawn-control library uses an area object in which a number of\nsettings are located.\n\nThe area object reference is set in the \\\"nip:trait:spawn:area\\\"\nproperty, as an object pointer.\n\nThe area object supports the following properties:\n\n ------------------- ----------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n **Property name** **Property type** **Description**\n nip:delay:min integer The minimum amount of seconds before a similar NPC is re-spawned\n nip:delay:max integer The maximum amount of seconds.\n nip:spawn-point room OR ({ rooms }) OR (\\[ room : entry-message \\]) One or several objects (rooms) into which the new NPC should be spawned (randomly, if \\>1). If a mapping, the entry-message will be emitted to the room. In the entry-message, the word \\\"(npc)\\\" may be used, which will be replaced with the NPC\\'s brief on the fly.\n ------------------- ----------------------------------------------------- -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:spawn:area\\</font\\> \\<UL\\> Object\npointer to the area object. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:act:stop\\</font\\> \\<UL\\> This script is\nautomatically triggered whenever an NPC is slain. It calls the\nlib:system script in Lib:NIP:EXT:spawn, which re-spawns a new NPC after\na specified amount of time. \\</UL\\>\n\n\\-- Main.KalleAlm - 25 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefSpawnControl.md","path":"docs/unedited/NIPLibRefSpawnControl.md","url":"/docs/unedited/NIPLibRefSpawnControl.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145459\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: spawn-equipment\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Internal](NIPCategoryInternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:spawn-equipment\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> None specific.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None known.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nSpawning of objects, setting properties in new-spawned objects, placing\nnew-spawned object(s) in specific other new-spawned object(s),\nwield/wear objects, automatically at nipper spawn-time.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe spawn-equipment library is a sibling of the\n[spawn-traits](NIPLibRefSpawnTraits) lib, but works on objects rather\nthan properties.\n\nSpawn-equipment is defined using four properties, described in detail\nbelow. Whenever a nipper using spawn-equipment is **spawned**, that\nnipper\\'s spawn-equipment settings will immediately be kicked in place\nand the nipper will spawn and customize the objects in its list, in\norder of appearance.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`object *<font class=\"lib\">nip:trait:equipment:list</font>` \\<UL\\>\n(Required.)\\<br/\\> Array listing each object that should be spawned into\nthe nipper\\'s inventory. \\</UL\\>\n\n`mapping <font class=\"lib\">nip:trait:equipment:specify</font>` \\<UL\\>\n(Optional.)\\<br/\\> Mapping used to specify some/all object\\'s spawn\nbehavior. Available behavior is:\\\\> 1 (TRUE) - Wear/wield, if\npossible. 0 (FALSE) - Place object in inventory, even if wear/wieldable.\n\\<object\\> - Move into \\<object\\>\\'s inventory. Good for e.g. swords\ninto scabbards.\\</pre\\> \\</UL\\>\n\n`mapping <font class=\"lib\">nip:trait:equipment:set</font>` \\<UL\\>\n(Optional.)\\<br/\\> Two-dimensional mapping object-to-property-to-value\nin the following manner:\\\\>(\\[ \\<object\\> : (\\[ \\\"\\<property\\>\\\" :\n\\<value\\> \\]) \\])\\</pre\\>\n\nE.g.:\\\\> \\\"nip:trait:equipment:set\\\" = (\\[\n\\<MGMarrach:clothing:scabbard-short\\> : (\\[ \\\"alteration:color\\\" :\n\\\"brown\\\", \\\"alteration:color:desc\\\" : \\\"brown\\\", \\\"alteration:fit\\\" :\n\\\"practical\\\", \\\"alteration:fit:desc\\\" : \\\"practically fitted\\\",\n\\\"alteration:symbol\\\" : \\\"castle\\\", \\\"alteration:symbol:desc\\\" :\n\\\"castle\\\" \\]) \\])\\</pre\\> \\</UL\\>\n\n`mapping <font class=\"lib\">nip:trait:equipment:prop</font>` \\<UL\\>\n(Optional.)\\<br/\\> Map of property-name in nipper to set to reference of\nnew spawns of objects. Example:\\\\> \\\"nip:trait:equipment:prop\\\" =\n(\\[ \\<MGMarrach:clothing:scabbard-short\\> : \\\"npc:fighting:weapon\\\",\n\\<MGMarrach:weapons:dagger\\> : \\\"npc:fighting:scabbard\\\" \\])\\</pre\\>\n\\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:start:equip\\</font\\> \\<UL\\>\nSpawn-start trigger, which spawns and sets the object(s) and nipper as\nspecified in the properties above. \\</UL\\>\n\n\\-- Main.KalleAlm - 09 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefSpawnEquipment.md","path":"docs/unedited/NIPLibRefSpawnEquipment.md","url":"/docs/unedited/NIPLibRefSpawnEquipment.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1202982120\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: spawn-traits\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Internal](NIPCategoryInternal)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:spawn-traits\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nA simple system to apply a number of random traits to a spawned NPC.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe spawn-traits library is used to set a variety of traits to NPC\\'s,\nso that when spawned, they will each look slightly different from each\nother.\n\nFor instance, if you set the brief for a cat NPC\nto:\\\\>\\$(this.appearance:color) cat\\</pre\\>- then you could use the\nspawn-traits system to make each spawned cat look randomly different, by\nsetting the nip:spawn:traits property to e.g.:\\\\>(\\[\n\\\"appearance:color\\\" : ({ \\\"brown\\\", \\\"white\\\", \\\"black\\\", \\\"grey\\\" })\n\\])\\</pre\\>\n\nThus, spawning a cat would result in either a brown cat, a white cat, a\nblack cat or a grey cat, randomly.\n\nSlightly static at the moment, but there is a merry script available for\nmaking these traits into adjectives as well. It **requires** that the\nproperty begins with \\\"appearance:\\\" (hence, \\'slightly static\\'). If it\ndoes, or if you can make it so, setting\n`merry:inherit:setprop-post:appearance` to\n`<Lib:NIP:extra:spawn-traits>` in the nipper should do the trick. You\nalso have to set a property or it won\\'t know which details should have\nwhat:\n\nFor example, if you have `appearance:size` which might be one of *small,\nmedium* or *large* and you want the `default` detail to get the\nappropriate adjective, you would set `nip:trait:appearance:adjectives`\nto `([ \"appearance:size\" : ({ \"default\" }) ])`.\n\nIf you have `appearance:nick` which is the nick-name of the NPC, and you\nwant the default detail to have the nick as sname so people can type\n\\'smile at slydawg\\' if `appearance:nick` happens to be \\'slydawg\\', you\nwould set `nip:trait:appearance:names` to\n`([ \"appearance:nick\" : ({ \"default\" }) ])`.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:spawn:traits\\</font\\> \\<UL\\> This is the\nsingle property used by the spawn-traits system. It is a mapping of the\nfollowing format:\n\n\\\\>(\\[ \\\"\\<property-name\\>\\\" : ({ \\\"\\<alternate string\\>\\\",\n\\\"\\<alternate two\\>\\\", \\... }) \\])\\</pre\\>\n\nIf the property was set to:\\\\>(\\[ \\\"foo\\\" : ({ \\\"One\\\", \\\"Two\\\",\n\\\"Three\\\" }) \\])\\</pre\\> then the property \\\"foo\\\" in the CNPC would be\nset to \\\"One\\\", \\\"Two\\\" or \\\"Three\\\", at random.\n\nWere it set to:\\\\>(\\[ \\\"color\\\" : ({ \\\"red\\\", \\\"green\\\", \\\"blue\\\"\n}), \\\"size\\\" : ({ \\\"small\\\", \\\"medium\\\", \\\"large\\\" }) \\])\\</pre\\> then\nthe property \\\"color\\\" would be one of \\\"red\\\", \\\"green\\\" or \\\"blue\\\",\nand the property \\\"size\\\" would be one of \\\"small\\\", \\\"medium\\\" or\n\\\"large\\\". \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:start:traits\\</font\\> \\<UL\\>\n\\\"The random traits start-handler\\\" called by the internal \\\"act:start\\\"\nscript when a CNPC is spawned. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:init\\</font\\> \\<UL\\> (NIP library\ninitialization script.)\\<br\\> This script adds the \\\"start:traits\\\"\nhandler to the list of spawn-handlers. \\</UL\\>\n\n\\-- Main.KalleAlm - 21 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefSpawnTraits.md","path":"docs/unedited/NIPLibRefSpawnTraits.md","url":"/docs/unedited/NIPLibRefSpawnTraits.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1202964021\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: wearer\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:wearer\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[Offers](NIPLibRefOffers).\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[Emoting](NIPLibRefEmoting), [freemoting](NIPLibRefFreemoting).\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None known.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\n\\* Making the nipper wear specific items when offered. \\* Making the\nnipper unwear and hand specific items over to the actor when requested.\n\\* Internal and/or external handler support for giving and taking of\nitems.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThe wearer library is the Barbie-doll aspect of NIP. It allows the\nbuilder to customize, control and restrict the art of\ndressing/undressing the nipper. Due to the wide range of options in how\nexactly this should be handled, the library is written to support\nexternal handlers for one or both of the giving and taking aspects.\n*Undressing nippers is actually not implemented in this system (yet).\nCode is available e.g. from Mortalis Victus, but this code needs tuning\nas it depends on factors exclusive to that game (\\\"only that one who\ntamed me may dress/undress me\\\", for example).*\n\nThe most obvious example where this library would come in handy is a dog\nand a collar, or a horse and a saddle. The ideal solution is if she\nwould wear the saddle when you give it to her, and somehow remove and\ngive it to you if you tried to take it from her body.\\\\>\n\n------------------------------------------------------------------------\n\n\\> give my saddle to horse You offer your saddle to a brown steed. Type\n\\'revoke a brown steed\\' to abort this action.\n\nA brown steed takes a saddle from you. A brown steed wears a saddle.\n\n\\> take horse\\'s saddle A brown steed removes a saddle. You take the\nsaddle from a brown steed.\n\n------------------------------------------------------------------------\n\n\\</pre\\>\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n`object <font class=\"lib\">nip:behavior:wear</font>` \\<ul\\> If set, the\nwearer library will presume that behavior data is available for the\nmoods \\'GIVE\\' and \\'TAKE\\'. \\</ul\\>\n\n`mapping <font class=\"lib\">nip:trait:wearer:accepts</font>` \\<ul\\>\n(Note: this property is a part of the internal handler for \\'give\\'.\nThus, if you write your own handler and do not include the code in the\noriginal handler, this property is useless.)\n\nProperty-to-value list of options. For instance,\\\\>(\\[\n\\\"nip:item:wearable\\\" : 1 \\])\\</pre\\>would mean that the **property**\n\\\"nip:item:wearable\\\" in the item being offered must be set to\n1.\\\\>(\\[ \\\"nip:item:foo\\\" : \\\"bar\\\" \\])\\</pre\\> means the property\n\\\"nip:item:foo\\\" must be set to \\\"bar\\\"\\\\>(\\[ \\\"nip:item:wearable\\\"\n: 1, \\\"nip:item:foo\\\" : \\\"bar\\\" \\])\\</pre\\>means that the property\n\\\"nip:item:wearable\\\" must be set to 1 **or** the property\n\\\"nip:item:foo\\\" must be set to \\\"bar\\\"\n\nWarning: Make sure you do the above properly. By default you MUST set\n\\\"nip:item:wearable\\\" to 1 in whatever it is the NPC should wear. If\nit\\'s a horse, you are encouraged to CHANGE that to e.g.\n\\\"nip:item:wearable:horse\\\" or whatever, so that HORSES don\\'t wear DOG\nCOLLARS and DOGS don\\'t wear SADDLES and so on. I\\'m sure you can see\nthe dilemma here, if you use \\\"nip:item:wearable\\\" for all nippers!\n\nWarning again: Don\\'t forget to use \\\"export:\\\" when you set this\nproperty in items. If you set \\\"nip:item:wearable\\\" in\nGame:clothing:collar, then spawn Game:clothing:collar and try to make\nyour dog wear it, the dog will refuse, because \\\"nip:item:wearable\\\" is\nonly set in the master. Fix this by setting \\\"export:nip:item:wearable\\\"\nin Game:clothing:collar instead. \\</ul\\>\n\n`boolean <font class=\"lib\">nip:trait:wearer:silent-give</font>` \\<ul\\>\n(Default: 0)\n\nThis property describes whether the wearer library should use the\ndefault emits when someone gives something to be worn, to the nipper. If\nset, no internal output will be given. \\</ul\\>\n\n`boolean <font class=\"lib\">nip:trait:wearer:silent-take</font>` \\<ul\\>\n(Default: 0)\n\nThis property describes whether the wearer library should use the\ndefault emits when someone successfully takes something from the nipper.\nIf set, no internal output will be given. \\</ul\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler:offer:wearer\\</font\\> \\<ul\\>\n\\\"The \\'wearer\\' library handler for the \\'offer\\' feature.\\\"\n\nThis script ensures the nipper is not asleep, and, if the \\'give\\'\nhandler returns TRUE, it accepts and wears the offered item. \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler_wearer_give\\</font\\> \\<ul\\>\n\\\"This is the default \\'wearer\\' give-handler. It is triggered whenever\nsomeone tries to give something to a nipper which is using the\n\\'wearer\\' library. This handler makes use of the documented\n\\'nip:trait:wearer:accepts\\' mapping, but in order to more finely\ndetermine what and who, you should consider writing a NIP library which\nreplaces this handler.\n\nThis handler is sent the object pointers \\$offer and \\$actor.\\\" \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:handler_wearer_take\\</font\\> \\<ul\\>\n\\\"You need to create a handler which determines whether a person may or\nmay not take items from the nipper. This handler refuses all persons.\\\"\n\nThis is a dummy handler, only here to act as a placeholder until a real\ntake handler is created (probably by yourself, unless your game team has\none already). \\</ul\\>\n\n\\<font class=\\\"lib\\\"\\>merry:react-pre:take-from\\</font\\> \\<ul\\>\n\\\"Determine whether \\$actor is allowed to take something from us and if\nso, unwear it and move it into the actor\\'s inventory.\\\"\n\nThis script makes use of the \\'take\\' handler mentioned above. If the\ntake handler is permissive (returns TRUE), we will accept everything\nlisted in the property \\$what, which also contains a list of the offered\nitems.\n\nThus; the \\$what property may contain more than one object. Thus,\nchecking if \\$what\\[0\\] is accepted is not enough. You need to check and\n**remove** any entries in \\$what that aren\\'t acceptable. Even if there\nare unacceptable elements in \\$what, one acceptable entry is enough to\nreturn TRUE. \\</ul\\>\n\n\\-- Main.KalleAlm - 17 Aug 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefWearer.md","path":"docs/unedited/NIPLibRefWearer.md","url":"/docs/unedited/NIPLibRefWearer.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145329\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: wounding\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Behavior](NIPCategoryBehavior)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:wounding\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\>\n[Wounding-mgeneric](NIPLibRefWoundingMGeneric)\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nNPC-to-PC wounding.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nWounding implements a wrapper for calling an external wound-system by\nconstructing a map of arguments using the secondary handler. As of the\ntime of writing, there is only one such system available \\--\n[wounding-mgeneric](NIPLibRefWoundingMGeneric).\n\nThis system **does not** cause an NPC to wound a PC on its own. Some\nexternal code must make a call to the ::wound() function.\n\n\\<font class=\\\"query\\\"\\>NIP PROPERTIES\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:wound:map:arg\\</font\\> \\<UL\\> (Unless\nyou intend on writing your own wound-wrapper, you don\\'t need to know\nwhat this does.)\\<br/\\> Argument mapping { args\\[X\\] = args\\[Y\\] } - for\npotential use by the external handler. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:wound:map:set\\</font\\> \\<UL\\> (Unless\nyou intend on writing your own wound-wrapper, you don\\'t need to know\nwhat this does.)\\<br/\\> Hardcoded setprop mapping { args\\[X\\] = Y } -\nfor potential use by the external handler. \\</UL\\>\n\n\\<font class=\\\"lib\\\"\\>nip:trait:wound:map:ref\\</font\\> \\<UL\\> (Unless\nyou intend on writing your own wound-wrapper, you don\\'t need to know\nwhat this does.)\\<br/\\> This.reference mapping { args\\[X\\] = this.Y } -\nfor potential use by the external handler. \\</UL\\>\n\n\\<font class=\\\"query\\\"\\>LIBRARY SCRIPT REFERENCE(S)\\</font\\>\n\n\\<font class=\\\"lib\\\"\\>merry:lib:wound\\</font\\> \\<UL\\> Resolve the wound\nmaps and call the resulting object \\$handler, and the resulting function\n\\$function. \\</UL\\>\n\n\\-- Main.KalleAlm - 17 Mar 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefWounding.md","path":"docs/unedited/NIPLibRefWounding.md","url":"/docs/unedited/NIPLibRefWounding.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085145406\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPSpecStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>LIBRARY REFERENCE: wounding-mgeneric\\</font\\>\n\n\\<font class=\\\"query\\\"\\>CATEGORY:\\</font\\>\n[Extension](NIPCategoryExtension)\n\n\\<font class=\\\"query\\\"\\>WOE NAME:\\</font\\> Lib:NIP:lib:wounding-mgeneric\n\n\\<font class=\\\"query\\\"\\>DEPENDENCIES:\\</font\\>\n[Wounding](NIPLibRefWounding)\n\n\\<font class=\\\"query\\\"\\>COMPATIBILITY:\\</font\\> All.\n\n\\<font class=\\\"query\\\"\\>INCOMPATIBILITY:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>KNOWN ISSUES:\\</font\\>\n\nConfirmed () issues with this library. (Unconfirmed issues should be\nreported in the feedback section at the bottom of this document.)\n\n\\<font class=\\\"query\\\"\\>FEATURES\\</font\\>\n\nMGeneric handler for the NIP wounding wrapper.\n\n\\<font class=\\\"query\\\"\\>DESCRIPTION\\</font\\>\n\nThis is the default MGeneric handler for the NIP wound system. It will\nnot enable an NPC to attack a PC directly, but will make a call to\n::wound() resolve accurately.\n\n\\-- Main.KalleAlm - 17 Mar 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS\nLIBRARY\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPLibRefWoundingMGeneric.md","path":"docs/unedited/NIPLibRefWoundingMGeneric.md","url":"/docs/unedited/NIPLibRefWoundingMGeneric.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054582200\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { font-size: 12pt; color: \\#000000; font-weight: bold; } A {\ntext-decoration: none; font-size: 11pt; color: \\#0000ff; } .title {\nfont-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>What is a library?\\</FONT\\>\\<br\\> *A.k.a.\n\\\"What\\'s the difference between libraries and signals/hooks?\\\"*\n\n**A library** (in NIP) is a single object, describing a certain feature\nof an NPC, such as \\\"anger\\\", \\\"eating\\\", \\\"musician\\\", \\\"courier\\\",\n\\\"guard\\\", \\\"emoting\\\", etc. by defining a number of properties and\ncontaining (optionally) a set of merry scripts.\n\nMore specifically, a library may (optionally) contain any or all of the\nfollowing properties:\n\n ------------------ ---------------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------\n **PROPERTY** **DESCRIPTION** **EXAMPLE**\n dependency:needs I need these libraries/signals/and-or-hooks loaded before I\\'ll let you load me ({ \\<Lib:NIP:signals:MOOD\\> })\n done:message Emit this to everyone who loads this library \\\"Congratulations. You just added the library \\'foo\\' to the NPC. Remember to put down the toilet seat when you\\'re done.\\\"\n init:hooks Array of hooks to add with the library ({ \\\"eating\\\" })\n init:merry Array of merry scripts in this object to inherit ({ \\\"react:smile-iob\\\", \\\"lib:my:thing\\\" })\n init:signals Add/modify these signals to these priorities\\* (\\[ 100:\\\"MOOD\\\" \\])\n init:properties Create these properties with these values if the properties do not already exist (\\[ \\\"nip:trait:foo\\\":\\\"bar\\\", \\\"nip:pi\\\":3.14 \\])\n ------------------ ---------------------------------------------------------------------------------- -----------------------------------------------------------------------------------------------------------------------------\n\n\\* Read the signal reference for further information on signals. Also\nnote that the init:signals property is usually reserved for actual\nsignals, and the init:signals property won\\'t load a signal, just set\nthe signal and/or priority for it.\n\n\\<br\\> **What is the difference between \\...**\n\n**\\... a library and a signal?** The signals are basically just a series\nof identifiers, each with an individual priority setting which\ndetermines in which order the signals are triggered.\n\nA signal is usually embedded into a library, but is still called a\n\\\"signal\\\". Read [What is a signal?](NIPSignal) for further information\nhow this works.\n\n**\\... a library and a hook?** A hook is a group of scripts named in a\ncertain way so that the system will find them. Each hook may contain\nscripts that are linked to any possible signal and these will be\nloaded/unloaded automatically by the system depending on the loaded\nsignals in the NPC. Read [What is a hook?](NIPHooks) for further\ninformation.\n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPLibrary.md","path":"docs/unedited/NIPLibrary.md","url":"/docs/unedited/NIPLibrary.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1116292500\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<h1\\>NIP Merry API\\</h1\\>\n\n[]{.twiki-macro .TOC}\n\n## Introduction\n\nThe NIP Merry API is the link between user Merry code and the NIP\nsystem.\n\nThe API is there to make communication and manipulation of NPC behaviors\nand features as simple as it can for the general, non-NPC coder.\n\nThe API is somewhat infantile and not many features exist at this point.\nMore will come, especially if you request it.\n\nThe API can be accessed through Merry by calling the script namespace\nNPC::.\n\nFor example, if you wish to trigger the resource control (which would\nstart up any NPC\\'s in the room that were disabled due to PC inactivity)\nin the room \\$here, you would simply do this:\\\\>\nNPC::trigger_rcontrol(\\$room: \\$here); \\</pre\\> This would enable any\nNPC\\'s using [resource-control](NIPLibRefResourceControl) in the room.\nSimple, isn\\'t it?\n\n\\-- Main.KalleAlm - 23 Mar 2004\n\n## Reference\n\nThis is a complete list of the functions available as of May 17, 2005:\n\n### area_trigger_rcontrol(object \\$room, int \\$radius)\n\nThe `NPC::area_trigger_rcontrol()` function is used to force NPC\\'s in\nan environment, which have been disabled using the resource-control\nsystem, to start up as if a PC had entered the room.\n\nNote: as of May 17, 2005, the \\$radius is capped at 1. It must be\nprovided, still, and in future revisions, it will support adjacent rooms\n(\\>1).\n\nNote \\#2: this function is currently a copy of\n`NPC::trigger_rcontrol()`. Consider it a feature yet-to-exist.\n\n### heartbeat_thread_running(object \\$npc)\n\n`NPC::heartbeat_thread_running()` is used to detect whether or not an\nNPC is enabled. Previously, this check has been done by checking the\n`\"core:delays\"` property, but as sophisticated NPC\\'s sometimes contain\nexternal delays/daemons, this has had to change and evolve a bit.\n\nThis function is used in the `heartbeat` thread to control startup\nsynchronization.\n\n### purge_deliveries(object \\$database)\n\nUsed internally by the courier/delivery system, this function is used to\npurge old deliveries. As characters sometimes disappear or are absent\nfor an extended period of time, this function handles forced deliveries.\n\nPurging deliveries is necessary in order to maintain a manageable size\nof the delivery database.\n\nA delivery is marked for purging when it has been enqueued for 30 days.\n\n### purge_trash()\n\nSimilar to `NPC::purge_deliveries()`, `NPC::purge_trash()` is used to\npurge the NIP trashcan from old objects.\n\nWhen an NPC cleans a room or accepts trash from a character, the trashed\nobjects are placed in the nil, and added to a virtual trashcan. This is\ndone in order to prevent the destruction of important objects.\n\nCurrently, there is no interface to recover lost objects. However,\n`NPC::purge_deliveries()` is sensitive to a canned object\\'s location.\nThus, summoning an object out of the nil is sufficient to save it from\ndestruction.\n\nThe trashcan database **should not be altered manually under any\ncircumstances** \\-- recovered objects should be summoned only. The\ntrashcan database is available as `Data:NIP:servants:trashcan` on all\nservers. It cannot be renamed.\n\nAn object in the trashcan is marked for purging when it has been\nenqueued for at least 24 hours.\n\n### resolve_meta_family_data(string \\$meta_fam)\n\nThis function is used internally by the [comm tool](NIPToolComm) to\ncompile meta family data (e.g. `\"hi/hello there\"`) into \\\"true\\\" family\ndata (`({ ({ \"hi\", \"hello\" }), \"there\" })`). It could theoretically be\nused in external server/game-specific applications to produce family\ndata. It should not be used in \\\"on-the-fly\\\" operations, as it is far\ntoo resource-consuming.\n\n### trigger_rcontrol(object \\$room)\n\nThe `NPC::trigger_rcontrol()` function is used to force NPC\\'s in an\nenvironment, which have been disabled using the resource-control system,\nto start up as if a PC had entered the room.\n\n\\-- Main.KalleAlm - 16 May 2005\n","dir":"/docs/unedited/","name":"NIPMerry.md","path":"docs/unedited/NIPMerry.md","url":"/docs/unedited/NIPMerry.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092251077\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NCS TOOL: STATUS\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\> +ncs status\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\> All NIP\nNPC\\'s running a heartbeat.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe STATUS command is used to receive general information on the\ncurrently running NPC\\'s in the game. E.g.:\n\n --\n > +ncs status\n\n +----------+----------------------+-------+---------+--------------+-----------------+\n | ID | Location | State | Mood | Runtime | Age |\n +----------+----------------------+-------+---------+--------------+-----------------+\n | kitten-0 | StoryPlotter Clothos | awake | NEUTRAL | 17h 38m 11s | 44d 20h 28m 23s |\n +----------+----------------------+-------+---------+--------------+-----------------+\n --\n\n\\-- Main.KalleAlm - 18 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n%META:TOPICMOVED{by=\\\"kallea\\\" date=\\\"1092251077\\\"\nfrom=\\\"Builders.NCSToolStatus\\\" to=\\\"Builders.NIPNcsToolStatus\\\"}%\n","dir":"/docs/unedited/","name":"NIPNcsToolStatus.md","path":"docs/unedited/NIPNcsToolStatus.md","url":"/docs/unedited/NIPNcsToolStatus.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1115918039\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>+NCS TOOL: Update\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+ncs update`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\n\nAll.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe `+ncs update` command is specifically used to update all running\nnippers \\\"on-the-fly.\\\" This is vital to live environments when a new\nupdate has been released. The system attempts to figure out which is the\nactual master NPC object, but sometimes this fails. As such, it is a\ngood idea to have a special room in which all the game\\'s master NPC\nobjects are located. A host could then teleport to that room and perform\na +nip \\<npc\\'s\\> \\\"update\\\" to ensure that all the masters are updated.\n\nThe introduction of `+ncs update` ensures that any running NPC is using\nthe latest update.\n\n\\-- Main.KalleAlm - 12 May 2005\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPNcsToolUpdate.md","path":"docs/unedited/NIPNcsToolUpdate.md","url":"/docs/unedited/NIPNcsToolUpdate.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092251112\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>+NCS TOOL: Where\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+ncs where`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nGenerates and displays to the actor a list similar to that produced\nusing the command `+people`, except for nippers, rather than PC\\'s.\n\n\\-- Main.KalleAlm - 10 Aug 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n%META:TOPICMOVED{by=\\\"kallea\\\" date=\\\"1092251112\\\"\nfrom=\\\"Builders.NCSToolWhere\\\" to=\\\"Builders.NIPNcsToolWhere\\\"}%\n","dir":"/docs/unedited/","name":"NIPNcsToolWhere.md","path":"docs/unedited/NIPNcsToolWhere.md","url":"/docs/unedited/NIPNcsToolWhere.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1161788384\\\" format=\\\"1.0\\\"\nversion=\\\"1.54\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<NIPNotesSearchPoint \\-- do not delete\\> October 25: Upgraded\n[eating-animalistic](NIPLibRefEatingAnimalistic), fixing the zombie bug.\nSorry, Lovecraft-people, better luck next time. Also fixed\n[death](NIPLibRefDeath), which had issues unsetting volition in nippers\nwhen they died, if they were not also using [prey](NIPLibRefPrey).\n\nApril 26: The [act-interpreter](NIPLibRefActInterpreter) library was\nmade obsolete. If you were using this library, refer to its new location\nLib:NIP:obsolete:lib:act-interpreter \\-- but be warned that this\nfunctionality is no longer supported by the maintainer.\n\nMarch 22: Added \\\"log-to\\\" functionality in\n[communicate](NIPLibRefCommunicate) library, which can be used to detect\ncommonly asked phrases and improve the NPC communications with PC\\'s.\n\nMarch 13: Fixed serious bug in respawn act:stop script, where if an NPC\n\\\"stopped\\\" (the social action), it was respawned. Also added \\\"External\nsystems\\\" category to main NIPSystemReference page, and described [the\nspawn system](NIPExtSpawn).\n\nMarch 6: Bug regarding the [guarding](NIPLibRefGuarding) library fixed,\nwhich also affects the [librarian](NIPLibRefLibrarian) library. CM and\nLC have been NCS updated so all existing nippers should be fixed there\nalready.\n","dir":"/docs/unedited/","name":"NIPNotes.md","path":"docs/unedited/NIPNotes.md","url":"/docs/unedited/NIPNotes.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089309873\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>General overview of the system\\</FONT\\>\n\n**Briefly, what is it?** \\<font style=\\\"font-size: 8pt;\\\"\\>(Related:\n[Happy Birthday, NIP](NIPHappyBirthdayNip))\\</font\\>\n\n**NIP** is an NPC system written entirely in Merry. Its biggest\n\\\"feature\\\" is the signal/hook implementation, which is responsible for\neverything **non-reaction/witness-based**, that is \\-- anything\nspontaneous. Any unprovoked thinking that occcurs in the mind of the NPC\ntakes place using the sig/hook system.\n\nApart from the sig/hooks, the NIP controls and handles implementation,\nmodification, creation and maintenance of new and old NPC\\'s with a set\nof setprop-triggers.\n\nYou can thus create an NPC entirely through woe, and then just summon\nand start it once it\\'s finished, for what it\\'s worth.\n\nCreating an NPC from scratch is fairly simple. Just build some object of\nsome sort (like a cat or mouse, or a bartender or a rollerblading\nmonkey), and call the one command **+nip \\\"set Woe:for:the:object\\\"**\nand it\\'s done!\n\nOf course, now you have to chuck in all the libs and such that your NPC\nrequires.\n\n\\<br\\> **What Can It Do, And More Importantly \\-- What Can\\'t It Do?**\n\nIt can do basically anything. No, really, it can. It\\'s just a matter of\nadding whatever you need if it\\'s not there already, and tada, you have\nit.\n\nIt is more of a shell than a system. It provides the tool to create and\nexpand in whichever direction you desire, and is as flexible as you make\nit.\n\n**Want a courier?** Sure thing. In fact, it\\'s a top priority and if not\nfinished already, it should be soon.\\<br\\> **.. servants?** Some\nalready-made. More to come. Check out and try making your own\\<br\\> **..\nan animal?** Special efforts will be put into this area in time. Not a\ntop priority, but it\\'s up there with the rest.\\<br\\> **.. enemies?**\nDefinitely.\\<br\\> **.. a specific servant who every evening steps out of\ntheir house, walks through the setting and lights all the torches?** Of\ncourse. Scheduled events, on the list.\\<br\\> .. etc.\n\n**What you can\\'t do** is really based on yourself and fellow staffers\nin your game. The system is exclusively merry, and it can initially be\ntricky to learn how to make signals and hooks within. It currently\ndoesn\\'t have very much \\\"pre-made\\\" stuff, and it\\'s mostly a matter of\nhow gracious the coders in neighbouring games are, whether they share\ntheir libs or not.\n\nHowever, I (Kalle) and hopefully others will continuously add new\nfeatures and libs, and are open to requests and suggestions, and are\neven more open to aid you in making or learning this stuff yourself.\n\n\\<br\\> **A little more specific, how does it work?**\n\nThe system is roughly divided into three separate parts,\n\n\\* libraries \\* signals \\* hooks\n\n**Libraries** are the most \\\"general\\\" of them all, and contain\nreact/witness-scripts etc. \\<br\\> Apart from this, they contain a set of\n\\\"system properties\\\" that explain properties to be set, hooks/signals\nto implement, and so on.\\<br\\> *A library may contain a signal and/or a\nhook, but hooks may not contain libraries or signals, and signals may\nnot contain libraries or hooks.*\n\n**Signals** are the smallest objects, with the least settings. They\nsimply have a name and a priority, which later on determines in which\norder any scripts that are **attached** to it will be executed.\n\n**Hooks** are simply a set of scripts named a certain way\n(lib:hook:signal) so as to connect with the various available signals.\n\nFor instance, a hook may contain scripts for signals that **may** be\nimplemented; if the signal is enabled in the NPC when the hook is\nloaded, the script will be added accordingly. If not, the script will be\nignored.\n\nFor instance, the **eating** hook has a reference to the **MOOD** signal\n(lib:eating:mood) which will set the mood of the NPC to \\\"hungry\\\" if\nits fat reserves are low enough. This script would be totally redudant\nto execute if the NPC did not have the MOOD signal, neh?\n\nSame with the **sleeping** hook.\n\n ------------ --------------------\n \\* **SIGNALS**\n **HOOKS** DELAY\n anger \n eating \n emoting \n freemoting \n happiness \n mood lib:mood:delay\n musician \n sadness \n sleeping lib:sleeping:delay\n ------------ --------------------\n\nListed in the above chart are the currently existing hooks and signals,\nand how they are connected to each other. As you may have noted in the\n\\'mood\\' hook\\'s connection with the \\'MOOD\\' signal, there are two\nscripts, **lib:mood:mood-exec** and **lib:mood:mood-init**. The **init**\nscripts are always executed first in the loop, and **exec** scripts are\nexecuted right before **post** scripts (lib:hook:signal-post).\n\n**Script execution order:** \\* By signal priority \\*\nlib:\\*:*signal*-**init** \\* lib:\\*:*signal*-**pre** \\* lib:\\*:*signal*\n\\* lib:\\*:*signal*-**exec** \\* lib:\\*:*signal*-**post**\n\n\\-- Main.KalleAlm - 01 Jun 2003\n","dir":"/docs/unedited/","name":"NIPOverView.md","path":"docs/unedited/NIPOverView.md","url":"/docs/unedited/NIPOverView.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089303840\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> A { text-decoration: none; font-size: 11pt; color: \\#0000ff;\nborder: solid transparent \\#ffffff 1px; } A:Hover { color: \\#0099ff;\nbackground: \\#eeeeee; border: solid \\#000000 1px; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPParentStyle.md","path":"docs/unedited/NIPParentStyle.md","url":"/docs/unedited/NIPParentStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235680\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> .title { font-size:\n20pt; font-weight: bold; color: \\#000000; } tr.entry { font-size: 8pt;\nfont-family: Arial, Helvetica; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPPerformanceStyle.md","path":"docs/unedited/NIPPerformanceStyle.md","url":"/docs/unedited/NIPPerformanceStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1151917980\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>Behavior philosophy\\</font\\>\n\n[]{.twiki-macro .TOC}\n\n## Introduction\n\nThis is mostly philosophical, but contains some bits about why we chose\nto go the route we went when implementing the relations system. As an\nadded bonus, there\\'s some history in here as well.\n\n### Elmer\n\nIn 2002, I spent a summer writing up Elmer, an NPC in Marrach. The major\naccomplishment with the dog was the fact he would **react** to what\npeople did. Not only would he react, but he would **alter his feelings\ntowards** people based on how they treated him. This has lead to endless\namounts of opportunity for roleplay, where people have intentionally\nmade Elmer dislike or like them in order to assist them in portraying\ntheir characters. This may sound a little overexponated, but I don\\'t\nthink I\\'ve ever gotten as much praise in my life, as I did for that old\nmutt, so he deserves the credit, even if I may not.\n\nElmer\\'s relationship system was a simple map of adverbs and verbs and\nrelationships numbered from 1 to 7, where each number represented one\nof: loved, trusted, friendly, neutral, unfriendly, distrusted, hated.\nAdditionally, the system had a numeric value that represented a\nperson\\'s position within the current relationship. So when a person did\nsomething good, Elmer bumped their numeric relationship up one point. If\nthe numeric relationship exceeded a certain amount, Elmer upped their\n\\\"real\\\" relationship one step, which actually affected his way of\nlooking at them and which orders he allowed them to give him, and so on.\n\nAt some point in there, I had a vision where NPC\\'s, items, and\ncharacters would interact with each other, seamlessly, using a protocol\nof some kind. The protocol would for instance prompt players with things\nsuch as \\\"Do you want to \\...\\\" and it would, seamlessly, prompt NPC\\'s\nwith the same kind of questions, that were answered via relayed\ncallbacks in the NPC. NPC\\'s would be able to \\\"tell\\\" other NPC\\'s\nthings and the other NPC\\'s would be able to respond in whatever fashion\nwas the most appropriate at the time\\...\n\nThis system I named \\\"NIP\\\", which stood for \\\"NPC Interaction\nProtocol\\\". The end result was something almost completely different\nfrom what I initially wanted to make, but we are slowly moving toward\nthat vision. And the reason for this longwinded yap can be found in the\nnext section.\n\n### The NPC Interaction Protocol\n\nNIP was in some shape finished and ready to be used around 2003.\nImmediately, I was asked for the ability to make NPC\\'s react to actions\nin the same manner that Elmer does; that is, if somebody frowns at the\nnipper, the nipper should react to that, and if someone smiles at the\nnipper, it should react to THAT. This was obviously a very important\nsystem that many a person wanted to use and found missing in NIP, and\nsimultaneously, I tried to wrap my head around how to make such a system\nimplementation that didn\\'t involve having the coders sit and do what I\ndid with Elmer, which was:\n\n - adverb \"happily\" modifies: r+ = 1.2, t+ = 1.2, r- = 0.8, t- = 0.8\n - adverb \"hatefully\" modifies: r+ = 0.5, t+ = 0.5, r- = 1.4, t- = 1.4 [only-negative]\n - adverb ...\n\nAnd:\n\n - verb \"smile\" is: ranged, positive, strength 5\n - verb \"kick\" is: touching, negative, strength 20\n - verb \"kiss\" is: touching, positive, strength 20\n - verb ...\n\nAs you most likely realize, the above is insanity, and only the most\ndevoted relations builder would stand writing something like that in an\naccurate, complete fashion. Thus, a system had to be developed which did\nNOT force the builders to write up rules for each individual verb and\nadverb, but still allowed them to define complex rules that did not make\nevery nipper react the same way to the same verb/adverb combination.\nEnter Azrael, Death, Quo, Sahra, Sol, Willow, and \\\"the relations\nproject.\\\"\n\n## The relations project\n\nThe relations project is an ongoing project where volunteers from the\nvarious games help out to define generic, subjective rules for verbs and\nadverbs. The verbs and adverbs are flagged with various qualities that\nrepresent specific characteristics of the individual verbs or adverbs.\nThis was necessary in order to allow relation builders to create rules\nthat were not restricted by the subjectivity of the \\\"judge\\\" for the\nparticular verb or adverb. Each verb or adverb could be one extreme or\nthe other, or neutral, indicating that the verb did not possess a\nquality that met either of the two extremes. An example is \\\"serious,\nneutral, or playful.\\\" An action can be serious, but it cannot be\nplayful at the same time. However, an action can be neither serious nor\nplayful, and this is what neutral represents.\n\nThe qualities, their opposites and their corresponding synonyms are as\nfollows:\n\n Quality Opposite Synonyms\n -------------- -------------- -------------------------------------------------------------\n Serious Playful Humorlessness, importance, severity, will, determination.\n Playful Serious Irreverence, amusement, satisfaction, happiness, mischief.\n Rough Gentle Meanness, violence, brutality, force.\n Gentle Rough Forgiveness, compassion, kindness, cultivation.\n Personal Distant Closeness, similarity.\n Distant Personal Dissent, difference, atypicalness.\n Respect Disrespect Mannerly, recognizing, respectful, courtesy, complimentary.\n Disrespect Respect Arrogance, forwardness, gall, rudeness.\n Well-meaning Ill-meaning Benevolence, friendship, unselfishness, geniality.\n Ill-meaning Well-meaning Meanness, spitefulness, hostility, aversion.\n Animalistic Social Mannerless, barbaric, odd.\n Social Animalistic Refined, mannerly, civil.\n\nSome of these definitions turned out to be slightly problematic. For\nexample the \\\"personal/distant\\\" definition seemed almost tied with the\n\\\"respectful/disrespectful\\\" definition, in that anything that was\npersonal, was disrespectful; anything that was distant, was respectful.\nWe came to realize that personal should mean closeness in the sense that\nyou know somebody; but not that they necessarily were a friend. I might\nbe close to my arch nemesis, but I still loathe him/her/it. This is the\ncloseness that personal indicates.\n\nAdverbs and verbs were naturally handled slightly differently. Verbs\nwere given bases, e.g. \\\"the verb smile is well-meaning.\\\" Adverbs were\ngiven modifiers, e.g. \\\"the adverb hatefully modifies an action towards\nbeing ill-meaning.\\\" This resulted in \\\"smiling\\\" on its own being\n\\\"well-meaning\\\", but \\\"smiling hatefully\\\" being \\\"neutral\\\".\n\nThe obvious benefit of going this route is the fact that as time goes\non, the system will be improved as the volunteers refine and add new\nverbs/adverbs to the system. Right now, there are 104 verbs and 62\nadverbs \\\"known\\\" to the system, and this list will keep on growing,\nespecially as people begin to use the system in their games.\n\nSo how would the above flagging be used in an NPC?\n\n## The relations rules editor\n\n\\<img src=\\\"%ATTACHURLPATH%/rre.png\\\" alt=\\\"rre.png\\\" /\\>\n\nThe above screenshot is from the relations rules editor. As you see,\nthere is a table with green \\\"YES\\\" and red \\\"NO\\\" cells, describing the\ncurrent rules prerequisites. The table is updated when the prerequisites\nare changed, letting you know which verb/adverb combinations will\ntrigger this particular rule. So for example, in this case, if you annoy\nthe NPC caringly, the NPC will consider your action friendly, despite\nthe fact you\\'re annoying it. If you annoy it bouncily, animalistically,\netc. the NPC will not interpret the action in the same way. There are\nsome oddities in there, such as the fact \\\"acknowledge hatefully\\\" will\nactually make the NPC think you\\'re being a-positive, but this can be\nexplained by the fact that this rule is for close friends of the NPC.\nThey\\'ve already earned their friendship by being nice, so chances are\ntheir \\\"hatefulness\\\" is a joke.\n\nRelations rules take some getting used to but I\\'ve found them an\nextremely powerful way of defining how an NPC should react to various\nnon-verbal actions, like kicks and punches, licks and kisses, and so on.\n\n\\-- Main.KalleAlm - 30 Jun 2006\n\n%META:FILEATTACHMENT{name=\\\"rre.png\\\" attr=\\\"\\\" comment=\\\"\\\"\ndate=\\\"1151917803\\\" path=\\\"rre.png\\\" size=\\\"196667\\\" user=\\\"kallea\\\"\nversion=\\\"1.1\\\"}%\n","dir":"/docs/unedited/","name":"NIPPhilosophyBehavior.md","path":"docs/unedited/NIPPhilosophyBehavior.md","url":"/docs/unedited/NIPPhilosophyBehavior.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1069181559\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { font-size: 12pt; color: \\#000000; font-weight: bold; } A {\ntext-decoration: none; font-size: 11pt; color: \\#0000ff; } .title {\nfont-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>Property naming rules and meaning\\</FONT\\>\n\nAs you will realize soon enough, a lot of properties are handled when\ndealing with the NPC system. Customization properties, condition\nproperties, system properties, etc. all reside in the NPC itself\n(wherelse would they be, as each NPC has its own custom design?).\n\nTo make it easier to read these values, they have been separated into\ngroups and sub-groups. This is also because it should be apparent which\nof these can be altered away, and which should be left to be handled by\nthe system.\n\nThere are three main property groups: \\* **nip-core**:\\* \\* **nip**:\\*\n\\* **npc**:\\*\n\n**nip-core** is the most difficult to read property, but thankfully,\nnoone should ever have to modify it on their own. It contains a list of\nlibraries and hooks, the cached signal hook path, etc.\n\n**nip** contains all the customizable settings, and is further divided\ninto (currently) four sub-groups: \\* nip:**behavior**:\\* \\*\nnip:**mood**:\\* \\* nip:**offer**:\\* \\* nip:**stats**:\\* \\*\nnip:**trait**:\\*\n\n**nip:behavior** contains behavior database information,\\<br\\>\n**nip:mood** contains the mood settings,\\<br\\> **nip:offer** contains\noffer settings,\\<br\\> **nip:stats** contains numeric stats for the NPC,\nsuch as strength, agility, etc,\\<br\\> **nip:trait** contains a set of\nsub-sub-groups, usually named after the hook/library/signal which uses\nthem (e.g. \\'eating\\', \\'emoting\\' and \\'sleeping\\').\n\n**npc** contains all condition properties, basically it\\'s a listing of\nhow the NPC feels at this very moment.\\<br\\>\n\n +stat gruffle \"property:npc:*\"\n -- Properties (npc:*)--\n Property: npc:energy = 722\n Property: npc:mood = \"HUNGRY\"\n Property: npc:state = \"awake\"\n Property: npc:weariness = 10590\n\n\\-- Main.KalleAlm - 01 Jun 2003 (18 Nov 2003)\n","dir":"/docs/unedited/","name":"NIPPropGroups.md","path":"docs/unedited/NIPPropGroups.md","url":"/docs/unedited/NIPPropGroups.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1115917011\\\" format=\\\"1.0\\\"\nversion=\\\"1.15\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n**Quick Reference** for the NIP System Reference.\n\n*Here you will find links to pages which contain topics that you may be\nlooking for. Please keep in mind that this page is updated manually, and\nthat if something is new, it might not have made it in here just yet.*\nIf you cannot find what you\\'re looking for, please [check out the main\nNIP System Reference page](NIPSystemReference).\n\nSome pages are referred to multiple times. This is not me getting old\nand senile; I simply chose to do this in some cases, where there were\nfew references on a similar topic.\n\n\\<hr noshade\\>\n\n**A** \\* Acting, spontaneous actions; \\* [Library:\nemoting](NIPLibRefEmoting) \\* [Library: freemoting](NIPLibRefFreemoting)\n\\* Anger; *See Moods* \\* Asking; *See Distribution NPC\\'s* and *Rumours*\n\n**B** \\* Behavior; *Also see Moods* \\* [Tech reference: Using behavior\nin home-made code.](NIPRefBehavior)\n\n**C** \\* Cleaning; \\* [Hook: room-cleaning (cleaning a\nroom)](NIPHookRefRoomCleaning) \\* [Library: trash-taker (accepting trash\noffered)](NIPLibRefTrashTaker) \\* Commanding; \\* [Library:\ncommanding](NIPLibRefCommanding) \\* [How-to: Making an NPC listen to and\nobey spoken orders](NIPHowCommanding) \\* Communication; \\* [How to set\nan NPC up for basic communication.](NIPHowCommunication) \\* Cooks; *See\nDistribution NPC\\'s* \\* Couriers; \\* [How to make them accept\nthings](NIPHowOffers) \\* [How to make them give out\nthings](NIPHowPresents) \\* [Library: asking](NIPLibRefAsking) \\*\n[Library: courier](NIPLibRefCourier) \\* [Library:\noffers](NIPLibRefOffers) \\* [Library: presents](NIPLibRefPresents) \\*\n[Signal/hook: DELIVERY](NIPHookRefDelivery) \\* Creating an NPC; \\* [+NIP\n\\\"set\\\" tool](NIPToolSet) \\* [How to turn an object into an\nNPC](NIPHowSetUp)\n\n**D** \\* Disabling an NPC. *See Tool, +NIP - [Die](NIPToolDie)* \\*\nDistribution NPC\\'s; \\* [How to make them hand out\nthings](NIPHowPresents) \\* [Library: presents](NIPLibRefPresents)\n\n**E** \\* Eating; *See Hunger* \\* Enabling an NPC. *See Tool, +NIP -\n[Live](NIPToolLive)*\n\n**F** \\* Family/-ies; *See Communication* \\* Frequently Asked Questions;\n\\* [Frequently Asked Questions (FAQ)](NIPFAQ)\n\n**G** \\* Global review of NIP *See System map* \\* Guarding NPC\\'s; \\*\n[Library: guarding](NIPLibRefGuarding) \\* [Library:\nmarrach-guards](NIPLibRefMarrachGuards)\n\n**H** \\* Halting an NPC; \\* [+NIP \\\"die\\\" tool](NIPToolDie) \\*\nHappiness; *See Moods* \\* Hints; \\* [How to make NPC\\'s randomly blurt\nhints (rumours)](NIPHowHints) \\* [Todo: hints system\n(completed)](NIPTodoHintsSystem) \\* Hooks; \\* [How to create signals and\nhooks](NIPRefSignalsAndHooks) \\* [Hook/Signal reference template\n(documenting)](NIPTempHookRef) \\* [What is a hook?](NIPHook) \\* Horses;\n*See Mounts* \\* Hunger; \\* [How to make an NPC feel\nhunger](NIPHowHungry) \\* [Library: eating](NIPLibRefEating) \\* Hunting;\n\\* [Library: predator](NIPLibRefPredator) \\* [Library:\nprey](NIPLibRefPrey) \\* [To-do: predator (completed)](NIPTodoPredator)\n\\* [Tutorial: predator/prey](NIPTutorialPredatorPrey)\n\n**I** \\* Interaction (NPC-to-NPC) \\* [Hook: nip](NIPHookRefNip) \\* [How\nto make NPC\\'s interact with each other](NIPHowInteractive) \\* [Library:\ninteraction](NIPLibRefInteraction) \\* [To-do: Interaction system\n(completed)](NIPTodoInteractionSystem)\n\n**K** \\* Kill/Wound (NPC\\'s that). *See Killer (PC) functionality* \\*\nKiller (PC) functionality \\* [Library: killer](NIPLibRefKiller) \\*\n[Library: wounding](NIPLibRefWounding) \\* [Library:\nwounding-mgeneric](NIPLibRefWoundingMGeneric) \\* Killing/Disabling\nNPC\\'s. *See Tool, +NIP - [Die](NIPToolDie)*\n\n**L** \\* Libraries; \\* [How to create a library](NIPRefLibraries) \\*\n[Library reference template (documenting)](NIPTempLibRef) \\* [What is a\nlibrary?](NIPLibrary)\n\n**M** \\* Moods; \\* [+NIP \\\"record\\\" tool](NIPToolRecord) \\* [How to\nrecord a behavior database](NIPHowRecord) \\* [How to record\nfreemotes](NIPHowRecordFreemotes) \\* [Library: anger](NIPLibRefAnger) \\*\n[Library: eating](NIPLibRefEating) \\* [Library:\nemoting](NIPLibRefEmoting) \\* [Library: freemoting](NIPLibRefFreemoting)\n\\* [Library: happiness](NIPLibRefHappiness) \\* [Library:\nsadness](NIPLibRefSadness) \\* [Library: sleeping](NIPLibRefSleeping) \\*\n[Signal/hook: MOOD](NIPHookRefMood) \\* Mounts; \\* [How to make a mount\n(e.g. horse)](NIPHowMakeAMount) \\* [Library:\nmounting](NIPLibRefMounting) \\* [Library:\nmountrider](NIPLibRefMountrider) \\* [Todo: mounting](NIPTodoMounting) \\*\nMovement; \\* [How to make the NPC move randomly through\nrooms](NIPHowRandomMove) \\* [Library: movement](NIPLibRefMovement) \\*\n[Todo: advanced movement](NIPTodoAdvancedMovement)\n\n**N** \\* NCS \\* +NCS-tool: *See Tool, NCS* \\* NIP \\* +NIP-tool: *See\nTool, NIP*\n\n**O** \\* Obedience; *See Commanding.*\n\n**P** \\* Predators; *See Hunting.* \\* Prey; *See Hunting.* \\* Project\nplan; \\* [Major Project plan for NIP](NIPPlanMajor) \\* Properties; \\*\n[Naming rules/meaning: properties](NIPPropGroups)\n\n**R** \\* Recording behavior databases; \\* [How to record a behavior\ndatabase](NIPHowRecord) \\* [+NIP \\\"record\\\" tool.](NIPToolRecord) \\*\nReferences; \\* [NIP System Reference](NIPSystemReference) \\* \\<a\nhref=\\\"<http://www.wraith.com/twiki/bin/view/Coders/NipSystem>\\\"\\>Marrach\nNIP branch\\</a\\> \\* [System Map/Overview](NIPSystemMap) \\* Registering a\n+NIP-tool function. *See Tool, NIP.* \\* Resource control; \\* [Library:\nresource-control](NIPLibRefResourceControl) \\* [Todo: Resource control\n(completed)](NIPTodoResourceControl) \\* Rumours; *Also see Hints* \\*\n[How to use the rumours system (ask NPC about \\...)](NIPHowRumours) \\*\n[Library: asking](NIPLibRefAsking) \\* [Todo: rumour system\n(completed)](NIPTodoRumourSystem)\n\n**S** \\* Sadness; *See Moods* \\* Scripts; \\* [Naming rules/meaning:\nscripts](NIPScriptGroups) \\* Secretaries (couriers, trash-taking\nservants, etc.); \\* [How to make them accept things](NIPHowOffers) \\*\n[Library: offers](NIPLibRefOffers)\n\n\\* Signals; \\* [How to create signals and hooks](NIPRefSignalsAndHooks)\n\\* [Hook/Signal reference template (documenting)](NIPTempHookRef) \\*\n[What is a signal?](NIPSignal) \\* Sleeping; \\* [How to make an NPC\nsleep](NIPHowSleep) \\* [Library: sleeping](NIPLibRefSleeping) \\*\nSpontaneous actions; *See Acting, spontaneous actions* \\* Starting an\nNPC; \\* [+NIP \\\"live\\\" tool](NIPToolLive) \\* System map; \\* [NIP System\nMap](NIPSystemMap)\n\n**T** \\* Tailors; *See Distribution NPC\\'s* \\* Tool, +NCS (NIP\nCommunications System) \\* [The +NCS tool](NCSTool)\n\n- [Status](NIPNcsToolStatus)\n- [Where](NIPNcsToolWhere) \\* Tool, +NIP; \\* [The +NIP tool](NIPTool)\n- [Connect](NIPToolConnect)\n- [Die](NIPToolDie)\n- [Disconnect](NIPToolDisconnect)\n- [List](NIPToolList)\n- [Live](NIPToolLive)\n- [Present](NIPToolPresent)\n- [Record](NIPToolRecord)\n- [Register](NIPToolRegister)\n- [Scene](NIPToolScene)\n- [Set](NIPToolSet)\n- [Tracking](NIPToolTracking)\n- [Update](NIPToolUpdate)\n- [+NIP tool reference template](NIPTempToolRef) \\* Trading\n (NPC-to-PC) \\* [How to set up an NPC to use\n trading](NIPHowTrading) \\* [How to set up a\n CDO](NIPHowCashDataObjects) \\* [Library: trading](NIPLibRefTrading)\n\n**U** \\* Updating NPC\\'s. *See Tool, +NIP - [Update](NIPToolUpdate)*\n\n**W** \\* Wear/unwear things (NPC\\'s that); \\[Wearing, unwearing,\nremoving.\\] \\* [Library: wearer](NIPLibRefWearer) \\* Wound/Kill (NPC\\'s\nthat). *See Killer (PC) functionality*\n\n\\-- Main.KalleAlm - 31 Aug 2003\n","dir":"/docs/unedited/","name":"NIPQuickRef.md","path":"docs/unedited/NIPQuickRef.md","url":"/docs/unedited/NIPQuickRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1069935269\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>NIP Debugging reference\\</font\\>\n\nAt this point, the NIP system has grown so much that more than I are\nusing it, and more than I are coding for it. This grants some reference\nfor knowledge on the various options an NPC-designer or NIP library\nbuilder has available in regards to debugging.\n\n[]{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n# Reading debug data.\n\nThere is already a bunch of debug information in the system. Most of it\nis invisible unless you specifically take a look at it, though. A few\noptions are available;\n\n## Possessing the npc.\n\nPossessing the NPC is one way of debugging it. A lot of information is\nsent to the NPC in form of emits that are never seen by anyone else.\nThese emits are useful to give a glance if for instance your NPC keeps\ncrashing, or if the NPC refuses to do something that it\\'s expected to\ndo.\n\n------------------------------------------------------------------------\n\n## Using the lfc.\n\nThe LFC (Log Feed Channel) is a chat channel used specifically by\nsystems on the server to transmit debug information and notifications on\nvarious things. This channel at times has a high volume of traffic, but\nthankfully, it has some filtering rules that you may use to receive only\nthe information you are interested in.\n\nTo enable and use the LFC, and only receive NIP specific data, do the\nfollowing:\n\n > +lfc 'on'\n You start listening to LFC.\n > +lfc '+NIP'\n Hook \"nip\" added to hook list, displaying all messages of priority COMMENT and up.\n\n------------------------------------------------------------------------\n\n# Writing debug data.\n\nAs for the coding audience, there are a few tricks that are commonly\nused when coding NPC libs or features. There are in general two ways\nthat are preferred for debugging data, both of which are mentioned\nabove.\n\n## Emitting to the npc body, \\'this\\'.\n\nSending an emit to \\'this\\' will ensure that noone unexpected gets your\nmessage (unless non-staffers are going to possess NPC\\'s, which is a bad\nidea in general).\n\n EmitTo( this, \"Some debug data.\" );\n\nCoders will then be expected to possess the NPC to receive your\nnotification. This is sometimes good, but in some cases, coders are not\nas well versed with this as one would like, which leads to the\nsecondary, and in some cases better, alternative.\n\n------------------------------------------------------------------------\n\n## Using the lfc.\n\nThe NIP system has a built-in extended logging feature, which can be\nused to easily emit debug entries to the LFC.\n\nThe syntax for this feature is as follows:\n\n ::log( $subject: (object) in which the error occured (usually this)\n $error: (string) description of the error that occured\n $ecode: (int) error-code (if any).\n $expected: (string) what did expect, that we didn't get?\n $got: (string) what did we instead get, that we didn't expect?\n );\n\n\\* \\$subject is optional, and should usually be ignored. Most often,\n\\\"this\\\" is the object in which the error occured. \\* \\$error should be\nshort and brief. Something like \\\"Unexpected value.\\\"\n\nAn example in which this is used is in the eating:decide script;\n\n if( !grammes ) {\n ::log( $error: \"Invalid value for property \\\"nip:trait:eating:grammes\\\"\",\n $expected: \"float\",\n $got: \"nil\" );\n return nil;\n }\n\nThis is a live example of how a debug logging might appear using the\nLFC.\n\nOf course, this has its pro\\'s and its con\\'s. If a user does not hae\nthe LFC enabled, they won\\'t get our debug messages. Similarly, if we\nsend too many debug messages, people will not want to keep it enabled,\nas it\\'s spamming their eyes out.\n\nFor important notifications, using the LFC is preferred, though.\n\n------------------------------------------------------------------------\n\n\\-- Main.KalleAlm - 27 Nov 2003\n","dir":"/docs/unedited/","name":"NIPRefDebugging.md","path":"docs/unedited/NIPRefDebugging.md","url":"/docs/unedited/NIPRefDebugging.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1151925491\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>Why, Yes I am God.\\</FONT\\>\\<br\\> *A.k.a. \\\"How\nto create your own NPC library\\\"*\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\nThis document is intended for the coding audience, familiar with\nSkotos\\' Merry, and familiar with the basics on how the NPC system\nbehaves and works. The information provided herein will presume that\nthis is the case.\n\n\\...\n\n**How to create a library \\-- thoughts to think**\n\n\\* **What is my library specifically going to do?**\\<BR\\> A library\nshould usually be a tiny matter. It should usually do one single thing,\nand should in most cases take up to a page of code, not too much more\nthan that. \\* A good idea is \\\"*My NPC horse needs to be mountable. So\nI\\'m making a lib for that.*\\\" \\* while a bad idea is \\\"*My NPC horse\nneeds some stuff like whinnying and mounting so I\\'m gonna do that.*\\\"\n\nRestrict yourself to one specific issue and concentrate on that.\nSeparate the different features into different libraries.\n\n\\* **Where do I start planning this?**\\<BR\\> You\\'re encouraged (but not\nrequired) to fetch the [template](NIPTempTodo) from the [NIP System\nReference](NIPSystemReference) page and add it to the todo list there.\nThat\\'s one way to \\\"think it out\\\".\\<BR\\> Some thoughts to consider,\nthough: \\* Are there any libs or features I can make use of? \\* Will I\nmake one/several hooks for this lib?\n\n- If so, which signals will my hook append to?\n- Will I even make a whole new signal for the lib? \\* How \\'heavy\\'\n will this lib be? Is it going to lag the game into unrecognition\n when a few NPC\\'s use it, or is it going to work for one, fifty, one\n hundred NPC\\'s?\n\nThose few pointers said, let\\'s go on and step through the actual\nprocess from idea to conclusion:\n\n[Click here to read on.](NIPRefLibraries1.1)\n\n\\-- Main.KalleAlm - 03 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries.md","path":"docs/unedited/NIPRefLibraries.md","url":"/docs/unedited/NIPRefLibraries.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054842360\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.1: So, you have the idea\\...\\</H2\\>\n\n\\... but you\\'re unsure where to start. Let\\'s go through an example\nmentioned earlier. The horse mounting feature. We\\'re going to implement\nit together now, step by step. Let\\'s play Q&A with ourselves to see\nwhere we\\'re going with this:\n\n <B>Q: What are the basic few points that this system will provide?</B>\n <I>A: A way to mount an NPC, some way to keep the rider and NPC in \n sync'd proximation, some way to deal with moving through \n rooms.</I>\n\n <B>Q: What other, external/internal, features are we going to need \n to pull this off?</B>\n <I>A: Unless we decide it's a good thing to separate the whole prox\n sync/approach features from the 'mounting' lib, none. But \n that is something we can honestly cut out at a later point if\n we realize it is useful in other cases than this.</I>\n\n <B>Q: Who's going to use this system?</B>\n <I>A: At least two different theatres have expressed interest in it\n so far. I'm sure others could find it useful as well.</I>\n\nAlright, we\\'ve figured a few things out there. We don\\'t need any\nexternal libs for this to work. It\\'s a \\\"standalone\\\" thing. We have a\nhum at what we need to make, but at this point it\\'s time we go ahead\nand specify exactly what we\\'re going to do.\n\n**\\-\\-- What Would It Look Like, How Would It Work \\-\\--**\n\nI\\'ve decided to, initially, make the \\\"mounting\\\" part a\nreact:jump-script in the NPC so that whenever someone types \\\"jump\nhorse\\\", the script will be triggered (instead of making an entirely new\n\\\"mount\\\" verb \\-- for now).\n\nI\\'ve also gone over the [Merry Signal System](SignalSystem) chart and\nfound the following interesting entries:\n\n ---------- ----- ----- ------ -------- ------ ------------------------------------ ------ -------------------------------\n signal pre sig post arg type description role description\n approach X X X target NRef which detail to approach \\* which detail to approach\n leave X X X \n stance X X X target NRef prox target of stance (e.g. altar) \\* prox target of stance\n enter X X X what NRef detail we\\'re trying to enter \\* detail we\\'re trying to enter\n from detail we emerge from\n into detail we enter into\n ---------- ----- ----- ------ -------- ------ ------------------------------------ ------ -------------------------------\n\nI\\'m going to add a hook to the act:approach, act:leave and act:stance\nsignals. Whenever someone is mounting the NPC, these scripts will be put\nin the rider, so that I can control all movement in the room. Thus, if\nthe rider types \\\"approach George\\\", the horse he\\'s on will approach\nGeorge, and the rider will remain seated on the horse. Similarly, if the\nrider types \\\"go east\\\" (or \\\"e\\\"), the horse will be teleported with\nhim and s/he will be plopped on the horse again.\n\n[Continue.](NIPRefLibraries1.2)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries11.md","path":"docs/unedited/NIPRefLibraries11.md","url":"/docs/unedited/NIPRefLibraries11.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055126039\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries19\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.10: The three remaining scripts.\\</H2\\>\n\n --- <B>act:leave</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Leave script, inherited whenever someone mounts an NPC, which deals with movement issues within rooms.\n\n */</M_COM>\n\n <M_COM>/* Force the NPC (which is referred to through 'npc:mounting' in the actor) to perform the leave. */</M_COM>\n Act<M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT><M_CCS>,</M_CCS> <M_TXT>\"leave\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* And then put the rider back on the mount */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n ---\n\nOnce again, we need to go into the jump-script, but this time we\\'re\ngoing to have some forethought and inherit all scripts, even those we\nhaven\\'t created yet.\n\n --- <B>react:jump-dob</B> in <B>Marrach:Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <B><M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;</B>\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\n\\- and let\\'s do the same with the dismounting script, act:lower in\n**mountrider**\n\n --- <B>act:lower</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Script for dismounting NPC's.\n\n */</M_COM>\n\n <M_COM>/* Firstly, make sure the rider typed just \"lower\". We're going to let everything else pass. */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$dob</M_VARS> <M_CCS>||</M_CCS> <M_VARS>$iob</M_VARS> <M_CCS>)</M_CCS> <M_FUN>return</M_FUN> TRUE<M_CCS>;</M_CCS> <M_COM>/* Roles found, we abort. */</M_COM>\n\n <M_COM>/* Let's emit something cute right away. */</M_COM>\n\n <M_VARS>$mount</M_VARS> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n\n\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You dismount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" dismounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Now, let's reverse the things done in the mounting script. */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$mount</M_VARS>.<M_TXT>\"npc:mounted\"</M_TXT> = 0<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <B><M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:lower\"</M_TXT> = nil<M_CCS>;</M_CCS></B>\n <M_COM>/* And finally, set the actor's stance to \"standing\",\n and preposition to \"beside\". */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_STAND</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_BESIDE</M_CON><M_CCS>;</M_CCS>\n ---\n\nTo make use of the new code we\\'ve made, we just have to jump the horse\nagain, since the **react:jump-dob**-script will put us \\\"up-to-date\\\",\n\n ---\n > jump horse\n You mount a horse.\n\n > +stat me \"property:merry:inherit:act:*\n -- Properties (merry:inherit:act:*)--\n Property: merry:inherit:act:approach = &lt;Marrach:Lib:NIP:lib:mountrider>\n Property: merry:inherit:act-post:enter = &lt;Marrach:Lib:NIP:lib:mountrider>\n Property: merry:inherit:act:leave = &lt;Marrach:Lib:NIP:lib:mountrider>\n Property: merry:inherit:act:lower = &lt;Marrach:Lib:NIP:lib:mountrider>\n Property: merry:inherit:act:stance = &lt;Marrach:Lib:NIP:lib:mountrider>\n\n > look\n [general description]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near the floor.\n\n > approach skylar\n A horse moves away from the floor.\n\n > look\n [general description]\n\n A horse and StoryCoder Skylar are standing near here. You are sitting on a horse.\n\n > approach skylar\n\n <B>Hmm.</B>\n ---\n\nAfter some tests, I came to the conclusion that the system decided it\nwas smart if I, instead of approaching someone (as I asked for), left\nthe horse first. Which I can\\'t. This is either a bug that someone else\nwill address, or it\\'s a feature we can\\'t really do much about. Let\\'s\ntest some more.\n\n ---\n > step to skylar\n\n StoryCoder Skylar allows you to step her.\n A horse approaches StoryCoder Skylar.\n You step to StoryCoder Skylar.\n\n A horse steps to StoryCoder Skylar.\n\n > look\n [general description]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near StoryCoder Skylar.\n\n > leave\n A horse moves away from StoryCoder Skylar.\n\n > look\n [general description]\n\n A horse and StoryCoder Skylar are standing near here. You are sitting on a horse.\n ---\n\nEverything but a few minor issues seems to work so far! Great! Let\\'s go\nahead and tackle the stance-issue (where the horse and I both approach).\nTemporarily, we\\'re adding a little point to the act:approach-script,\nwhich seems to be where this problem occurs.\n\n --- <B>act:approach</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Approach script, inherited whenever someone mounts an NPC, which deals with movement issues within rooms.\n\n */</M_COM>\n\n <M_COM>/* Instantly put the character in proximity to whatever he's attempting to approach, */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$what</M_VARS>;\n\n <M_COM>/* Force the NPC (which is referred to through 'npc:mounting' in the actor) to perform the approach too. */</M_COM>\n\n <B>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> dump_value<M_CCS>(</M_CCS> args <M_CCS>)</M_CCS>)<M_CCS>;</M_CCS>\n </B>\n <M_FUN>Act</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT><M_CCS>,</M_CCS> <M_TXT>\"approach\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_VARS>$what</M_VARS> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Quick 100 ms delay, */</M_COM>\n <M_VARS>$delay</M_VARS><M_CCS>(</M_CCS>0<M_CCS>.</M_CCS>1, FALSE<M_CCS>,</M_CCS> <M_TXT>\"0c9f\"</M_TXT><M_CCS>)</M_CCS>;\n\n <M_COM>/* And then put the rider back on the mount */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n ---\n\nTest it.\n\n ---\n > stand by skylar\n StoryCoder Skylar allows you to stand by her.\n ([ \"actor\":<Marrach:players:K:kalle>, \"consent_mapping\":([ \"action\":\"stance\", \"args\":([ \"prep\":256, \"stance\":5, \"target\":(43)O(/base/data/nref#-1, <Marrach:players:S:skylar>, \"default\") ]), \"message\":\"stand by\" ]), \"consented\":1, \"current-action\":\"approach\", \"target\":(43)O(/base/data/nref#-1, <Marrach:players:S:skylar>, \"default\"), \"targets\":(43)O(/base/data/nref#-1, <Marrach:players:S:skylar>, \"default\"), \"this\":<Marrach:players:K:kalle>, \"what\":(43)O(/base/data/nref#-1, <Marrach:players:S:skylar>, \"default\"), \"witnesses\":({ <Marrach:Coders:kalle:rooms:home>, ({ <Marrach:Coders:kalle:NPC:stallion> }) }) ])\n\n A horse approaches StoryCoder Skylar.\n\n A horse stands up near StoryCoder Skylar.\n ---\n\nWoah! Okay. If we squint and peer very carefully, it seems the big\nvariable **consent_mapping** is causing trouble. It\\'s actually sending\nwhat to do next, on to the horse! No wonder the horse did the stance as\nwell.\n\n[Let\\'s go in and tweak just a bit\\...](NIPRefLibraries1.11)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries110.md","path":"docs/unedited/NIPRefLibraries110.md","url":"/docs/unedited/NIPRefLibraries110.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055126160\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries110\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.11: Tweaking a bit.\\</H2\\>\n\n --- <B>act:approach</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Approach script, inherited whenever someone mounts an NPC, which deals with movement issues within rooms.\n\n */</M_COM>\n\n <M_COM>/* Instantly put the character in proximity to whatever he's attempting to approach, */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$what</M_VARS>;\n\n <M_COM>/* Force the NPC (which is referred to through 'npc:mounting' in the actor) to perform the approach too. */</M_COM>\n <M_FUN>Act</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT><M_CCS>,</M_CCS> <M_TXT>\"approach\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_VARS>$what</M_VARS><B>, <M_VARS>$consent_mapping</M_VARS>: nil</B> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Quick 100 ms delay, */</M_COM>\n <M_VARS>$delay</M_VARS><M_CCS>(</M_CCS>0<M_CCS>.</M_CCS>1, FALSE<M_CCS>,</M_CCS> <M_TXT>\"0c9f\"</M_TXT><M_CCS>)</M_CCS>;\n\n <M_COM>/* And then put the rider back on the mount */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n ---\n\nAnd now, let\\'s try again:\n\n ---\n > leave\n A horse moves away from StoryCoder Skylar.\n\n > stand by skylar\n StoryCoder Skylar allows you to stand by her.\n\n A horse approaches StoryCoder Skylar.\n You stand up near StoryCoder Skylar.\n ---\n\nWell\\... I\\'d say that works. At least for the time being. We have\nanother issue to address\\...\n\n ---\n > look\n [general description]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near StoryCoder Skylar.\n\n > stand before skylar\n StoryCoder Skylar allows you to stand before her.\n\n You stand up in front of StoryCoder Skylar.\n\n > look\n [general description]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near StoryCoder Skylar.\n ---\n\nAs you see, the horse isn\\'t standing in front of Skylar, as it should.\nWe address that issue in the following script,\n\n --- <B>act:stance</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Stance handler for mounted NPC's. This script ensures stances are displayed correctly.\n\n */</M_COM>\n\n <M_COM>/* Here, we simply forward the action to the horse, but we put the \n stance to \"standing\". Don't want any kneeling horses here... */</M_COM>\n\n <M_FUN>Act</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT><M_CCS>,</M_CCS> <M_TXT>\"stance\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$stance</M_VARS>: <M_CON>STANCE_STAND</M_CON> <M_CCS>)</M_CCS>;\n ---\n\nWell, that was simple enough. And the simple explanation is that we\ntrust the actions will be \\\"forwarded\\\" as we\\'ve seen them be before\n(in act:approach). Let\\'s try this out.\n\n ---\n > step to skylar briskly \"Hey there pa dig there!\"\n StoryCoder Skylar allows you to step her.\n\n You step to StoryCoder Skylar briskly, \"Hey there pa dig there!\"\n\n > look\n [...]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing in front of StoryCoder Skylar.\n\n > leave\n A horse moves away from StoryCoder Skylar.\n\n > step to skylar consideringly\n StoryCoder Skylar allows you to step her.\n A horse approaches StoryCoder Skylar.\n\n You step to StoryCoder Skylar consideringly.\n\n > step to floor\n A horse moves from StoryCoder Skylar to the floor.\n You step to the floor.\n\n > stand on floor\n A horse stands up on the floor.\n\n > step to skylar\n StoryCoder Skylar allows you to step her.\n\n A horse moves from the floor to StoryCoder Skylar.\n You step to StoryCoder Skylar.\n\n > sit behind skylar\n StoryCoder Skylar allows you to sit behind her.\n\n A horse stands up behind StoryCoder Skylar.\n\n > kneel before skylar\n StoryCoder Skylar allows you to kneel before her.\n\n A horse stands up in front of StoryCoder Skylar.\n\n > nod satisfied\n You nod satisfiedly.\n ---\n\nIt seems we\\'re getting close to finished here. All we really have left\nto do is **act:enter**, which is probably not going to be too difficult\nto do. If we look at the signal table again,\n\n -------- ----- ----- ------ ------ ------ ------------------------------- ------ -------------------------------\n signal pre sig post arg type description role description\n enter X X X what NRef detail we\\'re trying to enter \\* detail we\\'re trying to enter\n from detail we emerge from\n into detail we enter into\n -------- ----- ----- ------ ------ ------ ------------------------------- ------ -------------------------------\n\nWe see clearly what it is we need to do. What we\\'re going to do, to\nmake it clear who\\'s actually doing what, is to make sure the message\ngoes \\\"StoryCoder Kalle leaves through \\...\\\", not \\\"A horse leaves\nthrough.\\\"\\<br\\> If there are several horses in the same environment and\nthey move in and out, it\\'s going to confuse the living snot out of\nanyone trying to keep track of who\\'s where. The simple solution,\ncodewise, is to let the actor\\'s enter go through, catch the post-phase\nand manually teleport NPC and put rider on NPC manually, once safely on\nthe other side.\n\n[The revised code.](NIPRefLibraries1.12)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries111.md","path":"docs/unedited/NIPRefLibraries111.md","url":"/docs/unedited/NIPRefLibraries111.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055164360\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries111\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.12: The revised code.\\</H2\\>\n\n --- <B>act-post:enter</B> in <B>Marrach:Lib:NIP:lib:mountrider</B>\n <M_COM>/*\n\n D=The act-post:enter script for the mounting system (NIP), which handles movement through rooms.\n\n */</M_COM>\n\n <M_COM>/* The rider has left through the exit. NPC still \"on the other side\" though. Let's move the NPC as well, but manually. */</M_COM>\n\n <M_VARS>$mount</M_VARS> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n <M_VARS>$mount</M_VARS>.<M_TXT>\"base:environment\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:environment\"</M_TXT>;\n <M_VARS>$mount</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT>;\n\n <M_COM>/* And put the rider back on the mount. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$mount</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n ---\n\nLet\\'s see how that works.\n\n ---\n > n\n You begin to enter the gate to the living room.\n\n A living room.\n\n You are sitting on a horse. A horse is standing near the gate to the laboratory.\n\n > n\n A horse moves from the gate to the laboratory to the doors leading to the pool.\n The doors leading to the pool is closed.\n\n > s\n A horse moves from the doors leading to the pool to the gate to the laboratory.\n You begin to enter the gate to the laboratory.\n\n Kalle's Laboratory: a windy turret, currently littered with 'Workers, slow down!'-signs and bright red traffic cones.\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near the gate to the laboratory. \n\n > smile\n You smile.\n ---\n\nThat works good! Now, before we call this a version 1.0, let\\'s put in a\ncute little thing in the mount/unmount scripts, react:jump-dob\n(**mounting**) and act:lower (**mountrider**):\n\n --- <B>react:jump-dob</B> in <B>Marrach:Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* ... and put the rider ON the NPC */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = this<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n\n <M_COM>/* Let's inherit the approach-script we made earlier, in mountrider ... */</M_COM>\n\n <M_COM>/* First, we gotta figure out where the mountrider object is. */</M_COM>\n <M_VARS>$mountrider</M_VARS> = Call<M_CCS>(</M_CCS> this<M_CCS>,</M_CCS> <M_TXT>\"find_nip_object\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_TXT>\"mountrider\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Then we inherit away! */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:lower\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <B><M_COM>/* Let's replace the base:gait in the actor for when we move through rooms. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT>; <M_COM>/* store old value, just in case */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = <M_TXT>\"rides\"</M_TXT>; <M_COM>/* and set our own */</M_COM></B>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nAnd act:lower,\n\n --- <B>act:lower</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Script for unmounting NPC's.\n\n */</M_COM>\n\n <M_COM>/* Firstly, make sure the rider typed just \"lower\". We're going to let everything else pass. */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$dob</M_VARS> <M_CCS>||</M_CCS> <M_VARS>$iob</M_VARS> <M_CCS>)</M_CCS> <M_FUN>return</M_FUN> TRUE<M_CCS>;</M_CCS> <M_COM>/* Roles found, we abort. */</M_COM>\n\n <M_COM>/* Let's emit something cute right away. */</M_COM>\n\n <M_VARS>$mount</M_VARS> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>;\n\n <B><M_COM>/* Let's restore the gait to the old value. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = nil<M_CCS>;</M_CCS></B>\n\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You unmount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" unmounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Now, let's reverse the things done in the mounting script. */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$mount</M_VARS>.<M_TXT>\"npc:mounted\"</M_TXT> = 0<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = nil<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:lower\"</M_TXT> = nil<M_CCS>;</M_CCS>\n\n <M_COM>/* And finally, set the actor's stance to \"standing\",\n and preposition to \"beside\". */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_STAND</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_BESIDE</M_CON><M_CCS>;</M_CCS>\n\n ---\n\nAnd our library is working fine. But there are some things that we can\nmake better right away. For instance, the call to **find_nip_object** in\n**react:jump-dob** should be a one-timer only. This introduces a new\naspect of the system, the **merry:lib:init**-script:\n\nThis script is going to be placed in the **mounting** lib, as that\\'s\nthe one the NPC actually loads.\n\n --- <B>lib:init</B> in <B>Marrach:Lib:NIP:lib:mounting</B>\n <M_COM>/*\n\n D=This script is executed once, when an NPC loads the 'mounting' library.\n\n */</M_COM>\n\n this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:riderlib\"</M_TXT> = Call<M_CCS>(</M_CCS> this<M_CCS>,</M_CCS> <M_TXT>\"find_nip_object\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_TXT>\"mountrider\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$options</M_VARS>: nil <M_CCS>)</M_CCS>;\n ---\n\nTo see this in action, all we have to do is, yet again, add the library\n(mounting) to the NPC. As you can see, it\\'s okay to add the same\nlibrary multiple times.\n\n ---\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n &lt;Marrach:Lib:NIP:lib:mounting> loaded successfully.\n\n > +stat horse \"property:nip:*\n -- Properties (nip:*)--\n Property: nip:trait:mounting:riderlib = &lt;Marrach:Lib:NIP:lib:mountrider>\n ---\n\nGreat! Now all we have to do is open up that pesky **react:jump-dob**\nscript again and use the \\'nip:trait:mounting:riderlib\\' property\ninstead of calling find_nip_object every time.\n\n --- <B>react:jump-dob</B> in <B>Marrach:Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> \n\n <B><M_COM>/* Fetch the reference to the riderlib, */</M_COM>\n <M_VARS>$mountrider</M_VARS> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:riderlib\"</M_TXT>;</B>\n <M_COM>/* Then we inherit away! */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:lower\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <M_COM>/* Let's replace the base:gait in the actor for when we move through rooms. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT>; <M_COM>/* store old value, just in case */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = <M_TXT>\"rides\"</M_TXT>; <M_COM>/* and set our own */</M_COM>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nNow we\\'re done. Of course, some improvement can be made. For instance,\nwe can turn some of the functionality into customizable properties so\nthe user can tweak the settings and make his NPC more \\\"unique\\\". For\ninstance the \\\"gait\\\" we added previously could be turned into something\nlike \\\"nip:trait:mounting:rider-gait\\\". But, as we\\'ve come this far,\nit\\'s time to make this library **public**. Since it\\'s actually useful\nat this point, we move it from Marrach:Lib:NIP:\\... to Lib:NIP:\\...\n\nA note to the dear Skotos-Seveners, though. If you put something in\nLib:, it may be lost when Zell decides to make one of his Marrach -\\> S7\nupgrades. I would hate to see this happen, but if you have created a\nfunctional library and wish to make it available to not only your own\ntheatre, feel free to email me and I will ensure it\\'s distributed and\nnot destroyed! \\-- <kalle@marrach.skotos.net>\n\n[Tweaking it a final time.](NIPRefLibraries1.13)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries112.md","path":"docs/unedited/NIPRefLibraries112.md","url":"/docs/unedited/NIPRefLibraries112.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055164987\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries112\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.13: Tweaking it a final time.\\</H2\\>\n\nWell, our lib is done and useable. It may not be flawless, fantastic,\nperfect, but it\\'s definintely something. However, we\\'re going to take\na few more steps into making it even more useful.\n\nFirst off, we\\'re going to turn the static gait (\\\"rides\\\") into a\ncustomizable property. That will introduce a new library property:\n\n\\* **init:properties** - Which is used to set initial default values to\nproperties in NPC\\'s that load the library in question.\n\nSo, we\\'ll set this property in the **mounting** lib (which we\\'ve at\nthis point renamed to **\\<Lib:NIP:lib:mounting\\>**) to:\n\n\\* (\\[ \\\"nip:trait:mounting:rider-gait\\\" : \\\"rides\\\" \\])\n\nThis means that whenever someone adds the **mounting** library to an\nNPC, the property **\\\"nip:trait:mounting:rider-gait\\\"** in the NPC will\nbe set to **\\\"rides\\\"**, unless it\\'s set to something already, in which\ncase the old value is saved.\n\nLet\\'s test this:\n\n ---\n > +setp \"Lib:NIP:lib:mounting init:properties ([ \"nip:trait:mounting:rider-gait\" : \"rides\" ])\"\n Setting 'init:properties' in &lt;Lib:NIP:lib:mounting>;\n - from: nil\n - to: ([ \"nip:trait:mounting:rider-gait\":\"rides\" ])\n\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n &lt;Lib:NIP:lib:mounting> loaded successfully.\n\n > +stat horse \"property:nip:trait:*\"\n -- Properties (nip:trait:*)--\n Property: nip:trait:mounting:rider-gait = \"rides\"\n Property: nip:trait:mounting:riderlib = &lt;Lib:NIP:lib:mountrider>\n ---\n\nTada! There we have it! Now, let\\'s implement it in the appropriate\nscript, **react:jump-dob**.\n\n --- <B>react:jump-dob</B> in <B>Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* ... and put the rider ON the NPC */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = this<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n\n <M_COM>/* Let's inherit the approach-script we made earlier, in mountrider ... */</M_COM>\n\n <M_COM>/* Fetch the reference to the riderlib, */</M_COM>\n <M_VARS>$mountrider</M_VARS> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:riderlib\"</M_TXT>;\n\n <M_COM>/* Then we inherit away! */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:lower\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <M_COM>/* Let's replace the base:gait in the actor for when we move through rooms. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT>; <M_COM>/* store old value, just in case */</M_COM>\n\n <B><M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:rider-gait\"</M_TXT>; <M_COM>/* and set our own */</M_COM></B>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nOne line changed there, as you can see. Instead of setting\n\\$actor.\\\"base:gait\\\" to \\\"riding\\\", we\\'re setting it to whatever\nthis.\\\"nip:trait:mounting:rider-gait\\\" is. Which can be nil, in which\ncase the regular \\\"Joe leaves through/arrives from the exit\\\" message\nwill be displayed.\n\nNow, it\\'s always a good idea to inform the user of this feature so that\ns/he knows it can be tweaked with. Another library property is available\nfor this specific purpose:\n\n\\* **done:message** - Display a string of text when this library is\nloaded.\n\nLet\\'s be informative and put in a brief note to the user,\n\n ---\n > +setp \"Lib:NIP:lib:mounting done:message The NPC is now mountable! \n The property 'nip:trait:mounting:rider-gait' can be customized to \n something like \"elegantly rides\" or \"heavily galops\".\"\n Setting 'done:message' in &lt;Lib:NIP:lib:mounting>;\n - from: nil\n - to: \"The NPC is now mountable! The property \n 'nip:trait:mounting:rider-gait' can be customized to something like \n \\\"elegantly rides\\\" or \\\"heavily galops\\\".\"\n\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n <FONT COLOR=#FF0000>The NPC is now mountable! The property \n 'nip:trait:mounting:rider-gait' can be customized to something like \n \"elegantly rides\" or \"heavily galops\".</FONT>\n &lt;Lib:NIP:lib:mounting> loaded successfully.\n ---\n\nThere we go!\n\nNow we should really replace those jump/lower re-/actions to use\nsomething more appropriate \\-- mount, and dismount.\n\nFirst off, we create the two verbs, mount and dismount. We call them\n**Neoct:IC:Verbs:mount** and **Neoct:IC:Verbs:dismount** (add a direct\nobject role named \\'dob\\' to each) and we also add an action to each\nwhich we call **Neoct:IC:Actions:mount** and\n**Neoct:IC:Actions:dismount**.\n\nBoth action objects get a tiny one-line **global:action** script, in\nwhich we simply do **EmitTo( \\$actor, \\\"You can\\'t do that.\\\" );**.\n\nAfter this is finished, we go ahead and simply rename the two scripts.\n\n\\* **react:jump-dob** in **mounting** we rename to **react:mount-dob**\n\\* **act:lower** in **mountrider** we rename to **act:dismount**\n\nBut now we need to update the system to inherit\n**act:dismount**act:lower\\</B\\>,\n\n --- <B>react:mount-dob</B> in <B>Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* ... and put the rider ON the NPC */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = this<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n\n <M_COM>/* Let's inherit the approach-script we made earlier, in mountrider ... */</M_COM>\n\n <M_COM>/* Fetch the reference to the riderlib, */</M_COM>\n <M_VARS>$mountrider</M_VARS> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:riderlib\"</M_TXT>;\n\n <M_COM>/* Then we inherit away! */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n\n <B><M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:dismount\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;</B>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = <M_VARS>$mountrider</M_VARS>;\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <M_COM>/* Let's replace the base:gait in the actor for when we move through rooms. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT>; <M_COM>/* store old value, just in case */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:rider-gait\"</M_TXT>; <M_COM>/* and set our own */</M_COM>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nAfter this update, we also have to go into **act:dismount** and make it\nunload itself rather than the, now non-existant, **act:lower** script.\n\n --- <B>act:dismount</B> in <B>Lib:NIP:lib:mountrider</B> ---\n <M_COM>/* \n \n D=Script for unmounting NPC's. \n \n */</M_COM>\n\n <B>[*** We've removed the check here, as it's no longer of any use ***]</B> \n <M_COM>/* Let's emit something cute right away. */</M_COM> \n \n <M_VARS>$mount</M_VARS> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>; \n \n <M_COM>/* Let's restore the gait to the old value. */</M_COM> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT>; \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = nil<M_CCS>;</M_CCS> \n \n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You unmount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>; \n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" unmounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>; \n \n <M_COM>/* Now, let's reverse the things done in the mounting script. */</M_COM> \n \n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <M_VARS>$mount</M_VARS>.<M_TXT>\"npc:mounted\"</M_TXT> = 0<M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:approach\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:leave\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:stance\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act-post:enter\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <B><M_VARS>$actor</M_VARS>.<M_TXT>\"merry:inherit:act:dismount\"</M_TXT> = nil<M_CCS>;</M_CCS></B>\n \n <M_COM>/* And finally, set the actor's stance to \"standing\", \n and preposition to \"beside\". */</M_COM> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_STAND</M_CON><M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_BESIDE</M_CON><M_CCS>;</M_CCS>\n ---\n\nThe final thing we need to do is to change the \\\"init:merry\\\" property,\nwhich currently reads **({ \\\"react:jump-dob\\\" })**:\n\n ---\n > +setp \"Lib:NIP:lib:mounting init:merry ({ \"react:mount-dob\" })\"\n ---\n\nNow, we need to reload the library into the NPC again, or it won\\'t\nwork.\n\n ---\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n <FONT COLOR=#FF0000>The NPC is now mountable! The property \n 'nip:trait:mounting:rider-gait' can be customized to something like \n \"elegantly rides\" or \"heavily galops\".</FONT>\n &lt;Lib:NIP:lib:mounting> loaded successfully.\n\n > mount horse\n You mount a horse.\n\n > dismount\n You dismount a horse.\n ---\n\nNow, you may have noticed a bug if you did this all from scratch, which\noccurs with the error messages. This is because sometimes, the NPC\ndoesn\\'t have a \\\"trait:nominative\\\" property (it, he or she). Now,\nwe\\'re going to put one into the init:properties so that unless the NPC\nhas one already, it\\'s going to default to \\\"it\\\".\n\n ---\n > +setp \"Lib:NIP:lib:mounting init:properties ([ \"nip:trait:mounting:rider-gait\":\"rides\", \"trait:nominative\" : \"it\" ])\n Setting 'init:properties' in &lt;Lib:NIP:lib:mounting>;\n - from: ([ \"nip:trait:mounting:rider-gait\":\"rides\" ])\n - to: ([ \"nip:trait:mounting:rider-gait\":\"rides\", \"trait:nominative\":\"it\" ])\n\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n <FONT COLOR=#FF0000>The NPC is now mountable! The property \n 'nip:trait:mounting:rider-gait' can be customized to something like \n \"elegantly rides\" or \"heavily galops\".</FONT>\n &lt;Lib:NIP:lib:mounting> loaded successfully.\n\n > +stat horse \"property:trait:*\"\n -- Properties (trait:*)--\n Property: trait:his = \"his\"\n <B>Property: trait:nominative = \"it\"</B>\n Property: trait:possessive = \"his\"\n ---\n\nThat should deal with that issue.\n\nAfter a recent discussion, [further changes were\nmade](NIPRefLibraries1.14)!\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries113.md","path":"docs/unedited/NIPRefLibraries113.md","url":"/docs/unedited/NIPRefLibraries113.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055165389\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries113\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.14: Modifications to the code.\\</H2\\>\n\nIn a discussion with one of the team members of Devils Cay, thoughts on\na solution where the mounting library would be integrated into a\nsomewhat different other type of system were put forth.\n\nInitially, I said \\\"Of course it works,\\\" but then I realized the code\nwas a bit too static for the time being, for that. So I updated it.\n\nAs you may recall, in the mount/dismount-scripts, a couple of inherits\nwere made. These were clumsily written, and it was always in my mind to\nreplace these in the \\\"Tweaking the code\\\"-part, but I never got around\nto do it.\n\nThe system integration mentioned above required another script to be\ninherited in the rider, though.\n\nTo make this possible, I added another property to the nip:trait\\'s,\nnamely **\\\"nip:trait:mounting:rider-inherits\\\"**.\n\nThis property should by default look like this: **(\\[\n\\\"act-post:enter\\\":\\\"nip:trait:mounting:riderlib\\\",\n\\\"act:approach\\\":\\\"nip:trait:mounting:riderlib\\\",\n\\\"act:dismount\\\":\\\"nip:trait:mounting:riderlib\\\",\n\\\"act:leave\\\":\\\"nip:trait:mounting:riderlib\\\",\n\\\"act:stance\\\":\\\"nip:trait:mounting:riderlib\\\" \\])**\n\nWhy not just an array, though? Because if we added a simple array, the\nsystem wouldn\\'t know where to grab it!\n\nSo, as the **init:properties**-property in the mounting-lib already\nexists, and looks like this: **(\\[\n\\\"nip:trait:mounting:rider-gait\\\":\\\"rides\\\", \\\"trait:nominative\\\":\\\"it\\\"\n\\])**\n\n\\- we\\'re going to just add the aforementioned to it.\n\n ---\n > +setp \"Lib:NIP:lib:mounting init:properties ([ \"nip:trait:mounting:rider-gait\":\"rides\", \"trait:nominative\":\"it\", \"nip:trait:mounting:rider-inherits\":([ \"act-post:enter\":\"nip:trait:mounting:riderlib\", \"act:approach\":\"nip:trait:mounting:riderlib\", \"act:dismount\":\"nip:trait:mounting:riderlib\", \"act:leave\":\"nip:trait:mounting:riderlib\", \"act:stance\":\"nip:trait:mounting:riderlib\" ]) ])\n ---\n\nAs you probably know already, this means any NPC that loads the mounting\nlibrary, will get the aforementioned properties set, unless the\nproperties already exist in the NPC body.\n\nLet\\'s see what we need to do with the react:mount-dob-script in the\nmounting library though:\n\n --- <B>react:mount-dob</B> in <B>Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* ... and put the rider ON the NPC */</M_COM>\n\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:proximity\"</M_TXT> = this<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n\n <B><M_COM>/* We inherit, as specified in the inherits mapping */</M_COM>\n <M_VARS>$inherits</M_VARS> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:rider-inherits\"</M_TXT>;\n <M_VARS>$scripts</M_VARS> = <M_FUN>map_indices</M_FUN><M_CCS>(</M_CCS> <M_VARS>$inherits</M_VARS> <M_CCS>)</M_CCS>;\n <M_RVD>for</M_RVD><M_CCS>(</M_CCS> <M_VARS>$i</M_VARS> = 0<M_CCS>;</M_CCS> <M_VARS>$i</M_VARS> < <M_FUN>sizeof</M_FUN><M_CCS>(</M_CCS> <M_VARS>$scripts</M_VARS> <M_CCS>)</M_CCS>; <M_VARS>$i</M_VARS>++ <M_CCS>)</M_CCS>\n <M_FUN>Set</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"merry:inherit:\"</M_TXT>+<M_VARS>$scripts</M_VARS>[$i], <M_FUN>Get</M_FUN><M_CCS>(</M_CCS> this<M_CCS>,</M_CCS> <M_VARS>$inherits</M_VARS>[$scripts[$i]] <M_CCS>)</M_CCS>)<M_CCS>;</M_CCS></B>\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS>\n\n <M_COM>/* Let's replace the base:gait in the actor for when we move through rooms. */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT>; <M_COM>/* store old value, just in case */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = this<M_CCS>.</M_CCS><M_TXT>\"nip:trait:mounting:rider-gait\"</M_TXT>; <M_COM>/* and set our own */</M_COM>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nWhat does that modification do, anyway?\n\nFirstly, let\\'s look at the properties in our NPC: (if you haven\\'t\nreloaded the mounting lib yet, you need to do so)\n\n ---\n > +stat horse \"property:nip:*\"\n -- Properties (nip:*)--\n Property: nip:trait:mounting:rider-gait = \"rides\"\n Property: nip:trait:mounting:rider-inherits = ([ \n \"act-post:enter\":\"nip:trait:mounting:riderlib\", \n \"act:approach\":\"nip:trait:mounting:riderlib\", \n \"act:dismount\":\"nip:trait:mounting:riderlib\", \n \"act:leave\":\"nip:trait:mounting:riderlib\", \n \"act:stance\":\"nip:trait:mounting:riderlib\" ])\n Property: nip:trait:mounting:riderlib = &lt;Lib:NIP:lib:mountrider>\n ---\n\nSpecifically, the last property is interesting,\n**\\\"nip:trait:mounting:riderlib\\\"**. It points to\n\\<Lib:NIP:lib:mountrider\\>. So in our code, what we do here:\n\\<PRE\\>\\$inherits =\nthis.\\\"nip:trait:mounting:rider-inherits\\\";\\</PRE\\>is to grab the\ninherits mapping as is, and here: \\<PRE\\>\\$scripts = map_indices(\n\\$inherits );\\</PRE\\>we extract the indices (keys) as an array; which we\nthen use here: \\<PRE\\>for( \\$i = 0; \\$i \\< sizeof( \\$scripts ); \\$i++\n)\\</PRE\\> to step through each individual indice. Now comes the tricky\npart,\n\n Set( $actor, <B>\"merry:inherit:\"+$scripts[$i]</B>,\n\nwhich in the first indice would be \\\"merry:inherit:act-post:enter\\\";\n\n Set( $actor, \"merry:inherit:\"+$scripts[$i], <B>Get( this, $inherits[$scripts[$i]] ));</B>\n\nand we **set it** to the value, of the value, of the mapping with the\nindice in question, which in the first case means we set it to the\nhorse\\'s \\\"nip:trait:mounting:riderlib\\\"\\'s value, which is\n\\<Lib:NIP:lib:mountrider\\>.\n\nLet me repeat that one: We set the property \\[\\<FONT\nCOLOR=\\#FF0000\\>merry:inherit:\\<indice\\>\\</FONT\\>\\] to the value of the\nvalue \\[\\<FONT\nCOLOR=\\#FF0000\\>\\\"nip:trait:mounting:riderlib\\\"\\</FONT\\>\\] in the NPC,\nwhich is \\<FONT COLOR=\\#FF0000\\>\\<Lib:NIP:lib:mountrider\\>\\</FONT\\>.\n\nAlright. Now that we\\'ve (hopefully) covered that part, we need to go in\nand tweak the act:dismount-script in the mountrider-lib.\n\n --- <B>act:dismount</B> in <B>Lib:NIP:lib:mountrider</B> ---\n <M_COM>/* \n \n D=Script for dismounting NPC's. \n \n */</M_COM> \n \n <M_COM>/* Let's emit something cute right away. */</M_COM> \n \n <M_VARS>$mount</M_VARS> = <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT>; \n \n <M_COM>/* Let's restore the gait to the old value. */</M_COM> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:gait\"</M_TXT> = <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT>; \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:oldgait\"</M_TXT> = nil<M_CCS>;</M_CCS> \n \n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You dismount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>; \n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS>.<M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" unmounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>; \n \n <M_COM>/* Now, let's reverse the things done in the mounting script. */</M_COM> \n \n <M_VARS>$actor</M_VARS>.<M_TXT>\"npc:mounting\"</M_TXT> = nil<M_CCS>;</M_CCS> \n <M_VARS>$mount</M_VARS>.<M_TXT>\"npc:mounted\"</M_TXT> = 0<M_CCS>;</M_CCS> \n\n <B><M_VARS>$inherits</M_VARS> = <M_FUN>map_indices</M_FUN><M_CCS>(</M_CCS> <M_VARS>$mount</M_VARS>.<M_TXT>\"nip:trait:mounting:rider-inherits\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_RVD>for</M_RVD><M_CCS>(</M_CCS> <M_VARS>$i</M_VARS> = 0<M_CCS>;</M_CCS> <M_VARS>$i</M_VARS> < <M_FUN>sizeof</M_FUN><M_CCS>(</M_CCS> <M_VARS>$inherits</M_VARS> <M_CCS>)</M_CCS>; <M_VARS>$i</M_VARS>++ <M_CCS>)</M_CCS>\n <M_FUN>Set</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"merry:inherit:\"</M_TXT>+<M_VARS>$inherits</M_VARS>[$i], nil <M_CCS>)</M_CCS>;</B>\n \n <M_COM>/* And finally, set the actor's stance to \"standing\", \n and preposition to \"beside\". */</M_COM> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_STAND</M_CON><M_CCS>;</M_CCS> \n <M_VARS>$actor</M_VARS>.<M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_BESIDE</M_CON><M_CCS>;</M_CCS>\n ---\n\nOkay, that one\\'s not as difficult as the previous.\n\nWe fetch the mapping\\'s indices straight away, \\<PRE\\>\\$inherits =\nmap_indices( \\$mount.\\\"nip:trait:mounting:rider-inherits\\\" );\\</PRE\\>-\nand we step through each and every one of the entries and set the\ninherit to nil,\\<PRE\\>for( \\$i = 0; \\$i \\< sizeof( \\$inherits ); \\$i++ )\nSet( \\$actor, \\\"merry:inherit:\\\"+\\$inherits\\[\\$i\\], nil );\\</PRE\\>\n\nThat\\'s it. It is now possible to add/remove rider-inherits from the\ncustomized NPC without having to grok code. We will possibly get back\nwith more chapters on more expansions and customizations in time for\nthis one. Keep on the lookout. :)\n\n\\-- Main.KalleAlm - 08 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries114.md","path":"docs/unedited/NIPRefLibraries114.md","url":"/docs/unedited/NIPRefLibraries114.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054842360\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries11\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.2: Imagining up a few scenarios.\\</H2\\>\n\n <B>--- Mounting \"in action\", aka the way we want it to work when it's done ---</B>\n > look\n A test place.\n You're standing here. A heroic-looking horse is standing near here.\n\n > immediately jump heroic-looking horse\n <I>[my own react script in the horse kicks in here]</I>\n You mount the heroic-looking horse.\n\n > look\n A test place.\n\n A heroic-looking horse is standing near here. You are sitting on a \n heroic-looking horse.\n\n Gunther arrives from the north exit.\n\n Gunther smiles.\n\n > walk to Gunther \"Hi, Gunther!\"\n <I>[my own act:approach script is triggered here]</I>\n A heroic-looking horse approaches Gunther.\n\n A heroic-looking horse walks to Gunther, \"Hi, Gunther!\"\n <B>OOPS!</B>\n ---\n\nOkay, in my little imagined scene above, we immediately realize one\nconcrete thing about the stance script \\-- **the emote (in the stance)\nmust be by the rider, not by the horse**. Perhaps this would work, as\nsomething of a hack:\n\nApproaches are hooked, but the approach is done internally (using\n\\$what).\n\nThat issue settled, let\\'s go back to our scene and see what happens:\n\n ---\n Gunther arrives from the north exit.\n\n Gunther smiles.\n\n > walk to Gunther \"Hi, Gunther!\"\n <I>[the act:approach script kicks in, forces the horse to approach as \n well, and makes the rider's approach internal and silent. A very \n short delay (100 ms) ...]</I>\n A heroic-looking horse approaches Gunther.\n <I>[... and drop the rider on the horse again. The act:stance check \n (to see if he's got in prox) has already been executed at this point \n (so we won't have any spammy, endless failed attempts to \n approach]</I>\n You walk to Gunther, \"Hi, Gunther!\"\n ---\n\nThat looks sorta good so far. The last part (walking to Gunther although\nmounting a horse) is something we\\'ll have to deal with eventually, but\nfor now it\\'ll do as is.\n\n ---\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing near Gunther. You are sitting on a heroic-looking horse.\n ---\n\nThat also works.\n\n ---\n > stand beside gunther \n [act:approach; horse is already near Gunther, so nothing really \n happens here]\n You stand beside Gunther.\n\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing near Gunther. You are sitting on a heroic-looking horse.\n ---\n\nOkay. Any way we can implement a solution to make the horsie reflect not\nonly proximity but also preposition (stance would be a little odd and\ncould be abused way too much, \\\"A heroic-looking horse is kneeling\nbefore Gunther.\\\")?\n\nCourse there is! act:stance, mentioned earlier, is called whenever the\nactor tries to change his stance. Let\\'s be repetitive and look at that\ntable again,\n\n -------- ----- ----- ------ -------- ------ ------------------------------------ ------ -----------------------\n signal pre sig post arg type description role description\n stance X X X target NRef prox target of stance (e.g. altar) \\* prox target of stance\n -------- ----- ----- ------ -------- ------ ------------------------------------ ------ -----------------------\n\nWe have \\$target right off. There are also two others (undocumented)\narguments that are interesting. So we quickly test this in the client of\nthe game,\n\n ---\n > +setp me \"merry:act:stance X[M] EmitTo( $actor, dump_value( args ));\n > stand on floor\n ([ \"actor\":<Marrach:players:K:kalle>, \"current-action\":\"stance\", \n <B>\"prep\":8, \"stance\":5, \"target\":(43)O(/base/data/nref#-1, \n <Marrach:Coders:kalle:rooms:home>, \"floor\")</B>, \n \"targets\":(43)O(/base/data/nref#-1, \n &lt;Marrach:Coders:kalle:rooms:home>, \"floor\"), \n \"this\":&lt;Marrach:players:K:kalle>, \"witnesses\":({ \n &lt;Marrach:Coders:kalle:rooms:home>, ({ }) }) ])\n ---\n\nLovely, we have \\$prep which is the preposition. We have \\$stance (which\nwe won\\'t use) which is the stance, and we have \\$target which is the\nproximity target. For entertainment value, there is a set of constants\nreadily available in Merry for these values,\n\n\\* PREP\\_\\<PREPOSITION\\>\n\nE.g. PREP_ON is 8, PREP_UNDER is 4, etc. A heck, here\\'s a complete\nlist:\n\n --------------- --------------------- -------------------\n **constant** **preposition** **integer value**\n PREP_AGAINST against 2\n PREP_BEFORE before, in front of 2048\n PREP_BEHIND behind 1024\n PREP_BESIDE beside 4096\n PREP_CLOSE_TO close to 1\n PREP_INSIDE inside 16\n PREP_NEAR near 256\n PREP_ON on 8\n PREP_OVER over 512\n PREP_UNDER under 4\n --------------- --------------------- -------------------\n\nThough, we won\\'t need those. :)\n\nWhat we need to do, though is to based on these three values, **prep**,\n**stance** and **target** found in the rider\\'s act:stance, and force\nthe mount (i.e. the horse, in this case) to perform them instead of the\nactor. That\\'s easy, though. Let\\'s see what would/should happen then:\n\n[Continue.](NIPRefLibraries1.3)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries12.md","path":"docs/unedited/NIPRefLibraries12.md","url":"/docs/unedited/NIPRefLibraries12.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054920225\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries12\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.3: Fine-tuning the aforementioned imagined scenarios.\\</H2\\>\n\n ---\n > stand beside gunther \n [act:approach; horse is already near Gunther, so nothing really \n happens here]\n [act:stance; (in rider), blow the action off and instead tell the horse to perform the stance action]\n A heroic-looking horse stands beside Gunther.\n\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are sitting on a heroic-looking horse.\n ---\n\nOkay, that\\'s settled. How about the traveling through environments (aka\nleaving a room) part?\n\n --- unmodified, this is what I presume will happen as things are now ---\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are sitting on a heroic-looking horse.\n\n > go north\n [my approach script]\n A heroic-looking horse approaches the north exit.\n You leave through the north exit.\n\n Another place which exists only in Kalle's mind.\n You are standing near the south exit.\n ---\n\nAh. Kay. So the horse is still standing south of here with Gunther.\nThat\\'s no good.\n\nSo, we tweak act:stance in the rider. We add in,\n\n\\* A quick delay (100 ms) \\* And then we teleport the NPC to the rider,\nstand the NPC where the rider\\'s standing, and drop the rider on the NPC\nagain.\n\nFair enough,\n\n ---\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are sitting on a heroic-looking horse.\n\n > go north\n [my approach script]\n A heroic-looking horse approaches the north exit.\n [my act:stance script, delay (100 ms)...]\n You leave through the north exit.\n [... delay done, teleport the horse to the rider, put the horse where the rider is standing, put the rider on the horse again]\n Another place which exists only in Kalle's mind.\n A heroic-looking horse is standing near the south exit. You are sitting on a heroic-looking horse.\n ---\n\nNow before we start making any code, let\\'s look at one more thing:\n\n ---\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are sitting on a heroic-looking horse.\n\n > leave\n You move away from a heroic-looking horse.\n\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are standing near here.\n ---\n\nAh. Hm. Now we have two ways of dealing with this\\...\n\n\\* We can either decide that \\'leave\\' means dismounting. But I don\\'t\nlike that idea, because it should be possible to \\\"control\\\" the mount\nwithout having to skip off it all the time. \\* Or, we simply do as we\ndid with approach. The horse performs a \\\"leave\\\" and the rider is put\nback on the horse immediately.\n\nI\\'m going for \\#2 \\-- the approach clone.\n\n ---\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing beside Gunther. You are sitting on a heroic-looking horse.\n\n > leave\n A heroic-looking horse moves away from Gunther.\n\n > look\n A test place.\n Gunther is standing near the north exit. A heroic-looking horse is \n standing near here. You are sitting on a heroic-looking horse.\n ---\n\nOkay, I deem this idea ready to be created, so I go ahead and write up\nthe [NIPTodoMounting](NIPTodoMounting) TWiki-page, for good measure. :)\n\n[Continue.](NIPRefLibraries1.4)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries13.md","path":"docs/unedited/NIPRefLibraries13.md","url":"/docs/unedited/NIPRefLibraries13.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054920404\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries13\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.4: Brief summary of the scripts we will eventually make.\\</H2\\>\n\nNow that that\\'s done, it\\'s actually time to start doing something with\nall of this. I\\'m going to write a few specs for the individual scripts\nand the individual libraries (there are, as you may have seen in the\ntodo, going to be two separate libs):\n\n\\-\\-- **act:approach** in lib **mountrider** \\-\\--\n\nThis script will deal with the aspect of when the rider tries to move\naround **inside a room**, e.g. approaching someone or walking to\nsomeone, etc. This script will,\n\n\\* Force the NPC to perform the approach instead of the actor, \\* Give\noff a mini-delay (100 ms) in case the actor tried to perform a stance.\n\\* Abort the actor\\'s approach.\n\n\\-\\-- **act:leave** in lib **mountrider** \\-\\--\n\nThis script will deal with \\'leaving\\' as act:approach above deals with\n\\'approaching\\'.\n\n\\* Force the NPC to perform the \\'leave\\' instead of the actor, \\* Abort\nthe actor\\'s leave (no risk for stances so we can skip the delay).\n\n\\-\\-- **act:stance** in lib **mountrider** \\-\\--\n\nThis script will deal with the aspect of taking a new preposition in\nrelation to the environment, e.g. \\\"standing beside gunther\\\" or\n\\\"standing in front of the gate\\\". This script will,\n\n\\* Extract the preposition and target from the arguments sent to\nact:stance, \\* Send these arguments to the NPC and force it to perform\nits own act:stance based upon them, \\* Abort the actor\\'s stance-change.\n\n\\-\\-- **act:lower** in lib **mountrider** \\-\\--\n\nThis script will dismount someone who types \\\"lower\\\" and is currently\nmounting an NPC.\n\n\\-\\-- **react:jump-dob** in lib **mounting** \\-\\--\n\nThis script will make a person mount the NPC in question and will set\nthe appropriate inherits.\n\n\\* Check if anyone\\'s already on the NPC. Currently, we\\'re not going to\naddress the issue of several people mounting the same NPC, but that is\nsomething we\\'ll get at later. Not now. \\* If someone is mounting the\nNPC, emit an error and abort the action. \\* Otherwise, put the actor on\nthe NPC and set the merry inherits in the actor to the act:-scripts\nmentioned above, in the **mountrider** lib. \\* Also make sure the NPC\nsets the \\\"mounted\\\" value to 1 (one mounting) to make the check at the\ntop work right.\n\n------------------------------------------------------------------------\n\nTime to go ahead and do this, then:\n\nI start off by making a silly horse, as that\\'s the most appropriate\nexample I can think of. After making the horse in woe, I summon it and\nadd in the basic NPC stuff,\n\n ---\n > +summon Marrach:Coders:kalle:NPC:stallion\n A horse arrives.\n\n > +nip 'set Marrach:Coders:kalle:NPC:stallion'\n WELCOME TO THE 'NIP' CNPC SYSTEM!\n\n Hold one moment while the core library is set up in &lt;Marrach:Coders:kalle:NPC:stallion> ...\n --> Implementing base.\n --> Adding base libraries.\n --> Inserting system signals.\n Done!\n ---\n\nOkay, the horse is using the NPC system now.\n\n[Time to create one of the libraries.](NIPRefLibraries1.5)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries14.md","path":"docs/unedited/NIPRefLibraries14.md","url":"/docs/unedited/NIPRefLibraries14.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054834140\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries14\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.5: Time to create one of the libraries.\\</H2\\>\n\nLet\\'s create one of the libraries, by\n\n\\* Cloning **Core:PropertyContainer** in woe. \\* Renaming it to\n**Marrach:Lib:NIP:lib:mountrider**.\n\nNow, you ask, how on earth did I know what to call it? There are a few\nrules in the NPC system, as defined in\n\\<<Data:NIP:system>\\>.**lib_path**. Specifically, this is the route the\nsystem will take to find an object I am requesting, and this is also\ndependant on what theatre I belong to.\n\nThus, when I want to do something to a library through the NPC system,\nthe system will look for that library in the following order:\n\n ---\n Lib:NIP:base:lib:<B>&lt;library></B>\n Lib:NIP:base:hooks:<B>&lt;library></B>\n Lib:NIP:base:signals:<B>&lt;library></B>\n (game):Lib:NIP:lib:<B>&lt;library></B>\n (game):Lib:NIP:hooks:<B>&lt;library></B>\n (game):Lib:NIP:signals:<B>&lt;library></B>\n (game):Lib:NIP:<B>&lt;library></B>\n (game):NIP:lib:<B>&lt;library></B>\n (game):NIP:hooks:<B>&lt;library></B>\n (game):NIP:signals:<B>&lt;library></B>\n (game):NIP:<B>&lt;library></B>\n Lib:NIP:lib:<B>&lt;library></B>\n Lib:NIP:hooks:<B>&lt;library></B>\n Lib:NIP:signals:<B>&lt;library></B>\n Lib:NIP:<B>&lt;library></B>\n ---\n\nThus, if you belong to the Devil\\'s Cay theatre,\n\n ---\n > +stat me \"property:theatre:id\"\n -- Properties (theatre:id)--\n Property: theatre:id = \"DevilsCay\"\n >\n ---\n\n\\- the system scan would be:\n\n ---\n Lib:NIP:base:lib:<B>&lt;library></B>\n Lib:NIP:base:hooks:<B>&lt;library></B>\n Lib:NIP:base:signals:<B>&lt;library></B>\n DevilsCay:Lib:NIP:lib:<B>&lt;library></B>\n DevilsCay:Lib:NIP:hooks:<B>&lt;library></B>\n DevilsCay:Lib:NIP:signals:<B>&lt;library></B>\n DevilsCay:Lib:NIP:<B>&lt;library></B>\n DevilsCay:NIP:lib:<B>&lt;library></B>\n DevilsCay:NIP:hooks:<B>&lt;library></B>\n DevilsCay:NIP:signals:<B>&lt;library></B>\n DevilsCay:NIP:<B>&lt;library></B>\n Lib:NIP:lib:<B>&lt;library></B>\n Lib:NIP:hooks:<B>&lt;library></B>\n Lib:NIP:signals:<B>&lt;library></B>\n Lib:NIP:<B>&lt;library></B>\n ---\n\nNow that we have our library in place, let\\'s create the other right\naway (\\'mounting\\').\n\n\\* Clone **Core:PropertyContainer** in woe. \\* Rename it to\n**Marrach:Lib:NIP:lib:mounting**.\n\n(Of course, in your case, that would be\n**Whatever-theatre-you\\'re-on**:Lib:NIP:\\...)\n\nNow, the **mounting** library will actually be loaded into the NPC. The\n**mountrider** won\\'t. It will contain the scripts that the rider will\ninherit when he mounts the NPC. But let\\'s try to add the \\'mounting\\'\nlib to the NPC now (and introduce one of the other +nip-functions while\nwe\\'re at it! :).\n\n ---\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n &lt;Marrach:Lib:NIP:lib:mounting> loaded successfully.\n\n > +nip horse \"list\"\n NIP in &lt;Marrach:Coders:kalle:NPC:stallion>:\n ---------------------------------------------------------------\n Libraries:\n - &lt;Lib:NIP:base:lib:signals>\n - &lt;Lib:NIP:base:lib:hooks>\n - &lt;Lib:NIP:base:lib:stream>\n - &lt;Lib:NIP:core>\n - &lt;Lib:NIP:base:signals:DELAY>\n - &lt;Lib:NIP:base:signals:DECIDE>\n - &lt;Lib:NIP:base:signals:INTERNAL>\n <B>- &lt;Marrach:Lib:NIP:lib:mounting></B>\n\n Signals:\n - \"DELAY\" [PRIORITY 10]\n - \"INTERNAL\" [PRIORITY 500]\n - \"DECIDE\" [PRIORITY 1000]\n\n Hooks:\n - decide: &lt;Lib:NIP:base:hooks:decide>\n - delay: &lt;Lib:NIP:base:hooks:delay>\n - internal: &lt;Lib:NIP:base:hooks:internal>\n\n End.\n ---\n\nAs you see at the bold line above, the library was loaded fine. Nothing\nhappened though, and it\\'s only there \\\"in the papers\\\". It makes no\ndifference whatsoever. Not yet.\n\n[Time to start writing code.](NIPRefLibraries1.6)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries15.md","path":"docs/unedited/NIPRefLibraries15.md","url":"/docs/unedited/NIPRefLibraries15.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1202983341\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries15\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.6: Time to start writing code.\\</H2\\>\n\nLet\\'s go in and create the script we gave a brief spec above,\nreact:jump-dob in the \\'mounting\\' lib,\n\n <B>--- Marrach:Lib:NIP:lib:mounting/react:jump-dob ---</B>\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nOkay, goody. Before we can try this, however, we need to set the\nproperty **init:merry** in **Marrach:Lib:NIP:lib:mounting**. This\nproperty controls which scripts should be inherited when the library is\nloaded. We can do this from the parser (using setp) or through woe. I do\nit from woe, it\\'s faster, but unless you know what you\\'re doing, you\nmay break something that way.\n\n ---\n > +setp \"Marrach:Lib:NIP:lib:mounting init:merry ({ \"react:jump-dob\" })\"\n Setting 'init:merry' in &lt;Marrach:Lib:NIP:lib:mounting>;\n - from: nil\n - to: ({ \"react:jump-dob\" })\n ---\n >\n\nNow that we\\'re all set, we need to load the library in the horse again,\n\n ---\n > +setp horse \"add mounting\"\n Setting 'add' in &lt;Marrach:Coders:kalle:NPC:stallion>;\n - from: nil\n - to: \"mounting\"\n Attempting to add library ...\n &lt;Marrach:Lib:NIP:lib:mounting> loaded successfully.\n\n > +stat horse \"property:merry:inherit:react:*\n -- Properties (merry:inherit:react:*)--\n Property: merry:inherit:react:jump-dob = &lt;Marrach:Lib:NIP:lib:mounting>\n ---\n\nSplendid! Let\\'s try it out.\n\n ---\n > jump horse\n You mount a horse.\n\n > +stat me \"property:npc:*\n -- Properties (npc:*)--\n Property: npc:mounting = &lt;Marrach:Coders:kalle:NPC:stallion>\n ---\n\nNice! As you see, we got that \\'npc:mounting\\' property as the script\nsaid we should. Before we continue working on that script, though,\nwe\\'re going to need to put some of those **mountrider** act-scripts\ninto reality.\n\n[Creating the act:approach script](NIPRefLibraries1.7)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries16.md","path":"docs/unedited/NIPRefLibraries16.md","url":"/docs/unedited/NIPRefLibraries16.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055125353\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries16\\\"}%\n[NIPRefStyle]{.twiki-macro .INCLUDE}\n\n[MerryColorStyles]{.twiki-macro .INCLUDE}\n\n[NIPRefLibrariesTOC]{.twiki-macro .INCLUDE}\n\n\\<H2\\>1.7: Creating the act:approach script.\\</H2\\>\n\n --- <B>act:approach</B> in <B>Marrach:Lib:NIP:lib:mountrider</B> ---\n <M_COM>/*\n\n D=Approach script, inherited whenever someone mounts an NPC, which deals with movement issues within rooms.\n\n */</M_COM>\n\n <M_COM>/* Instantly put the character in proximity to whatever he's attempting to approach, */</M_COM>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$what</M_VARS><M_CCS>;</M_CCS>\n\n <M_COM>/* Force the NPC (which is referred to through 'npc:mounting' in the actor) to perform the approach too. */</M_COM>\n Act<M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT><M_CCS>,</M_CCS> <M_TXT>\"approach\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_VARS>$what</M_VARS> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Quick 100 ms delay, */</M_COM>\n <M_VARS>$delay</M_VARS><M_CCS>(</M_CCS> 0<M_CCS>.</M_CCS>1, FALSE <M_CCS>)</M_CCS>;\n\n <M_COM>/* And then put the rider back on the mount */</M_COM>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:proximity\"</M_TXT> = <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT>;\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n ---\n\nNow that we have that script dealt with, let\\'s go back and look at the\n**react:jump-dob**-script in **mounting** again.\n\n**Bold areas are new and/or modified segments of the code**\n\n --- <B>react:jump-dob</B> in <B>Marrach:Lib:NIP:lib:mounting</B> ---\n <M_COM>/*\n\n D=This script deals with mounting an NPC.\n\n */</M_COM>\n\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Someone is mounting the NPC already... */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You can't mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS>this<M_CCS>)</M_CCS>+<M_TXT>\" as \"</M_TXT>+this<M_CCS>.</M_CCS><M_TXT>\"trait:nominative\"</M_TXT>+<M_TXT>\" is already being mounted.\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS>\n\n <B><M_COM>/* Let's also check if the actor is mounting something currently */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS> <M_COM>/* Actor is already mounting something. */</M_COM>\n <M_RVD>if</M_RVD><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT> == this <M_CCS>)</M_CCS> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting this NPC already! */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS> <M_RVD>else</M_RVD> <M_CCS>{</M_CCS> <M_COM>/* Actor is mounting something else. */</M_COM>\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You are already mounting \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT> <M_CCS>)</M_CCS>+<M_TXT>\"!\"</M_TXT> <M_CCS>)</M_CCS>;\n <M_FUN>return</M_FUN> FALSE<M_CCS>;</M_CCS>\n <M_CCS>}</M_CCS></B>\n\n <M_COM>/* If we get here, the NPC isn't mounted. Let's print some pretty message describing what happens, */</M_COM>\n\n <M_FUN>EmitIn</M_FUN><M_CCS>(</M_CCS> this<M_CCS>.</M_CCS><M_TXT>\"base:environment\"</M_TXT><M_CCS>,</M_CCS> <M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>+<M_TXT>\" mounts \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$actor</M_VARS> <M_CCS>)</M_CCS>;\n <M_FUN>EmitTo</M_FUN><M_CCS>(</M_CCS> <M_VARS>$actor</M_VARS><M_CCS>,</M_CCS> <M_TXT>\"You mount \"</M_TXT>+<M_FUN>Describe</M_FUN><M_CCS>(</M_CCS> this <M_CCS>)</M_CCS>+<M_TXT>\".\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <B><M_COM>/* ... and put the rider ON the NPC */</M_COM>\n\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:proximity\"</M_TXT> = this<M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:stance\"</M_TXT> = <M_CON>STANCE_SIT</M_CON><M_CCS>;</M_CCS>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"base:preposition\"</M_TXT> = <M_CON>PREP_ON</M_CON><M_CCS>;</M_CCS>\n\n <M_COM>/* Let's inherit the approach-script we made earlier, in mountrider ... */</M_COM>\n\n <M_COM>/* First, we gotta figure out where the mountrider object is. */</M_COM>\n <M_VARS>$mountrider</M_VARS> = Call<M_CCS>(</M_CCS> this<M_CCS>,</M_CCS> <M_TXT>\"find_nip_object\"</M_TXT><M_CCS>,</M_CCS> <M_VARS>$what</M_VARS>: <M_TXT>\"mountrider\"</M_TXT> <M_CCS>)</M_CCS>;\n\n <M_COM>/* Then we inherit away! */</M_COM>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"merry:inherit:act:approach\"</M_TXT> = <M_VARS>$mountrider</M_VARS><M_CCS>;</M_CCS>\n\n <M_COM>/* And we set the 'npc:mounted' property in the NPC to 1 to signal that we're mounted. */</M_COM>\n this<M_CCS>.</M_CCS><M_TXT>\"npc:mounted\"</M_TXT> = 1<M_CCS>;</M_CCS></B>\n\n <M_COM>/* And finally, let's set a \"npc:mounting\" property in the actor (the rider, not the horse) to the horse object reference (this) */</M_COM>\n <M_VARS>$actor</M_VARS><M_CCS>.</M_CCS><M_TXT>\"npc:mounting\"</M_TXT> = this<M_CCS>;</M_CCS>\n ---\n\nWe\\'ve added in three major things now. Firstly, the check to see if the\nactor is already riding something else. Secondly, the actual \\\"putting\nthe rider on the mount\\\". And thirdly, the actual inheritage of the\napproach script. We\\'re going to optimize that a little later on (the\ncall to \\\"find_nip_object\\\" is unnecessary **every** time someone mounts\nthe NPC), but we\\'ll leave it as is for now.\n\nThis time, we haven\\'t **added** any scripts. That means we can mount\nagain without having to re-add the library in the NPC.\n\n ---\n > jump horse\n You are already mounting a horse!\n\n > smile \"Great, that works!\"\n You smile, \"Great, that works!\"\n\n > +setp me \"npc:mounting nil\"\n Setting 'npc:mounting' in &lt;Marrach:players:K:kalle>;\n - from: &lt;Marrach:Coders:kalle:NPC:stallion>\n - to: nil\n\n > jump horse\n You mount a horse.\n\n > +stat horse \"property:npc:*\"\n -- Properties (npc:*)--\n Property: npc:mounted = 1\n\n > +stat me \"property:npc:*\"\n -- Properties (npc:*)--\n Property: npc:mounting = &lt;Marrach:Coders:kalle:NPC:stallion>\n\n > approach floor\n A horse approaches the floor.\n\n > look \n [general description]\n\n StoryCoder Skylar is standing near here. You are sitting on a horse. A horse is standing near the floor.\n\n > step to skylar\n StoryCoder Skylar allows you to step her.\n\n A horse moves from the floor to StoryCoder Skylar.\n You step to StoryCoder Skylar.\n\n A horse steps to StoryCoder Skylar.\n <B>Hmm...</B>\n ---\n\nOkay, we\\'re finally getting somewhere! Still have some issues to deal\nwith though. Like the fact I and the horse approached Skylar. This is an\nunpexpected occurance, but we will ignore it for now. Instead, we\\'re\ngoing to look into dismounting the NPC. The script, act:lower, in the\n**mountrider** library, is going to deal with this.\n\n[The act:lower script, a.k.a dismounting the mount.](NIPRefLibraries1.8)\n\n\\-- Main.KalleAlm - 05 Jun 2003\n","dir":"/docs/unedited/","name":"NIPRefLibraries17.md","path":"docs/unedited/NIPRefLibraries17.md","url":"/docs/unedited/NIPRefLibraries17.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055113350\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% \\<OL TYPE=\\\"1\\\"\\> \\<LI\\>[How to create your own NPC\nlibrary](NIPRefLibraries)\\<OL TYPE=\\\"1\\\"\\> \\<LI\\>[So, you have the\nidea\\...](NIPRefLibraries1.1)\\</LI\\> \\<LI\\>[Imagining up a few\nscenarios.](NIPRefLibraries1.2)\\</LI\\> \\<LI\\>[Fine-tuning the\naforementioned imagined scenarios.](NIPRefLibraries1.3)\\</LI\\>\n\\<LI\\>[Brief summary of the scripts we will eventually\nmake.](NIPRefLibraries1.4)\\</LI\\> \\<LI\\>[Time to create one of the\nlibraries.](NIPRefLibraries1.5)\\</LI\\> \\<LI\\>[Time to start writing\ncode.](NIPRefLibraries1.6)\\</LI\\> \\<LI\\>[Creating the act:approach\nscript.](NIPRefLibraries1.7)\\</LI\\> \\<LI\\>[Creating the act:lower\nscript, a.k.a. dismounting the mount.](NIPRefLibraries1.8)\\</LI\\>\n\\<LI\\>[Let\\'s go back and look at \\'react:jump-dob\\'\nagain,](NIPRefLibraries1.9)\\</LI\\> \\<LI\\>[The three remaining\nscripts.](NIPRefLibraries1.10)\\</LI\\> \\<LI\\>[Tweaking a\nbit.](NIPRefLibraries1.11)\\</LI\\> \\<LI\\>[The revised\ncode.](NIPRefLibraries1.12)\\</LI\\> \\<LI\\>[Tweaking it a final\ntime.](NIPRefLibraries1.13)\\</LI\\> \\<LI\\>[Modifications to the\ncode.](NIPRefLibraries1.14)\\</LI\\>\\</OL\\>\\</LI\\>\\</OL\\>\n","dir":"/docs/unedited/","name":"NIPRefLibrariesTOC.md","path":"docs/unedited/NIPRefLibrariesTOC.md","url":"/docs/unedited/NIPRefLibrariesTOC.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055523031\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% \\<style\\> b { font-weight: bold; } A {\ntext-decoration: none; font-size: 11pt; color: \\#0000ff; } .title {\nfont-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPRefStyle.md","path":"docs/unedited/NIPRefStyle.md","url":"/docs/unedited/NIPRefStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054851821\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { color: \\#000000; font-weight: bold; } A { text-decoration:\nnone; font-size: 11pt; color: \\#0000ff; } .title { font-size: 20pt;\nfont-weight: bold; color: \\#000000; } \\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>Script naming rules and meaning\\</FONT\\>\n\nQuickly, the NPC will begin to hoard up scripts.\n\n > +tool merry list %Marrach:players:G:gruffle\n Merry code found in Marrach:players:G:gruffle:\n <B>Inherited from Lib:NIP:base:hooks:delay:</B>\n lib:delay:delay-exec\n lib:delay:delay-init\n <B>Inherited from Lib:NIP:base:hooks:decide:</B>\n lib:decide:decide-exec\n lib:decide:decide-init\n lib:decide:decide-post\n <B>Inherited from Lib:NIP:base:lib:signals:</B>\n lib:calc_sighookpath\n lib:modify:signals\n setprop-post:signal\n <B>Inherited from Lib:NIP:lib:offers:</B>\n lib:core:add_offer\n lib:core:sub_offer\n react-post:offer-to\n <B>Inherited from Lib:NIP:signals:MOOD:</B>\n lib:core:add_mood\n lib:core:sub_mood\n <B>Inherited from Lib:NIP:lib:emoting:</B>\n lib:emoting:decide\n <B>Inherited from Lib:NIP:hooks:mood:</B>\n lib:mood:delay\n lib:mood:mood-exec\n lib:mood:mood-init\n <B>Inherited from Lib:NIP:base:signals:DECIDE:</B>\n setprop-post:decide\n <B>Inherited from Lib:NIP:lib:happiness:</B>\n lib:happiness:mood\n <B>Inherited from Lib:NIP:lib:eating:</B>\n act:eat\n lib:eating:decide\n lib:eating:internal\n lib:eating:mood\n lib:handler:offer:eating\n <B>Inherited from Lib:NIP:base:lib:hooks:</B>\n lib:core:find-hook\n lib:core:register-hook\n lib:core:unregister-hook\n lib:modify:hooks\n setprop-post:hook\n <B>Inherited from Lib:NIP:core:</B>\n lib:core:merry_add\n lib:core:merry_delete\n lib:find_nip_object\n lib:heartbeat\n lib:modify:libraries\n setprop-post:add\n setprop-post:del\n setprop-post:delete\n setprop-post:sub\n <B>Inherited from Lib:NIP:lib:anger:</B>\n lib:anger:mood\n <B>Inherited from Lib:NIP:lib:sleeping:</B>\n lib:act:sleep:state\n lib:handler:state:awake\n lib:handler:state:sleep\n lib:sleeping:decide\n lib:sleeping:delay\n lib:sleeping:internal\n lib:sleeping:mood\n <B>Inherited from Lib:NIP:base:lib:stream:</B>\n setprop-post:sigexecptr\n <B>Inherited from Lib:NIP:base:hooks:internal:</B>\n lib:internal:internal-exec\n\nWhich is, admittedly, a lot of scripts. Thankfully, we don\\'t need to\ncare about the majority of those, and thankfully, most of them are very\nsmall.\n\nNow, since there are so many scripts, we can\\'t just go in and make a\nscript called lib:kalles:script without thinking. What if someone else\nmade a lib:kalles:script for his NPC. What if he then happily adds the\nlib I put lib:kalles:script in to his own NPC?\n\nSome form of control was necessary, and thus the following set of groups\nand rules have been decided upon:\n\n**Groups:**\n\nThere are four set groups:\n\n\\* **lib:core:\\***\\<UL\\>Core add-ons for libraries, hooks and signals.\nSuch as add_offer/sub_offer (from library \\'offers\\') or\nadd_mood/sub_mood (from signal \\'MOOD\\'). These are usually related to\nthe management or configuration of the system, rather than having a real\nimpact on the NPC \\\"in-game\\\".\\</UL\\> \\*\n**lib:handler:\\***\\<UL\\>Internal scripts, less core, named\n\\\"feature:action\\\". Such as handler:offer:eating (from \\'offers\\') or\nhandler:state:awake/sleep (from \\'sleeping\\'). These scripts are usually\nrelated to in-game actions or issues, such as waking up/falling asleep\nor acting on a react-post:offer-to trigger.\\</UL\\> \\*\n**lib:command:\\***\\<UL\\>The lib:command:\\*-scripts are called from the\n[commanding](NIPLibRefCommanding) library as a part of the command chain\nsolution.\\</UL\\> \\* **lib:\\***\\<UL\\>Reserved for system functions and\n*hook:signal* functions.\\</UL\\>\n\n\\-- Main.KalleAlm - 01 Jun 2003\n","dir":"/docs/unedited/","name":"NIPScriptGroups.md","path":"docs/unedited/NIPScriptGroups.md","url":"/docs/unedited/NIPScriptGroups.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1054662957\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { font-size: 12pt; color: \\#000000; font-weight: bold; } A {\ntext-decoration: none; font-size: 11pt; color: \\#0000ff; } .title {\nfont-size: 20pt; font-weight: bold; color: \\#000000; } \\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>What is a signal?\\</FONT\\>\n\n**A signal** (in NIP) contains two things: \\* a name (signal identifier)\n\\* a priority value\n\nThese are the current base signals loaded into every default system:\n\n ------------ -------------- ------------------------------------------------------------ -------------------------------\n **SIGNAL** **PRIORITY** **DESCRIPTION** **LOCATION**\n DECIDE 1000 Decide if NPC should act, and what it should do Lib:NIP:base:signals:DECIDE\n DELAY 10 Determine (and perform) the pause between each \\\"thought\\\" Lib:NIP:base:signals:DELAY\n INTERNAL 500 Perform any/all internal operations Lib:NIP:base:signals:INTERNAL\n ------------ -------------- ------------------------------------------------------------ -------------------------------\n\nNow, as you can see in the descriptions above, the signals each are\nresponsible for a certain section of the NPC. New signals may be added\n(see Lib:NIP:signals:MOOD for example), signals may at any time be\nmodified or removed entirely, all at the whim of the creator.\n\nSignals are usually embedded into libraries which take care of the\nadd/delete signal aspects. Usually (but not necessarily), signals also\nload a hook, by tradition one with the same name (except in all\nlowercase letters \\-- signal \\\"DELAY\\\" for example, loads hook\n\\\"delay\\\", etc).\n\nSignals are not physical objects. The libraries which add signals are\nusually called \\'signals\\' for sake of clarification.\n\nHere is a snippet from the documentation in which the manual addition of\nsignals is described:\n\n ---\n Syntax: +setp [target] \"signal &lt;SIGNAL-ID> [&lt;SIGNAL-PRIORITY>]\" \n If SIGNAL-PRIORITY is not set, the signal \n in question will be REMOVED. \n \n Example: +setp dog \"signal DELAY 1\" (add) \n +setp cat \"signal BARK\" (delete) \n ---\n\nSignals cooperate closely with hooks. In fact, one couldn\\'t work\nwithout the other. While the signals simply specify the order of\nexecution, the hooks contain all the code.\n\nFor example, in the \\'eating\\' library (which contains the \\'eating\\'\nhook), the following hook scripts reside:\n\n ---\n lib:eating:decide Dependant on the DECIDE signal\n lib:eating:internal Dependant on the INTERNAL signal\n lib:eating:mood Dependant on the MOOD signal\n ---\n\nAs the DECIDE and INTERNAL signals are default, we can safely presume\nthat both the lib:eating:decide script, and the lib:eating:internal\nscript will be executed each time the system performs its loop.\n\nBut how do we determine in which order they are called?\n\nAs we previously said, each signal is set up of an identifier and a\npriority. \\<br\\> Whenever the signal/hook set up is changed, the system\nautomatically performs the signal/hook path calculation, which sets up\nan array of scripts to keep looping through. In the above case, the\nsignal/hook path would look like this:\n\n\\* 1: lib:eating:internal *(INTERNAL, priority 500)* \\* 2:\nlib:eating:decide *(DECIDE, priority 1000)*\n\nBut wait! There was that third script, lib:eating:mood, too. Let\\'s look\nat that signal:\n\n ------------ -------------- ----------------------------------- ----------------------\n **SIGNAL** **PRIORITY** **DESCRIPTION** **LOCATION**\n MOOD 100 Ensure the NPC mood is up to date Lib:NIP:signals:MOOD\n ------------ -------------- ----------------------------------- ----------------------\n\nOkay, the priority for MOOD is 100, which would turn the\nsignal/hook-path into:\n\n\\* 1: lib:eating:mood *(MOOD, priority 100)* \\* 2: lib:eating:internal\n*(INTERNAL, priority 500)* \\* 3: lib:eating:decide *(DECIDE, priority\n1000)*\n\nIf the MOOD signal is present, the lib:eating:mood script will be\nexecuted (of course, providing the \\'eating\\' hook is present as well).\nBut if the MOOD signal isn\\'t there, the lib:eating:mood script won\\'t\neven be loaded into the NPC. \\<br\\> This is all dealt with automatically\nby the system.\n\n\\\"So,\\\" you ask, \\\"What\\'s it **good** for?\\\"\\<br\\> Well, first off,\nit\\'s incredibly dynamic. You can practically go in and modify each and\nevery little part of the system without having to re-write bunches of\ncode. It\\'s also proven very efficient, and although the amount of\nscripts is higher than in the average object, the structure and layout\nis usually much cleaner and easier to supervise.\\<BR\\> Once the concept\nof signals and hooks is clear, it\\'s easy to set up, configure and\ncustomize an NPC. To turn a lifeless object into a fully functional NPC\nthat eats, sleeps, emotes, free-emotes (free emits), keeps track of a\nbunch of moods (happiness, sadness, anger, hunger, sleepiness), takes\nabout 5 minutes (whereas 4 minutes and 30 seconds goes into creating the\nbehavior database):\n\n ---\n > +summon Marrach:Coders:kalle:battle-axe\n A battle axe arrives.\n > +nip 'set Marrach:Coders:kalle:battle-axe\n WELCOME TO THE 'NIP' CNPC SYSTEM!\n\n Hold one moment while the core library is set up in &lt;Marrach:Coders:kalle:battle-axe> ...\n --> Implementing base.\n --> Adding base libraries.\n --> Inserting system signals.\n Done!\n > +setp axe \"add offers\n > +setp axe \"add eating\n > +setp axe \"add sleeping\n > +setp axe \"add MOOD\n > +setp axe \"add happiness\n > +setp axe \"add anger\n > +setp axe \"add sadness\n > +setp axe \"add emoting\n > +setp axe \"add freemoting\n ---\n\nThe NPC now has all the features mentioned above. The operation took\nabout 20 seconds. [Click here](NIPHowRecord) to see how to record\nbehavior.\n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPSignal.md","path":"docs/unedited/NIPSignal.md","url":"/docs/unedited/NIPSignal.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092848742\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>Signals; technical summary\\</font\\>\n\nSignals are really just extended libraries. They have a few more\nfeatures and are expected to contain a signal identifier. In general,\nsignals are defined as signals by giving them an ALL-CAPS NAME.\n\nThat is, a signal for \\\"hunting\\\" should be called \\\"HUNTING\\\", not\n\\\"hunting\\\" or \\\"Hunting\\\".\n\nAgain, be aware that all features available in libraries, are also\navailable to signals. Check out the [libraries; technical\nsummary](NIPSummaryLibraries) page for further information.\n\nThe following properties are available to all signals:\n\n ------------------- --------------------------------------------------- -----------------------------------------------------------------------------\n **Property-name** **Property-type** **Description**\n init:signals (\\[ \\\"*\\<identifier\\>\\\" : *numeric priority** \\]) A list of signals that should be inherited, with preferred signal priority.\n ------------------- --------------------------------------------------- -----------------------------------------------------------------------------\n\n\\-- Main.KalleAlm - 25 Nov 2003\n","dir":"/docs/unedited/","name":"NIPSummarySignals.md","path":"docs/unedited/NIPSummarySignals.md","url":"/docs/unedited/NIPSummarySignals.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1068891300\\\" format=\\\"1.0\\\"\nversion=\\\"1.10\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<style\\> b { font-size: 10pt; font-weight: bold; } A { text-decoration:\nnone; font-size: 11pt; color: \\#0000ff; } .title { font-size: 20pt;\nfont-weight: bold; color: \\#000000; } ROOT { color: \\#ff0000;\nfont-weight: bold; font-size: 12pt; } REQ { color: \\#ff0000;\nfont-weight: bold; } SUPP { color: \\#00dd00; font-weight: bold; }\n\\</style\\>\n\n\\<FONT CLASS=\\\"title\\\"\\>System map\\</FONT\\>\n\n <TABLE BORDER=0 CELLSPACING=0 CELLPADDING=3>\n <TR><TD><B>OBJECT</B></TD> <TD><B>DESCRIPTION</B></TD> <TD><REQ>REQ</REQ></TD> <TD><SUPP>SUPPORTS</SUPP></TD> </TR>\n\n <TR><TD><ROOT>Data:NIP</ROOT></TD><TD>- <ROOT>System and user data</ROOT></TD></TR>\n <TR><TD> NCS</TD><TD>- NIP Communications System data</TD></TR>\n <TR><TD> functions</TD><TD>- Function link for the +nip command</TD></TR>\n <TR><TD> system</TD><TD>- System configuration</TD></TR>\n <TR><TD> <B>behavior</B></TD><TD>- Behavior databases</TD></TR>\n <TR><TD> bert</TD><TD>- example DB</TD></TR>\n <TR><TD> gruffle</TD><TD>- example DB</TD></TR>\n <TR><TD> livestatue</TD><TD>- example DB</TD></TR>\n <TR><TD> phoenix</TD><TD>- example DB</TD></TR>\n <TR><TD> snuggles</TD><TD>- example DB</TD></TR>\n <TR><TD> <B>musicians</B></TD><TD>- Marrach musicians example folder</TD></TR>\n <TR><TD>&nbsp;</TD></TR>\n <TR><TD><ROOT>Lib:NIP</ROOT></TD><TD>- <ROOT>Core system plus libs, signals and hooks</ROOT></TD></TR>\n <TR><TD> NCS</TD><TD>- NCS (NIP Communications System).</TD></TR>\n <TR><TD> basefuns</TD><TD>- Base functions used by +NIP</TD></TR>\n <TR><TD> core</TD><TD>- The core system object</TD></TR>\n <TR><TD> updates</TD><TD>- The update revisions code.</TD></TR>\n <TR><TD> <B>EXT</B></TD><TD>- External libraries</TD></TR>\n <TR><TD> bedit</TD><TD>- Behavior editor data</TD></TR>\n <TR><TD> record</TD><TD>- The behavior record system</TD></TR>\n <TR><TD> <B>base</B></TD><TD>- Base system libraries</TD></TR>\n <TR><TD> <B>hooks</B></TD><TD>- System hooks</TD></TR>\n <TR><TD> decide</TD><TD>- The internal DECIDE signal hook</TD></TR>\n <TR><TD> delay</TD><TD>- The internal DELAY signal hook</TD></TR>\n <TR><TD> internal</TD><TD>- The internal INTERNAL signal hook</TD></TR>\n <TR><TD> <B>lib</B></TD><TD>- System libs</TD></TR>\n <TR><TD> hooks</TD><TD>- The 'hooks' system</TD></TR>\n <TR><TD> signals</TD><TD>- The 'signals' system</TD></TR>\n <TR><TD> stream</TD><TD>- Signal stream system</TD></TR>\n <TR><TD> <B>signals</B></TD><TD>- System signals</TD></TR>\n <TR><TD> DECIDE</TD><TD>- The DECIDE signal [P:1000]</TD></TR>\n <TR><TD> DELAY</TD><TD>- The DELAY signal [P:10]</TD></TR>\n <TR><TD> INTERNAL</TD><TD>- The INTERNAL signal [P:500]</TD></TR>\n <TR><TD>&nbsp;</TD></TR>\n <TR><TD> <B>hooks</B></TD><TD>- User hooks</TD></TR>\n <TR><TD> delivery</TD><TD>- The delivery hooks.</TD></TR>\n <TR><TD> mood</TD><TD>- The mood hooks (happy, sad, etc.)</TD></TR>\n <TR><TD> nip</TD><TD>- NPC Interaction Protocol hook (interaction)</TD></TR>\n <TR><TD> room-cleaning</TD><TD>- Room-cleaning hook.</TD></TR>\n <TR><TD> <B>lib</B></TD><TD>- User libraries</TD></TR>\n <TR><TD> anger</TD><TD>- NPC anger.</TD><TD><REQ>sig. MOOD</REQ></TD></TR>\n <TR><TD> asking</TD><TD>- Ask NPC for/about ...</TD><TD></TD></TR>\n <TR><TD> commanding</TD><TD>- Enable NPC heed orders</TD></TR>\n <TR><TD> courier</TD><TD>- NPC courier system</TD><TD><REQ>sig. DELIVERY; libs. offers, presents</REQ></TR>\n <TR><TD> delivery-area</TD><TD>- Delivery area.</TD><TD><REQ>sig. DELIVERY</REQ></TR>\n <TR><TD> delivery-object</TD><TD>- Delivery object.</TD><TD><REQ>sig. DELIVERY</REQ></TR>\n <TR><TD> eating</TD><TD>- NPC hunger/eating</TD><TD><REQ>lib. offers</REQ></TD><TD><SUPP>sig. MOOD</SUPP></TD></TR>\n <TR><TD> emoting</TD><TD>- NPC parser usage</TD></TR>\n <TR><TD> freemoting</TD><TD>- NPC free-emoting usage</TD></TR>\n <TR><TD> guarding</TD><TD>- NPC guarding</TD></TR>\n <TR><TD> happiness</TD><TD>- NPC happiness</TD><TD><REQ>sig. MOOD</REQ></TD></TR>\n <TR><TD> interaction</TD><TD>- Interaction</TD><TD><REQ>lib. emoting</REQ></TD></TR>\n <TR><TD> mounting</TD><TD>- (horse)backriding</TD></TR>\n <TR><TD> mountrider</TD><TD>- inherit-base for riders</TD></TR>\n <TR><TD> movement</TD><TD>- random room-movement</TD><TD></TD><TD><SUPP>lib. sleeping</SUPP></TD></TR>\n <TR><TD> musician</TD><TD>- Musicians lib. Example, live on Marrach soon</TD></TR>\n <TR><TD> offers</TD><TD>- NPC trading (receiving)</TD></TR>\n <TR><TD> presents</TD><TD>- NPC trading (giving)</TD></TR>\n <TR><TD> relations</TD><TD>- Relationship control</TD></TR>\n <TR><TD> rumours</TD><TD>- Rumour system library</TD><TD><REQ>lib. asking</TD></TR>\n <TR><TD> sadness</TD><TD>- NPC sadness</TD><TD><REQ>sig. MOOD</REQ></TD></TR>\n <TR><TD> sleeping</TD><TD>- NPC sleepy/sleeping.</TD><TD></TD><TD><SUPP>sig. MOOD</SUPP></TD></TR>\n <TR><TD> trash-taker</TD><TD>- Accepting trash feature</TD><TD></TD><TD><SUPP>hook room-cleaning</SUPP></TD></TR>\n <TR><TD> <B>circus</B></TD><TD>- \"Circus\" example libs</TD></TR>\n <TR><TD> kitten-basic</TD><TD>- Kitten tricks!</TD><TD></TD></TR>\n <TR><TD> <B>signals</B></TD><TD>- User signals</TD></TR>\n <TR><TD> DELIVERY</TD><TD>- The DELIVERY signal [P:60000]</TD></TR>\n <TR><TD> MOOD</TD><TD>- The MOOD signal [P:100]</TD></TR>\n <TR><TD>&nbsp;</TD></TR>\n <TR><TD><ROOT>NIP</ROOT></TD><TD>- <ROOT>NIP objects/related things</ROOT></TD></TR>\n <TR><TD> <B>bodies</B></TD><TD>- NIP NPC bodies</TD></TR>\n <TR><TD> <B>code</B></TD><TD>- Code indirectly related to NIP</TD></TR>\n <TR><TD> <B>items</B></TD><TD>- Items related to NIP...</TD></TR>\n <TR><TD> scroll</TD><TD>- ...like scrolls.</TD></TR>\n <TR><TD>&nbsp;</TD></TR>\n <TR><TD><ROOT>Neoct:NIP</ROOT></TD><TD>- <ROOT>The neo-action NIP folder (parser commands)</ROOT></TD></TR>\n <TR><TD> <B>Actions</B></TD><TD>- Action objects for system socials</TD></TR>\n <TR><TD> +ask</TD><TD>- The +ask beta-ask action.</TD></TR>\n <TR><TD> +ncs</TD><TD>- The +ncs action object</TD></TR>\n <TR><TD> +nip</TD><TD>- The +nip action object</TD></TR>\n <TR><TD> <B>Verbs</B></TD><TD>- Verb (social) objects</TD></TR>\n <TR><TD> +ask</TD><TD>- The +ask beta-ask verb.</TD></TR>\n <TR><TD> +ncs</TD><TD>- The +ncs verb object</TD></TR>\n <TR><TD> +nip</TD><TD>- The +nip verb object</TD></TR>\n\n </TABLE>\n\n\\-- Main.KalleAlm - 15 Nov 2003\n","dir":"/docs/unedited/","name":"NIPSystemMap.md","path":"docs/unedited/NIPSystemMap.md","url":"/docs/unedited/NIPSystemMap.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089311336\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPCategoryStyle\"}%\n\n &lt;font class=\"title\">CATEGORY SPECIFICATION: category&lt;/font>\n\n &lt;font class=\"query\">SPECIFICATION:&lt;/font>\n &lt;hr noshade/>\n\n specification\n\n -- Main...\n\n &lt;font class=\"query\">COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS CATEGORY&lt;/font>&lt;br/>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n","dir":"/docs/unedited/","name":"NIPTempCategoryRef.md","path":"docs/unedited/NIPTempCategoryRef.md","url":"/docs/unedited/NIPTempCategoryRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089311486\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPSpecStyle\"}%\n\n &lt;font class=\"title\">SIGNAL/HOOK REFERENCE: SIGNAL&lt;/FONT>\n\n &lt;font class=\"query\">WOE NAME:&lt;/font> woe:name:for:signal\n\n &lt;font class=\"query\">SIGNAL:&lt;/font> SIGNALNAME\n\n &lt;font class=\"query\">INITIAL PRIORITY:&lt;/font> SIGNAL-PRIORITY\n\n &lt;font class=\"query\">HOOK(S):&lt;/font> hook(s)\n\n &lt;font class=\"query\">DEPENDENCIES&lt;/font> List of objects (dependency:needs) required to use this signal.\n\n &lt;font class=\"query\">COMPATIBILITY:&lt;/font> List of objects, signals and/or hooks which has support for this signal.\n\n &lt;font class=\"query\">INCOMPATIBILITY:&lt;/font> List of objects, signals and/or hooks which DOES NOT work together with this signal.\n\n &lt;font class=\"query\">MAIN PURPOSE&lt;/font>\n\n MYSIGNAL's specific purpose.\n\n &lt;font class=\"query\">DESCRIPTION&lt;/font>\n\n General description of the signal.\n\n &lt;font class=\"query\">NIP PROPERTIES&lt;/font>\n\n &lt;font class=\"lib\">The name of a property in the NPC which is used by this signal&lt;/font>\n &lt;ul>\n Property description.\n &lt;/ul>\n\n &lt;font class=\"lib\">Another prop&lt;/font>\n &lt;ul>\n Etc.\n &lt;/ul>\n\n &lt;font class=\"query\">SIGNAL/HOOK SCRIPT REFERENCE(S)&lt;/font>\n\n &lt;font class=\"lib\">script name&lt;/font>\n &lt;ul>\n Description.\n &lt;/ul>\n\n &lt;font class=\"lib\">script name&lt;/font>\n &lt;ul>\n Etc.\n &lt;/ul>\n\n -- Main...\n\n &lt;font class=\"query\">COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS LIBRARY&lt;/font>&lt;br/>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n","dir":"/docs/unedited/","name":"NIPTempHookRef.md","path":"docs/unedited/NIPTempHookRef.md","url":"/docs/unedited/NIPTempHookRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089310984\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPStyle\"}%\n\n &lt;FONT CLASS=\"title\">HOW TO ?&lt;/FONT>\n\n &lt;B>How:&lt;/B>\n\n\n &lt;B>Tweaking functionality:&lt;/B>\n\n There are a few values you can flip around to change how your NPC behaves:\n\n | &lt;B>Property:&lt;/B> | &lt;B>Description:&lt;/B> | &lt;B>Default value:&lt;/B> |\n\n\n &lt;B>Further comment(s):&lt;/B> <b>*** to here!</b> \n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPTempHowTo.md","path":"docs/unedited/NIPTempHowTo.md","url":"/docs/unedited/NIPTempHowTo.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089311224\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPSpecStyle\"}%\n\n &lt;font class=\"title\">LIBRARY REFERENCE: library&lt;/font>\n\n &lt;font class=\"query\">CATEGORY:&lt;/font> [[NIPCategoryUndefined][Undefined]]\n\n &lt;font class=\"query\">WOE NAME:&lt;/font> woe:name\n\n &lt;font class=\"query\">DEPENDENCIES:&lt;/font> List of objects (dependency:needs) required to use this library.\n\n &lt;font class=\"query\">COMPATIBILITY:&lt;/font> List of objects, signals and/or hooks that this library cooperates with.\n\n &lt;font class=\"query\">INCOMPATIBILITY:&lt;/font> List of objects, signals and/or hooks that this library DOES NOT work together with.\n\n &lt;font class=\"query\">KNOWN ISSUES:&lt;/font>\n\n Confirmed (!) issues with this library. (Unconfirmed issues should be reported in the feedback section at the bottom of this document.)\n\n &lt;font class=\"query\">FEATURES&lt;/font>\n\n mylibrary is used to do this and that\n\n &lt;font class=\"query\">DESCRIPTION&lt;/font>\n\n General description of the library.\n\n &lt;font class=\"query\">NIP PROPERTIES&lt;/font>\n\n &lt;code>property-type &lt;font class=\"lib\">Property-name&lt;/font>&lt;/code>\n &lt;ul>\n Property description.\n &lt;/ul>\n\n &lt;code>- &lt;font class=\"lib\">-&lt;/font>&lt;/code>\n &lt;ul>\n Property description.\n &lt;/ul>\n\n &lt;code>- &lt;font class=\"lib\">-&lt;/font>&lt;/code>\n &lt;ul>\n Property description.\n &lt;/ul>\n\n &lt;code>- &lt;font class=\"lib\">-&lt;/font>&lt;/code>\n &lt;ul>\n Property description.\n &lt;/ul>\n\n &lt;font class=\"query\">LIBRARY SCRIPT REFERENCE(S)&lt;/font>\n\n &lt;font class=\"lib\">merry:...&lt;/font>\n &lt;ul>\n Description.\n &lt;/ul>\n\n &lt;font class=\"lib\">merry:...&lt;/font>\n &lt;ul>\n Description.\n &lt;/ul>\n\n &lt;font class=\"lib\">merry:...&lt;/font>\n &lt;ul>\n Description.\n &lt;/ul>\n\n -- Main...\n\n &lt;font class=\"query\">COMMENTS, BUGS, SUGGESTIONS, ETC. ABOUT THIS LIBRARY&lt;/font>&lt;br/>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n\n\\-- Main.KalleAlm - 08 Jul 2004\n","dir":"/docs/unedited/","name":"NIPTempLibRef.md","path":"docs/unedited/NIPTempLibRef.md","url":"/docs/unedited/NIPTempLibRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092858859\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPStyle\"}%\n\n &lt;font class=\"title\">Title&lt;/font> <b>*** to here!</b>\n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPTempSimple.md","path":"docs/unedited/NIPTempSimple.md","url":"/docs/unedited/NIPTempSimple.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089306060\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\\\> \\<b\\>Copy from here \\*\\*\\*\\</b\\>\n&\\#37;INCLUDE{\\\"NIPClassStyle\\\"}%\n\n\\[END\\] \\<b\\>**\\*** to here\\</b\\> \\</pre\\>\n","dir":"/docs/unedited/","name":"NIPTempTemp.md","path":"docs/unedited/NIPTempTemp.md","url":"/docs/unedited/NIPTempTemp.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089308880\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPTodoStyle\"}%\n\n &lt;font class=\"title\">TODO: Subject&lt;/font>\n\n &lt;font class=\"query\">PROJECT STATUS&lt;/font> One of: NOT STARTED, INITIATED, USELESS, ALPHA, BETA, WORKING, FINISHED\n\n &lt;font class=\"query\">STATUS NOTES&lt;/font>\n\n Where's it standing? What's left? What's buggy?\n\n &lt;font class=\"query\">ASSIGNED CODER(S)&lt;/font>\n\n | &lt;b>Who&lt;/b> | &lt;b>From&lt;/b> | &lt;b>Contact information&lt;/b> |\n | Coder's twiki-name | Theatre | Email, etc. or nothing. |\n\n &lt;font class=\"query\">WHAT?&lt;/font> Brief description of the subject.\n\n &lt;font class=\"query\">PRIORITY&lt;/font> Level of importance. Preferably one of VERY HIGH, HIGH, MEDIUM, LOW, NONE.\n\n &lt;font class=\"query\">ETA?&lt;/font> What's the estimated time of accomplish?\n\n &lt;font class=\"query\">HOW WILL IT WORK?&lt;/font> Description of how the subject will work in the system.\n\n &lt;font class=\"query\">GENERAL DESCRIPTION&lt;/font>\n\n General description of the system\n\n &lt;font class=\"query\">LIBRARIES&lt;/font>\n &lt;pre>\n [Library] [Description]\n ...\n &lt;/pre>\n &lt;font class=\"query\">SIGNALS&lt;/font>\n &lt;pre>\n [SIGNAL] [Priority] [Description]\n &lt;/pre>\n &lt;font class=\"query\">HOOKS&lt;/font>\n &lt;pre>\n [Hook] [Using signals] [Description]\n hookname ,-sep. list of signals brief description\n &lt;/pre>\n &lt;font class=\"query\">TECHNICAL COMMENTS&lt;/font>\n\n Any comments of a technical nature regarding the subject.\n\n &lt;font class=\"query\">LIST OF INTERESTED PARTIES&lt;/font>\n\n If this subject interests you, please add yourself to the list below. The more interest, the higher priority a subject will get. And also, by doing so, we will be able to notify you specifically when this subject's status has changed.\n &lt;pre>\n [Your Name] [Your Email]\n [insert a separate line above this one]\n &lt;/pre>\n\n -- Main...\n\n\n &lt;font class=\"query\">COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS SUBJECT&lt;/font>&lt;br/>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n\n\\-- Main.KalleAlm - 02 Jun 2003\n","dir":"/docs/unedited/","name":"NIPTempTodo.md","path":"docs/unedited/NIPTempTodo.md","url":"/docs/unedited/NIPTempTodo.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1089316790\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &#37;INCLUDE{\"NIPToolStyle\"}%\n\n &lt;font class=\"title\">+NIP TOOL: Subject&lt;/font>\n\n &lt;font class=\"query\">SYNTAX:&lt;/font>\n\n &lt;code>syntax...&lt;/code>\n\n &lt;font class=\"query\">AFFECTED / CONCERNED LIBS/ETC.:&lt;/font>\n\n &lt;font class=\"query\">GENERAL DESCRIPTION:&lt;/font>\n\n -- Main...\n\n\n &lt;font class=\"query\">COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS SUBJECT&lt;/font>&lt;br/>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n","dir":"/docs/unedited/","name":"NIPTempToolRef.md","path":"docs/unedited/NIPTempToolRef.md","url":"/docs/unedited/NIPTempToolRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1093362360\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\n <b>Copy from here ***</b> &lt;UpdateIssue> &#37;INCLUDE{\"NIPUpdateRefStyle\"}%\n\n &lt;font class=\"title\">SYSTEM ISSUE #n:&lt;/font>\n\n &lt;font class=\"query\">DATE:&lt;/font> When was this update introduced?\n\n &lt;font class=\"query\">UPDATE AFFECTS:&lt;/font> NPC's/libraries/features this update applies to.\n\n &lt;font class=\"query\">UPDATED BY:&lt;/font> Your wiki-name.\n\n &lt;font class=\"query\">PROBLEM&lt;/font> \n\n Description of the problem which this issue dealt with.\n\n &lt;font class=\"query\">REQUIRED USER-MEASURES&lt;/font> \n\n Measures NPC-builders need to manually take in order to resolve this issue properly.\n\n &lt;font class=\"query\">SOLUTION&lt;/font> \n\n Description of what was done in the system to fix this problem.\n\n -- Main...\n\n &lt;font class=\"query\">COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS SUBJECT&lt;/font>&lt;br>\n (Please, don't forget to add your name to your comment, preferably your TWiki-name.) <b>*** to here!</b> \n\n\\-- Main.KalleAlm - 01 Nov 2003\n","dir":"/docs/unedited/","name":"NIPTempUpdateRef.md","path":"docs/unedited/NIPTempUpdateRef.md","url":"/docs/unedited/NIPTempUpdateRef.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"soledadb\\\" date=\\\"1154310891\\\" format=\\\"1.0\\\"\nversion=\\\"1.11\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Advanced movement\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> INITIATED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nExternal coder is working on this project.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n ---------- ---------- -------------------------\n **Who** **From** **Contact information**\n External Skotos n/a\n ---------- ---------- -------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> Advanced movement, e.g \\\"figure\nout the quickest path to move from room A to room B, and walk it.\\\"\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> TOP\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> n/a\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\> Whenever the NPC\ndecides it\\'s time to move from one room to another, the advanced\nmovement feature will be used to calculate the path to take.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThe NPC will use a shared map over the setting from which it will\ncalculate the quickest path (taking into account any closed/locked doors\non the way, and whether or not the NPC itself has the proper key to the\nlocked once) from X1, Y1 to X2, Y2.\n\nThis path will then be sent to the NPC as a\n[script](Trash.NIPTodoScriptSystem) and (optionally) the NPC will walk\nthe path.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n advmovement Advanced movement library.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nThere will be a commonly shared map of the system, gradually created\nwhen NPC\\'s use the advanced movement feature, which will cache paths\nand solutions to paths in a centralized object. This object will be used\nto calculate possible routes to take, excluding paths that include doors\nthat are locked (possibly, doors that are always locked \\-- perhaps the\nNPC should have some form of \\\"general idea\\\" on how often a door is\nlocked and from there decide to try or not) to which the NPC currently\ndo not possess a proper key.\n\nThe system will presume the \\\"path is clear,\\\" i.e. the NPC can walk\nstraight from point A to B, but if the NPC encounters a closed/locked\ndoor (fails to leave through one of the set of exits), the NPC will\ncheck if the door is closed. If it is, the NPC will try to open it. If\nthe door is locked, the NPC will check if it has a key to it. If the NPC\ndoesn\\'t have a key, it will re-calculate the path and remember the\nfailure for future path calculations.\n\nThe door/locked etc. feature will probably be transferred to a separate\nlibrary and be optional.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n Tony Demetriou ademet@ics.mq.edu.au\n Todd Nilson wells@lovecraftcountry.com\n Soledad Bourdo reveur@marrach.skotos.net\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 03 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n\nFor an initial version, you do not really have to construct a map\ndatastructure in a database object. You can simply query the room\ndirectly for its exit data when you\\'re doing the path-finding\nalgorithm. For games that have many hundreds of rooms, this can\nadmittedly cause prohibitively much swapping, but building the map DB is\nnot trivial either. Once you start approaching map sizes of hundreds of\nthousands of rooms you have to take measures to prevent the quadratic\ncost of calculating the path. One traditional approach is to divide the\nfull-size maps into areas, and then only map room for room at the area\nlevel. For example, Marrach could easily be split into one area for each\nfloor. Then, path-finding executes like this: if I want to go from A to\nB, figure out which area A is, and which area B is. Figure out an AREA\nlevel path from A-area to B-area, e.g. \\\"first floor, then second floor,\nthen third floor\\\". Then do path finds from A to \\\"the exit in first\nfloor that leads to second floor\\\" (which is precomputed/cached). Then\n\\\"how do I get from there to the exit on the second floor that leads to\nthird floor\\\" (precomputed/cached). Etc, etc. This increases the size of\nthe map you can handle without explosive quadratic growth to tens of\nthousands of rooms. There are many other approaches to large-scale path\nfinding too, but it\\'s always a somewhat tricky problem since the\ntrivial solution to the problem can be so costly.\n\n\\-- Main.ParWinzell - 09 Jun 2003\n\nI like the idea of having areas but that means the user (builder) needs\nto do the work of specifying them each, unless a good way of calculating\nthese sensibly/accurately/automagically is implemented. Perhaps some way\nof marking the borders between areas would be enough (like the green\narch between OB/IB) and then presume all \\\"levels\\\" are areas of\nthemselves. Of course, two exits leading up to level 2 doesn\\'t\nnecessarily connect with each other, so these two areas would have to be\nseparate \\\"areas.\\\"\n\nShould be interesting.\n\n\\-- Main.KalleAlm - 09 Jun 2003\n\nA good start point is WOE structure itself. **In general**, any rooms in\nthe same WOE path are accessible from one another. So, you find the WOE\npath of your current room and the WOE path of your destination, and then\nwalk the tree.\n\n\\-- Main.SpZiph - 10 Jun 2003\n\nCouldn\\'t the areas be built up like we do in 3D polygon mapping? Start\nwith a room, check all exits from it, and extend outwards until we find\na list of rooms that have no other entrances from this \\\"area\\\". We then\nmark them as borders between areas. (and yes, this will mean many areas\nare only one room large). Once you\\'ve done this, you can combine nearby\nsmall areas together to make one larger area, until you have a map that\nsuits the size of your world.\n\nA better solution would be to watch which are these smaller one-room\nareas are used most often, and use that as the border between areas.\nThat should naturally force stairwells, drawbridges etc. to form the\nedges of the areas.\n\n\\-- Main.TonyDemetriou - 20 July 2005\n","dir":"/docs/unedited/","name":"NIPTodoAdvancedMovement.md","path":"docs/unedited/NIPTodoAdvancedMovement.md","url":"/docs/unedited/NIPTodoAdvancedMovement.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"tonys\\\" date=\\\"1057836569\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Conditional behavior\\</FONT\\>\n\n\\<QUERY\\>PROJECT STATUS\\</QUERY\\> WORKING\n\n\\<QUERY\\>STATUS NOTES\\</QUERY\\>\n\nThis tool is finished. See the appropriate library reference and/or how\nto\\'s for information on how to use it.\n\n\\<QUERY\\>ASSIGNED CODER(S)\\</QUERY\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Marrach <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<QUERY\\>WHAT?\\</QUERY\\> Conditional behavior, such as how to react/act\nin certain situations and with certain conditions.\n\n\\<QUERY\\>PRIORITY\\</QUERY\\> VERY HIGH\n\n\\<QUERY\\>ETA?\\</QUERY\\> Done.\n\n\\<QUERY\\>HOW WILL IT WORK?\\</QUERY\\> The conditional behavior is an\nadd-on to the recording tool, where you may set up a scene and act\naccordingly. For instance, if you would wish to define how a guard\nshould act when allowing or denying someone entrance you could set up a\nscene with a \\\"who\\\" and a \\\"where\\\".\n\nYou would then start recording as usual, but whilst recording you could\nnow also act towards the \\\"who\\\" object/nref and the \\\"where\\\"\nobject/nref.\n\n\\<QUERY\\>GENERAL DESCRIPTION\\</QUERY\\>\n\nThe conditional behavior is an extension to the +NIP command, and an\nadd-on to the record. It is also a feature implemented in the\n[eating](NIPLibRefEating) library.\n\n\\<QUERY\\>TECHNICAL COMMENTS\\</QUERY\\>\n\nThe tool to create conditional behavior data is an add-on to the\n\\'record\\' tool, whereas the +nip command \\'scene\\' is used to determine\nthe setting.\n\nDuring the scene set up, the user will set things up like \\\"George is\n\\'who\\', the north door is \\'where\\'.\\\" and will then interact with\nthese set objects. The resulting behavior data will add symbols, where\nin the aforementioned example, the object George would be turned into\n\\\"(who)\\\" and the north door would be turned into \\\"(where)\\\". Any unset\nobjects apart from \\'here\\' and any parts of the actor themselves are\ninvalid.\n\n\\<QUERY\\>LIST OF INTERESTED PARTIES\\</QUERY\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n TonySmith Disdercardo@blueyonder.co.uk\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 15 Jun 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoConditionalBehavior.md","path":"docs/unedited/NIPTodoConditionalBehavior.md","url":"/docs/unedited/NIPTodoConditionalBehavior.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1084984610\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Fighting\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> COMPLETED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nThis system is in-place, pending sync to S7 and Stages.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- -----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@mortalis.skotos.net>\n --------------- ---------- -----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A generic fighting system, with\nadd-on \\\"modules\\\" for fighting systems.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> HIGH\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Completed May 9th, 2004.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe initial system will simply use three maps - one with imperatives, a\nsecond with condition regards and a third with min-max delay to wait\nafter the imperative. Example of an imperative map, for Marrach\\'s\nduelling, would be:\n\n ([ \"rest\" : ([ \"guard\" : 80, \n \"cut\" : 15,\n \"feint\" : 5 ]),\n \"guard\" : ([ \"jab\" : 18,\n \"cut\" : 18,\n \"feint\" : 9,\n \"dodge\" : 9,\n \"rest\" : 18,\n \"slip\" : 9,\n \"lunge\" : 9,\n \"advance\" : 5,\n \"retire\" : 5 ]),\n \"cut\" : ([ \"rest\" : 18,\n \"jab\" : 18,\n \"cut\" : 18,\n \"feint\" : 9,\n \"dodge\" : 9,\n \"slip\" : 9,\n \"lunge\" : 9,\n \"advance\" : 5,\n \"retire\" : 5 ]),\n \"feint\" : ([ \"rest\" : 18,\n \"jab\" : 18,\n \"cut\" : 18,\n \"feint\" : 9,\n \"dodge\" : 9,\n \"slip\" : 9,\n \"lunge\" : 9,\n \"advance\" : 5,\n \"retire\" : 5 ]),\n \"jab\" : ([ \"guard\" : 38,\n \"jab\" : 18,\n \"cut\" : 18,\n \"rest\" : 14,\n \"feint\" : 4,\n \"advance\" : 4,\n \"retire\" : 4 ]),\n \"dodge\" : ([ \"jab\" : 30,\n \"cut\" : 30,\n \"feint\" : 20,\n \"rest\" : 10,\n \"guard\" : 10 ]),\n \"slip\" : ([ \"guard\" : 38,\n \"jab\" : 18,\n \"cut\" : 18,\n \"rest\" : 5,\n \"guard\" : 15,\n \"advance\" : 3,\n \"retire\" : 3 ]),\n \"lunge\" : ([ \"rest\" : 20,\n \"jab\" : 20,\n \"cut\" : 20,\n \"feint\" : 10,\n \"dodge\" : 10,\n \"slip\" : 10,\n \"lunge\" : 10 ]),\n \"advance\" : ([ \"guard\" : 60,\n \"cut\" : 20,\n \"feint\" : 10,\n \"rest\" : 10 ]),\n \"retire\" : ([ \"guard\" : 60,\n \"cut\" : 20,\n \"feint\" : 10,\n \"rest\" : 10 ]) ])\n\nThe above map is the imperative map. It is used to determine 1) which\ncommands are valid following the previous command, and 2) how likely\neach action is, in percent. Each map points to a map of imperatives,\nwhere the values all sum up to 100 (%).\n\nThe next map maps numeric properties in the NIP, and converts these into\nbonuses in the decision-making. The full syntax of this map is as\nfollows:\\\\>(\\[ \\\"NIP property\\\" : ({ middle, effect, positive-bonus,\nnegative-bonus }) \\])\\</pre\\>\n\nExample:\n\n ([ \"duelling:fatigue\" : ({ 50, 0.2, ({ \"cut\", \"jab\", \"feint\" }), \"rest\" }) ])\n\nIn the above example, the following rules apply for the\n\\\"duelling:fatigue\\\" property: \\* The middle is 50. This means a fatigue\nof 85 will become a bonus value of 35. A fatigue of 20 will become -30.\n\\* The effect is 0.2 (20%). This means the final bonus for a bonus value\nof, say, 20, will be 4. \\* The positive-bonus is ({ \\\"cut\\\", \\\"jab\\\",\n\\\"feint\\\" }). This means these three imperatives will receive the bonus\n**if the bonus value is a positive number**. \\* The negative-bonus is\n\\\"rest\\\". This means the \\\"rest\\\" imperative will receive the bonus, if\nthe bonus value is **a negative number**.\n\nA single property can have multiple entries. These would simply be\nlisted in a linear row, e.g. ({ 50, 0.2, ({ \\\"cut\\\", \\\"jab\\\", \\\"feint\\\"\n}), \\\"rest\\\", 20, 0.1, ({ \\\"dodge\\\", \\\"slip\\\" }), nil }) \\]).\n\nThe final map is the delay map. This maps all the available imperatives\nwith a minimum and a maximum delay value. This is used to determine the\nspeed of the nipper, but also serves to ensure the nipper do not act\n\\\"too fast\\\", ever. (if they do, long pauses in between actions will\noccur where the nipper receive \\\"You are too busy with something else.\\\"\nerrors).\n\nThe syntax of this map is:\\\\>(\\[ \\\"imperative\\\" : ({ min, max })\n\\])\\</pre\\>\n\n ([ \"rest\" : ({ 0.1, 0.3 }),\n \"guard\" : ({ 0.5, 4.0 }),\n \"cut\" : ({ 2.1, 3.0 }),\n \"feint\" : ({ 2.1, 3.0 }),\n \"jab\" : ({ 2.1, 2.5 }),\n \"dodge\" : ({ 1.1, 2.0 }),\n \"slip\" : ({ 4.0, 6.0 }),\n \"lunge\" : ({ 3.5, 5.5 }),\n \"advance\" : ({ 0.5, 1.0 }),\n \"retire\" : ({ 0.5, 1.0 }) ])\n\nIn the above, if the nipper would decide to perform a jab, then the next\naction would occur between 2.1 and 2.5 seconds later.\n\nApart from the above maps, the system will include a few scripts. \\*\n**merry:lib:core_fight_init** - Initialize a fight. This is called in\nthe nipper to initialize the fight thread (external from the heartbeat\nthread as it has to work in its separate speed), with the argument\n\\$opponent set to the object reference of the opponent. \\*\n**merry:lib:core_fight_end** - Called at the end of the fight.\n\nIn any combat system, the nipper needs at least two external functions,\none that determines when a fight has begun, and another which determines\nwhen the fight is over.\n\nIn CM, the initiating of a fight is simple enough. A\nmerry:react:duel-whom which triggers the duel.\n\nThe ending of a fight is equally simple. When a duel ends, each\nparticipant performs the action signal \\\"combat/stop\\\". Thus, we can\ndetermine when a fight has ended by adding a merry:act:combat/stop to\nthe nipper.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nFighting NPC\\'s has got to be the most commonly occuring thing in the\nuniverse, next to blonde swedish gals. Any computer game out there with\nan \\'action\\' label on it (and the majority of those that don\\'t) has\nthem in some shape or form. Hopefully, this system will turn out an easy\nimplementation without too much tweaking A.I. values.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n fighting The general fighting lib\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nThe previous technical comments here are discarded in favor of the\ngeneral comments in the \\\"how will it work\\\" section above.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n TonySmith Disdercardo@blueyonder.co.uk\n\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 02 Jun 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoFighting.md","path":"docs/unedited/NIPTodoFighting.md","url":"/docs/unedited/NIPTodoFighting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"soledadb\\\" date=\\\"1146146413\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>TODO: Fake fighting\\</font\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> DONE\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nDone.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- -----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@mortalis.skotos.net>\n --------------- ---------- -----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A fake-fighting system for\nnon-dueling situations, e.g. rats attacking a person.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> MEDIUM\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> April 25, 2006.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe system will simply be two features \\-- target-person, wound-person,\nand receive-wound. The receive-wound feature will determine if the\nnipper dies by the wound or survives. In short, it\\'s fighting, but on a\nblow-to-blow level rather than e.g. a dueling system.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThere is demand for a system which can be implemented into non-humanoid\nnon-sword wielding nippers, which effectively makes them \\\"dangerous\\\"\nto be around, but also ensures they are \\\"mortal\\\". (A dangerous nippers\nthat cannot be killed is rather a suicidal move from a game designer\\'s\npoint of view.)\n\nThus, the fighting-fake library, which implements a way to make nippers\ntarget people, and attempt to kill them by emitting an attack against a\nperson, then rolling a die and, if successful, emit the successful\nwounding and do the equivalent of +wound upon the target; or, if\nunsuccessful, simply emit the result.\n\nThe system also implements a way for people to attack the nipper back.\nThis will default to \\\"wield a weapon, any weapon, and you can do\n\\'slash \\[nipper\\]\\' to get the same deal; attempt, die-roll,\nsuccess/failure.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n fighting-fake The main library.\n\n\\<font class=\\\"query\\\"\\>HOOKS\\</font\\>\n\n [Hook] [Using signals] [Description]\n fighting-fake DECIDE Determine what to do.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nSince signals are only triggered every 20 seconds or so, the\nfighting-fake decide hook will in fact trigger an internal\nloop-mechanism which handles the combat itself. This, too, can be\ncustomized with a min and max value for how often the nipper attempts to\nattack.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n Reveur reveur@marrach.skotos.net\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 25 Apr 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoFightingFake.md","path":"docs/unedited/NIPTodoFightingFake.md","url":"/docs/unedited/NIPTodoFightingFake.html"},{"permalink":"//","layout":"default","title":"nip-plugin","content":"# nip-plugin\n\n### Required script spaces:\n\n ncs Lib:NIP:NCS\n nip Lib:NIP:core\n npc Lib:NIP:API\n","dir":"/","name":"README.md","path":"README.md","url":"/"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1055801052\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Guarding code\\</FONT\\>\n\n\\<QUERY\\>PROJECT STATUS\\</QUERY\\> WORKING\n\n\\<QUERY\\>STATUS NOTES\\</QUERY\\>\n\nThe guard system is, although very limited in features, in place and\nworking. As ready as \\\"ready to replace the guards in Marrach\\\" would be\nto the reader.\n\n\\<QUERY\\>ASSIGNED CODER(S)\\</QUERY\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Marrach <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<QUERY\\>WHAT?\\</QUERY\\> A customizable codebase for guards,\nmoving/still-standing etc.\n\n\\<QUERY\\>PRIORITY\\</QUERY\\> VERY HIGH\n\n\\<QUERY\\>ETA?\\</QUERY\\> Completed.\n\n\\<QUERY\\>HOW WILL IT WORK?\\</QUERY\\> This is a customized guarding\nlibrary for Marrach. However, parts of or the library in its entirety\nwill be displayed publicly as an example. The library is divided into\ntwo libraries, whereas one is a very simple \\\"guarding layer\\\" and the\nother , Marrach-specific, adds on to the first.\n\n\\<QUERY\\>GENERAL DESCRIPTION\\</QUERY\\>\n\nThe reason for the multi-lib solution is simple enough. The guarding\nlibrary is supposed to be useful to anyone, regardless of theme,\nsetting, environment, etc. while the Marrach-customized add on lib is\nspecifically for the Marrach environment.\n\nThis does not mean a similar (or not-so similar) theatre/game could use\na modified version of the Marrach library.\n\n\\<QUERY\\>LIBRARIES\\</QUERY\\>\n\n [Library] [Description]\n guarding Standard guarding library.\n marrach-guards Marrach-specific guarding library.\n\n\\<QUERY\\>TECHNICAL COMMENTS\\</QUERY\\>\n\nThe guarding library currently hooks the witness:enter-into script to\nenable entrance authority (by precedence in the case of Marrach). Its\ndefault behavior is quite useless; the handler\n(lib:handler:request-authority) simply emotes a social informing the\nactor of his action. All actions are allowed in the default guarding\nlibrary.\n\nAn add-on, such as marrach-guards, would contain a secondary\nlib:handler:request-authority-script, placed in the init:merry array in\nthe library. The add-on would depend on guarding, dependency:needs = ({\n\\<Lib:NIP:lib:guarding\\> }), and would at load-time replace the original\nhandler with something a bit more useful.\n\n\\<QUERY\\>LIST OF INTERESTED PARTIES\\</QUERY\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 07 Jun 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoGuards.md","path":"docs/unedited/NIPTodoGuards.md","url":"/docs/unedited/NIPTodoGuards.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1076292425\\\" format=\\\"1.0\\\"\nversion=\\\"1.6\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Merchants system\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> COMPLETED.\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nThis system is completed and is located on Skotos Seven and Castle\nMarrach, with an example NPC \\-- summon\nExamples:complete:NIP:trading:burger-king-dude to see this.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A commerce system for NIP.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> VERY HIGH\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Completed february 8th, 2004.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\n1 A data object will be required. This object will contain\ncurrency-specific data, and will support things like credit card\ntransactions, physical cash trade, etc. 2 A library called \\\"trading\\\"\nwill be made, which each NPC merchant will use and have set up to use\nthe data object spec. in \\#1.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\n ---\n > ask cook for hamburger\n You do not have enough cash for a hamburger.\n\n > open my wallet\n You open your wallet.\n\n > take money from my wallet\n You take $4.22 from your wallet.\n\n > ask cook for hamburger\n This item will cost you $0.10.\n A cook offers a hamburger to you.\n Type 'accept from cook' to take this item.\n Type 'refuse cook' to refuse to take it.\n\n > accept hamburger\n You take a hamburger from a cook.\n You hand a dime to a cook.\n ---\n\nFuture (v 2) additions: haggling. Further information to be enclosed\nwhen the time comes for such implementations.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n trading The trading library, used in all NPC merchants.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nA temporary \\\"react:take\\\" script in the traded item would suffice,\nwhich would ensure the user still had the money available etc. and\ndeducted it upon taking. (check if sig%name works)\n\n\\*Script requires (and replaces parts of)\n[presents](NIPLibRefPresents)\\*\n\nmerry:lib:handler:ask-for (replacing presents v.)\n\nmerry:lib:core_trading_query_assets \\-- check if \\$actor has a certain\namount of money\n\nmerry:lib:core_trading_deduct \\-- deduct a certain amount of money from\n\\$actor\n\nAct( \\$actor, \\\"offer\\\", \\$who: object, \\$what: ({ object, \\... }) );\n\nProperty in purchaseable objects which determines price:\n\\\"nip:item:cost\\\"\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 05 Feb 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoMerchantsSystem.md","path":"docs/unedited/NIPTodoMerchantsSystem.md","url":"/docs/unedited/NIPTodoMerchantsSystem.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"tonys\\\" date=\\\"1057834627\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPRefLibraries\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Mounting NPC\\'s (e.g.\n\\\"horseback-riding\\\")\\</FONT\\>\n\n\\<QUERY\\>PROJECT STATUS\\</QUERY\\> WORKING\n\n\\<QUERY\\>ASSIGNED CODER(S)\\</QUERY\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Marrach <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<QUERY\\>WHAT?\\</QUERY\\> Mounting an NPC, like a horse or dragon or\nwhatever you\\'d want to be able to mount.\n\n\\<QUERY\\>PRIORITY\\</QUERY\\> HIGH\n\n\\<QUERY\\>ETA?\\</QUERY\\> None.\n\n\\<QUERY\\>HOW WILL IT WORK?\\</QUERY\\> Whenever someone jumps the NPC\n(currently jump, will probably be changed into a separate verb,\n\\'mount\\' perhaps, later on), the person will end up \\'sitting on\\' the\nNPC. When they move around in the room, the NPC will move in their\nstead. Likewise, movement between rooms will occur on the horse.\n\n\\<QUERY\\>GENERAL DESCRIPTION\\</QUERY\\>\n\nMainly intended for horses (but will work equally well with anything\nsimilar), the mounting lib will deal with the aspect of making it look\nlike (and keep it looking like) the rider (actor) is actually riding\naround on the horse.\n\n\\<QUERY\\>LIBRARIES\\</QUERY\\>\n\n [Library] [Description]\n mounting The general mounting lib\n mountrider The shell lib containing the act-scripts for whoever mounts the horse.\n\n\\<QUERY\\>TECHNICAL COMMENTS\\</QUERY\\>\n\nThe mounting lib will contain the main scripts for the horse, but these\nscripts will only handle the mounting/un-mounting and nothing else. The\nsecondary library, mountrider, will contain act:approach/act:stance and\nact:enter scripts that will be placed in the **rider** as they mount the\nNPC, and will similarily be removed from the rider when the rider\nunmounts again.\n\nThere is the issue of conflicting act-scripts (other act scripts placed\nin the rider) which is an issue that may need to be addressed. **If you\nare experiencing or having issues with such a thing, please notify\neither of the coders listed for this project at once so it can be\naddressed immediately.**\n\n\\<QUERY\\>LIST OF INTERESTED PARTIES\\</QUERY\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n KathyNoble katherin.noble@sbcglobal.net\n TonySmith Disdercardo@blueyonder.co.uk\n\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 04 Jun 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoMounting.md","path":"docs/unedited/NIPTodoMounting.md","url":"/docs/unedited/NIPTodoMounting.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1069315012\\\" format=\\\"1.0\\\"\nversion=\\\"1.7\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Predator\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> COMPLETED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nThe system works. Report any bugs you find.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> Predator library, for the hunting\nwildlife.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> MEDIUM\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Finished 19 Nov 2003.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe system will include a number of features and settings for NPC\\'s\nthat hunt other NPC\\'s for prey; predators. The NPC predator will have a\nnumber of prerequisites for \\\"valid targets\\\" and will, based on these,\nact and attack nearby prey.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nAn NPC cat could use the predator system to hunt for small animals, such\nas mice or rats, etc. The rats would, in turn, contain some properties\nwhich identified them as valid prey, and also contained the\nfunctionality for the actual attack/killing of the target itself.\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n predator Used by the hunting NPC, the predator lib supports the predator aspects.\n prey Used by the hunted NPC, the prey lib deals with prey issues.\n\n\\<font class=\\\"query\\\"\\>HOOKS\\</font\\>\n\n [Hook] [Using signals] [Description]\n predator DECIDE The predator hook.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\n(The predator hook and the predator library are both the same object,\nlocated in Lib:NIP:lib.)\n\nThe predator library includes the functionality to make the predator\nhunt for prey in various ways (of course extendable by means of creating\nyour own add-on libraries to the system).\n\nThe prey library, however, will include such things as \\\"what will I\nturn into when I die? What will happen to me when I die?\\\" and \\\"how\nwill I try to avoid being killed?\\\"\n\n**Predator** \\<ul\\> The predator has a number of merry regular- and\nsig-hook scripts which are used to simulate an NPC hunting for prey, as\nwell as a number of properties which define how the predator functions.\n\n**Predator properties** \\<ul\\> *nip:behavior:predator*\\\\> - Property\ntype: object pointer - Syntax: \\<Object:name\\> - Default value: nil -\nDescription: The predator behavior DB points to the data object which\ncontains the recorded actions for when the NPC performs various\npredator-related actions. \\</pre\\>\n\n*nip:trait:predator:scavenger*\\\\> - Property type: boolean - Syntax:\n*1*\\|*0* - Default value: 0 - Description: Is this predator a scavenger?\nIf 1 (yes), it will eat encountered dead carcass, but if 0 (no), it will\nonly eat prey it killed itself. \\</pre\\>\n\n*nip:trait:predator:prey*\\\\> - Property type: array - Syntax: ({\n\\\"\\y-type\\>\\\", \\\"\\t-type\\>\\\", \\... }) - Default value: ({\n\\\"prey\\\" }) - Description: The prey array contains a list of which NPC\nprey types the NPC would consider as \\'prey\\'. (see prey properties)\n\\</pre\\>\n\n*nip:stats:offense*\\\\> - Property type: integer - Syntax: \\<number\\>\n- Default value: 10 - Description: The offensive strength of the NPC.\n\\</pre\\>\n\n*nip:stats:agility*\\\\> - Property type: integer - Syntax: \\<number\\>\n- Default value: 10 - Description: The swiftness/agility of the NPC.\n\\</pre\\> \\</ul\\>\n\n**Predator merry scripts** \\<ul\\> *merry:lib:act:predator:attack* \\<ul\\>\nThe \\'predator:attack\\' script will issue an assault on the target prey.\nThe prey will be called on whether or not it escapes, by comparing the\nrandomize result of two numbers (predator offense versus prey defense),\nand will return the appropriate response to the attacker. The\n\\'predator:attack\\' script will fetch the stats for strength and\nagility, and send these (unmodified by default) on to the \\'defend\\'\nscript in the prey for evaluation. The script will presume that the\nproperty \\\"npc:prey\\\" is set to an object pointer of the prey target.\n\\</ul\\> *merry:lib:handler:offer:eating* \\<u\\>(Replacement.)\\</u\\>\n\\<ul\\> The eating offer handler will replace the eating library\\'s\ninternail eating handler, as some internal checks are required (e.g. for\nnon-scavenger predators, for instance). \\</ul\\> \\</ul\\>\n\n**Predator sig-hook scripts** \\<ul\\> *merry:lib:predator:DECIDE* \\<ul\\>\nThe predator decide sig-hook will continuously scan for prey in the area\nin which the NPC is currently located, and will set in motion the hunt\nfor the target if various checks made think such is a good idea. It will\nset the \\'npc:prey\\' object pointer to the selected prey. \\</ul\\>\n\\</ul\\>\n\n\\</ul\\>\n\n**Prey** \\<ul\\> The prey has, like the predator, a number of merry\nregular- and sig-hook scripts as well as a number of properties to\ndefine the prey feature.\n\n**Prey properties** \\<ul\\> *nip:behavior:prey*\\\\> - Property type:\nobject pointer - Syntax: \\<Object:name\\> - Default value: nil -\nDescription: The prey behavior DB points to the data object which\ncontains the recorded actions for when the NPC performs various\nprey-related actions. \\</pre\\>\n\n*nip:trait:prey:type*\\\\> - Property type: array - Syntax: ({\n\\\"\\y-type\\>\\\", \\\"\\t-type\\>\\\", \\... }) - Default value: ({\n\\\"prey\\\" }) - Description: The prey:type array contains a list of which\nNPC prey types the NPC belongs to. The matching of each individual prey\ntype must be found in the predator:prey property for a predator to\nregard a specific NPC as valid prey. \\</pre\\>\n\n*nip:stats:defense*\\\\> - Property type: integer - Syntax: \\<number\\>\n- Default value: 10 - Description: The defensive strength of the NPC.\n\\</pre\\>\n\n*nip:stats:agility*\\\\> - Property type: integer - Syntax: \\<number\\>\n- Default value: 10 - Description: The swiftness/agility of the NPC.\n\\</pre\\> \\</ul\\>\n\n**Prey merry scripts** \\<ul\\> *merry:lib:handler:prey:defend* \\<ul\\> The\n\\'prey:defend\\' script will respond to an assault from a hunting\npredator. The prey will determine whether or not it escapes, by\ncomparing the randomize result of two numbers (predator offense versus\nprey defense), and will return the appropriate response. The prey:defend\nscript will presume that the properties \\$predator, \\$offense and\n\\$agility are sent as arguments for comparison. The prey:defend script\nreturns a boolean result value of the fight. \\</ul\\>\n*merry:lib:handler:prey:die* \\<ul\\> The prey:die script will turn the\nNPC prey from living prey into dead corpse. The NPC predator will also\nkeep track of whether or not it killed a target. The script will presume\nthe argument \\$killer is set to the object reference of the predator\nwhich slays it. \\</ul\\> \\</ul\\>\n\n\\</ul\\>\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n\n Todd Nilson (Lovecraft Country), storyplotterwells@yahoo.com\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 17 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoPredator.md","path":"docs/unedited/NIPTodoPredator.md","url":"/docs/unedited/NIPTodoPredator.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1062878055\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Presents\\</FONT\\>\n\n\\<QUERY\\>PROJECT STATUS\\</QUERY\\> BETA\n\n\\<QUERY\\>STATUS NOTES\\</QUERY\\>\n\n**This library has now been divided into two libs, for the sake of the\nrumour system, and thus now depends on [the asking\nlibrary](NIPLibRefAsking).**\n\nTest on S7 in place. Awaiting parser upgrade for Marrach. Also, command\nwill remain +ask until the rumours feature has been implemented as well.\n\n\\<QUERY\\>ASSIGNED CODER(S)\\</QUERY\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Marrach <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<QUERY\\>WHAT?\\</QUERY\\> Presents, i.e. NPC ability to offer things to\nPC\\'s.\n\n\\<QUERY\\>PRIORITY\\</QUERY\\> HIGH\n\n\\<QUERY\\>ETA?\\</QUERY\\> Completed.\n\n\\<QUERY\\>HOW WILL IT WORK?\\</QUERY\\> This system will work exactly like\n[offers](NIPLibRefOffers) do currently, except backwards if you will.\n\nOffers is used to make NPC\\'s accept certain things, while presents is\nused to enable NPC\\'s ability to hand things out (using the \\'ask\\'\ncommand). Like \\'ask courier for scroll\\'.\n\n\\<QUERY\\>GENERAL DESCRIPTION\\</QUERY\\>\n\nSelf-explanatory.\n\n\\<QUERY\\>LIBRARIES\\</QUERY\\>\n\n [Library] [Description]\n presents General 'presents' library.\n\n\\<QUERY\\>TECHNICAL COMMENTS\\</QUERY\\>\n\nThe code will use the \\'ask\\' verb. The developer version for this will\nbe called +ask and will be developed on S7 (or will be started there,\nunless the parser upgrade needed for raw verbs is transferred over).\n\nThis requires some amount of subtleness as we can\\'t rip the current ask\nfunctionality out until we have -all- such NPC\\'s ready to be replaced.\n\n\\<QUERY\\>LIST OF INTERESTED PARTIES\\</QUERY\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 12 Jun 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoPresents.md","path":"docs/unedited/NIPTodoPresents.md","url":"/docs/unedited/NIPTodoPresents.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1151683791\\\" format=\\\"1.0\\\"\nversion=\\\"1.10\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Relationships\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> DEPRECATED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\n\\<font color=\\'indigo\\'\\>This system has been disbanded in favor of the\nnew relations system, which provides a more solid implementation for\nthis technology. Please see the related documentation for further\ninformation.\\</font\\>\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> Individual/group relationships.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> HIGH\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> End of August, 2003.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\> Depending on the\nsettings, relations will improve or get worse depending on the actions\nof those around the NPC. There will be a dynamic, customizable amount of\nrelation levels (\\\"loved\\\", \\\"trusted\\\", \\\"friend\\\", \\\"none\\\",\n\\\"unfriend\\\", \\\"distrusted\\\", \\\"hated\\\" is one example) and upon that\nthere will be a numeric representation of where on the ladder a person\nresides.\n\nWhen the numeric relation reaches a certain level the actual relation\nwill be modified.\n\n**EXAMPLE CHART**\n\n -------------- ----------------------- -----------------------\n **Relation** **Level to decrease** **Level to increase**\n loved -600 n/a\n trusted -400 6000\n friendly -300 3000\n none -200 2000\n unfriendly -200 2500\n distrusted -200 3000\n hated -200 4000\n -------------- ----------------------- -----------------------\n\nEach time someone\\'s level is modified, the numeric relation is reset to\n0.\n\nThoughts: this system, while based off of the somewhat \\'proven\\' one\nalready residing in an animal NPC at Marrach, may be too static. I\\'m\ngoing to put some heavy thought into this and try to come up with a\nnumber of different situations in which it would be used.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThe local farm-boy is infatuated with the lord\\'s daughter. Sheesh,\nwhat\\'s she been up to, fluttering her eyelashes at him every chance she\ngets. Oh, and did you hear that all the girls are crazy about Sir\nHandsome. Unfortunately, he\\'s got some issues now with every father in\nthe village\\...\n\n\\<font class=\\\"query\\\"\\>LIBRARIES\\</font\\>\n\n [Library] [Description]\n relations The general relations lib.\n\n\\<font class=\\\"query\\\"\\>SIGNALS\\</font\\>\n\n [SIGNAL] [Priority] [Description]\n RELATIONS ~200 The relations signal.\n\n\\<font class=\\\"query\\\"\\>HOOKS\\</font\\>\n\n [Hook] [Using signals] [Description]\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nThe system will only modify the relations towards the various characters\nin the NPC\\'s life. There is [a separate system](NIPTodoRelConBehavior)\nin the making for relation-based behavior.\n\nA tool to layout/define the NPC\\'s behavior will be created for +NIP.\n\nThe relations system will be set up to use a predefined relations\ndatabase, which contains the configuration for the NPC\\'s relations. It\nis done this way because a lot of NPC\\'s will use the same type of\nsystem, and to save time, the configurations will be retrievable from a\nsecondary source.\n\nA relations database is a simple propertycontainer with a few\nproperties. Example:\n\n relation:start = \"none\"\n\n relation:type:loved = ({ 20, 20, 16, 14, nil, 10000, \"trusted\", -600, 40 })\n relation:type:trusted = ({ 19, 18, 15, 13, \"loved\", 6000, \"friendly\", -400, 25 })\n relation:type:friendly = ({ 16, 15, 13, 11, \"trusted\", 4000, \"none\", -250, 10 })\n relation:type:none = ({ 14, 13, 11, 8, \"friendly\", 2000, \"unfriendly\", -200, 0 })\n relation:type:unfriendly = ({ 11, 10, 8, 6, \"none\", 2500, \"distrusted\", -200, -5 })\n relation:type:distrusted = ({ 9, 7, 5, 4, \"unfriendly\", 3000, \"hated\", -200, -20 })\n relation:type:hated = ({ 7, 4, 3, 0, \"distrusted\", 4000, nil, -20000, -45 })\n\nThe above may seem confusing at first, but isn\\'t all that complicated.\n\\* The initial line (relation:start) specifies which relation is the\ninitial one that everyone starts out at. \\* The next group of properties\nmap out the relations and specify the caps for each of them to improve\nor degrade depending on the next batch of settings (described below);\nwithin the ({ array }). The array content is defined as follows: \\*\nrelation:type:RELATION = ({ R+ allow, T+ allow, R- allow, T- allow,\nIMPROVE_NAME, IMPROVE_AT, DEGRADE_NAME, DEGRADE_AT, INITIAL_EFFECT })\n\n- **R+ allow:** This is the max strength of R+ allowed before the NPC\n regards the action as negative.\n- **T+ allow:** Same, for T+.\n- **R- allow:** This is the max strength of R- which the NPC accepts,\n before modifying its relationship towards a person.\n- **T- allow:** Same, for T-.\n- **IMPROVE_NAME:** is the name of the relation which this\n relationship would improve unto; if this is nil, there is no\n possible way to ascend beyond the specified relationship.\n- **IMPROVE_AT:** defines the amount of \\\"relation points\\\" required\n to ascend to the previously defined level.\n- **DEGRADE_NAME:** specifies the name of the relation which this\n relationship would degrade unto; if this is nil, there is no\n possible way to get a worse relationship.\n- **DEGRADE_AT:** defines the number of points below which a person\n will lose favor (i.e. descend into the aforementioned relationship).\n- **INITIAL_EFFECT:** determines how the NPC feels about a person to\n which he is thusly related, being in the room.\n\nThe next set of configurations will eventually be set up using a +NIP\ntool, but their layout is defined here nonetheless. These properties\ndefine what a person does to improve or degrade their relation points\nwith the NPC.\n\n relation:do:smile = \"r+5\"\n relation:do:frown = \"r-4\"\n relation:do:kiss = \"t+20\"\n relation:do:kick = \"t-20\"\n\nAgain, it might seem complicated but it\\'s not. Briefly; \\* \\\"r\\\" stands\nfor \\\"ranged\\\" \\* \\\"t\\\" stands for \\\"touching\\\" \\* \\\"+\\\" stands for\n\\\"positive\\\" or \\\"improving\\\" \\* \\\"-\\\" stands for \\\"negative\\\" or\n\\\"degrading\\\"\n\nThus, \\* \\\"r+\\\" stands for \\\"positive ranged\\\" \\* \\\"r-\\\" stands for\n\\\"negative ranged\\\" \\* \\\"t+\\\" stands for \\\"positive touching\\\" \\* \\\"t-\\\"\nstands for \\\"negative touching\\\"\n\nExamples for each are, \\* \\\"smile\\\", \\\"grin\\\", \\\"wave\\\", \\\"bow\\\",\n\\\"wink\\\" are all positive, ranged actions \\-- \\\"r+\\\" \\* \\\"frown\\\",\n\\\"yell\\\", \\\"screech\\\", \\\"growl\\\", \\\"grunt\\\" are all negative, ranged\nactions \\-- \\\"r-\\\" \\* \\\"kiss\\\"; \\\"hug\\\", \\\"caress\\\" are all positive,\ntouching actions \\-- \\\"t+\\\" \\* \\\"kick\\\", \\\"hit\\\", \\\"slap\\\", \\\"poke\\\" are\nall negative, touching actions \\-- \\\"t-\\\"\n\nNow, a bunch of presumption goes on there. Someone could poke someone\nfondly or slap someone playfully etc. and depending on the NPC\\'s\nnature, these all differ slightly. Some NPC\\'s could enjoy a good tickle\nwhile others would hate the same treatment. It also depends a lot on the\nadverb used, which is the base of the next batch of properties:\n\n relation:as:smilingly = ({ 0.1, 0.1, -0.1, -0.1, nil })\n relation:as:playfully = ({ 0.1, 0.0, -0.2, -0.2, \"reverse=-5\" })\n relation:as:harshly = ({ -0.1, -0.1, 0.1, 0.3, \"reverse=+5\" })\n relation:as:hatefully = ({ -0.5, -0.5, 0.5, 0.5, \"reverse=+10\" })\n relation:as:lovingly = ({ 0.5, 0.5, -0.2, -0.2, \"reverse=-6\" })\n\nOkay. To explain; the above defines how the NPC modifies the action\nbased on the adverb. So, frowning playfully will be different from\nsimply frowning. The ({ array }); \\* The first entry defines how ranged\npositive actions should be modified. In the first case (smilingly), they\nwould be strengthened by 10%. \\* The second entry defines how touching\npositive actions should be modified. Kiss (touching positive with\nstrength 20) smilingly (+10%) would have the strength 22 (20+10%). \\*\nThe third entry defines how ranged negative actions should be modified.\n\\* The fourth entry defines how touching negative actions should be\nmodified. Kick (touching negative with strength 20) smilingly (-10%)\nwould get strength 18 (20-10%). \\* The fifth, optional, entry defines\nany modifier-flags. It needs to be explained further: \\* The \\\"reverse\\\"\ntrigger turns positive into negative actions, and vice versa. \\* The\nreverse trigger is given a value (e.g. \\\"-5\\\") which determines;\n\n- Which type of action is reversed \\-- + (positive), - (negative)\n or \\* (both)\n- The maximum strength of that type of action required for the reverse\n to take effect. \\* Thus, this: \\<PRE\\>relation:as:playfully = ({\n 0.1, 0.0, -0.2, -0.2, \\\"reverse=-5\\\" })\\</PRE\\>will turn any\n negative actions into positive, if their strength is less than 5. \\*\n And this: \\<PRE\\>relation:as:hatefully = ({ -0.5, -0.5, 0.5, 0.5,\n \\\"reverse=+10\\\" })\\</PRE\\>will turn any positive actions into\n negative, if their strength is less than 10.\n\nThus, we could frown (negative ranged, strength 4) playfully\n(reverse=-5) at someone and the action would be interpreted as a\npositive ranged, not a negative ranged. But if we kick (negative\ntouching, strength 20) playfully (reverse=-5) at someone, the action\nwould remain negative, as 20 is not less than 5.\n\nThe next set of options define details (body-parts) of the NPC which\naffect the action. Using these settings, we can for instance say that\nany touching actions, positive or negative, are regarded as negative if\nthe detail targeted is \\\"eye\\\" or \\\"eyes\\\";\n\n relation:detail:eye = \"reverse=t+99\"\n relation:detail:eyes = \"reverse=t+99\"\n relation:detail:groin = \"reverse=+99\"\n\n\\* The first entry sets it up so that any touching, positive actions in\nwhich the \\'eye\\' of the NPC is targeted, are reversed (made negative)\nif the strength is less than 99 (which effectively means \\'all\\'). \\*\nThe second entry does the same as the first, for the \\'eyes\\' detail. \\*\nThe third entry reverses all positive actions (ranged or touching)\ntargeting the NPC\\'s groin.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n RichardY Richard_s_yale@hotmail.com\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 10 Aug 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoRelConRelations.md","path":"docs/unedited/NIPTodoRelConRelations.md","url":"/docs/unedited/NIPTodoRelConRelations.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092840866\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Script system\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> COMPLETED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nSee [library: replaying](NIPLibRefReplaying).\n\nReplaying and recording updated. New +nip tools added\n(connect/disconnect). A wide range of documentation is available on this\ntopic.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- -----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@mortalis.skotos.net>\n --------------- ---------- -----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A script system for prerecorded\ninteraction between NPC\\'s.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> MEDIUM\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Completed May 21st, 2004.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\n**Deployment:**\n\nThe system is intended to create scenes between NPC\\'s, by creating a\nscene, and initiating a recording session in both NPC\\'s.\n\nA new control character (\\'@\\') will be introduced into the recording\nsystem, and will be used to determine delays between actions.\n\nA behavior data object will be used for each participating nipper, and\nan external data target will be used to store script-specific\ninformation (such as delays, behavior objects, scenario symbols, etc).\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\n**Functionality:**\n\nThis library/tool will first and foremost be used in situations where\nNPC \\\"scenes\\\" need to be replayed. Due to the static nature of\nprerecording the events, it is not recommended for use in situations\nwhere a player may wish to alter the course of the scene, as such will\nbe ignored.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nThis is mostly a tool, rather than an actual library. It involves an\nextension of the recording tool, and a new +NIP-tool (available through\na Merry-call as well).\n\nThe \\\"replaying\\\" library need to be loaded in at the NPC which\ninitiates the playback of the recording. All other NPC\\'s only need the\nappropriate appearance libraries.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 24 Feb 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoScriptSystem.md","path":"docs/unedited/NIPTodoScriptSystem.md","url":"/docs/unedited/NIPTodoScriptSystem.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1069812273\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Spawn control\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> IMPLEMENTED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nThis has been implemented (see [update reference \\#9](NIPUpdateRef9) for\nfurther information), and additionally the NIP and NIP-CORE-namespaces\nhave been auto-exported.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Skotos <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> The aspect of +spawning NPC\\'s.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> VERY HIGH\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> September, 2003.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe spawn control feature would add a trigger to the core NPC library\n(Lib:NIP:core) which would be executed whenever an NPC was spawned.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nSpawning an NPC is currently impossible. The original NPC object is the\nonly one working, and this is needless to say, a very bad thing.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nThis script will create a \\'act:start\\' script in the core library and\nthis would also be added to the \\\"initial functions\\\" system property.\n\nNote that this is not [the spawn system](NIPTodoSpawnSystem) albeit the\nname may be misleading. (the spawn system library was named\n\\\"spawn-control\\\")\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 04 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoSpawnControl.md","path":"docs/unedited/NIPTodoSpawnControl.md","url":"/docs/unedited/NIPTodoSpawnControl.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235721\\\" format=\\\"1.0\\\"\nversion=\\\"1.4\\\"}% [NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> b {\nfont-size: 12pt; font-weight: bold; } .query { font-size: 12pt; color:\n\\#ff0000; font-weight: bold; } .title { font-size: 20pt; font-weight:\nbold; color: \\#000000; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPTodoStyle.md","path":"docs/unedited/NIPTodoStyle.md","url":"/docs/unedited/NIPTodoStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1151683929\\\" format=\\\"1.0\\\"\nversion=\\\"1.5\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Relations structure tool\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> DEPRECATED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\n\\<font color=\\'indigo\\'\\>This todo entry has been disbanded in favor of\nthe new relations system, which is in place, fully functional, and with\na more solid implementation structure. See the relations system notes\nfor further information.\\</font\\>\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n --------------- ---------- ----------------------------\n **Who** **From** **Contact information**\n Main.KalleAlm Marrach <kalle@marrach.skotos.net>\n --------------- ---------- ----------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A +NIP-tool to create/manipulate\nrelations structure data for NPC\\'s.\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> HIGH.\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Unknown.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe relations structure tool will be managed through the use of\nPopup()\\'s, and will contain a number of pages for each section of the\nstructure; such as **relation types**, **relation verbs**/**adverbs**,\nand **relation detail modifiers**.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThe relations structure data is the rules mapped up for one or several\nNPC\\'s. It is used to determine the types of relationships an NPC can\nenter into with those in its environment; it is used to determine the\nmeaning of actions performed by those, and to classify everyone\naccording to how they act in the NPC\\'s presence. This data is much too\ncomplicated to write without some form of tool.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email]\n Leanan leanan@marrach:skotos.net \n Cassandra katherin.noble@sbcglobal.net \n [insert a separate line above this one]\n\n\\-- Main.KalleAlm - 24 Aug 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPTodoToolRelationStructure.md","path":"docs/unedited/NIPTodoToolRelationStructure.md","url":"/docs/unedited/NIPTodoToolRelationStructure.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1145975182\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPTodoStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>TODO: Verbal Delivery System\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>PROJECT STATUS\\</font\\> NOT STARTED\n\n\\<font class=\\\"query\\\"\\>STATUS NOTES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>ASSIGNED CODER(S)\\</font\\>\n\n ----------------- ------------------- ------------------------------\n **Who** **From** **Contact information**\n Main.SahraFrost Lovecraft country <arshi@lovecraftcountry.com>\n ----------------- ------------------- ------------------------------\n\n\\<font class=\\\"query\\\"\\>WHAT?\\</font\\> A +NIP-Library to deliver verbal\nmessages to PC from NPC\n\n\\<font class=\\\"query\\\"\\>PRIORITY\\</font\\> LOW.\n\n\\<font class=\\\"query\\\"\\>ETA?\\</font\\> Unknown.\n\n\\<font class=\\\"query\\\"\\>HOW WILL IT WORK?\\</font\\>\n\nThe Verbal Delivery System will be set up as a mail delivery service,\nthough instead of delivering objects, it relays/delivers verbal messages\nthat have been given for a specifically named PC.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION\\</font\\>\n\nThe Verbal Delivery feature is vastly similar to the delivery-object\nlibrary however the only difference is that the delivered message is\nverbal. The prime example for this idea falls from a law enforced\nsystem. Though being able to write up a report or statement or complaint\nand handing it to an officer CNPC who then delivers it to the addressed\nofficer, a script can be added to the specified CNPC\\'s where the PC\nsimply entails or relays a message or complaint to the CNPC who stores\nit in their memory sytem, thus jotting it down on a piece of paper (like\nscrolls addressed to people) and when the NPC sees the person; the\nmessage is to be delivered to they simply whisper it, tell the occupant,\nrecite from their jotted down notes what has been told to them or hand\nthe paper in which the verbal message has been written upon by the NPC.\n\n\\<font class=\\\"query\\\"\\>TECHNICAL COMMENTS\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>LIST OF INTERESTED PARTIES\\</font\\>\n\nIf this subject interests you, please add yourself to the list below.\nThe more interest, the higher priority a subject will get. And also, by\ndoing so, we will be able to notify you specifically when this\nsubject\\'s status has changed.\n\n [Your Name] [Your Email] \n [insert a separate line above this one]\n\n\\-- Main.SahraFrost - 24 Apr 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n\nSweeeeeet.\n\n\\-- Main.KalleAlm - 25 Apr 2006\n","dir":"/docs/unedited/","name":"NIPTodoVerbalDelivery.md","path":"docs/unedited/NIPTodoVerbalDelivery.md","url":"/docs/unedited/NIPTodoVerbalDelivery.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1057185495\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>The +NIP-tool\\</FONT\\>\n\n**Introduction**\n\nThe +NIP-tool is the central tool for staff NPC control. It by default\ncontains a group of commands, but with relative ease, new, home-made\ncommands can be added to the tool.\n\nFor instance, the Marrach guard system has a few extensions that the\nSkotos Seven +NIP doesn\\'t have. One of those is the \\'precedence\\'\n+nip-command, which is used to set the required link on the chain, for\nexits.\n\nThe +NIP-tool is comprised of 9 basic functions: die, list, live,\npresent, record, register, scene, set, sig.\n\n\\* the functions [die](NIPToolDie) and [live](NIPToolLive) are used to\nturn NPC\\'s on/off \\* [list](NIPToolList) is used to display the NIP\ncontents of an NPC \\* [present](NIPToolPresent) is used to define the\nusage of the [presents lib](NIPLibRefPresents) \\*\n[record](NIPToolRecord) and [scene](NIPToolScene) are used to set up and\nrecord various behavior scenes and moods \\* [register](NIPToolRegister)\nis used to add a new function to the +NIP-toolkit \\* [set](NIPToolSet)\nis used to initialize a new NPC \\* [sig](NIPToolSig) is used to send a\nsignal to an NPC\n\n\\-- Main.KalleAlm - 29 Jun 2003\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--\n\nIn Admins.CompleteVersion, the explanation of +NIP is currently blank.\nTheoretically, would this be the page to link to for a \\\"more help\\\"\nexplanation? If not, what would? I don\\'t feel that I understand the\nsystem well enough to encapsulate it into a paragraph or two of\nexplanation, so I\\'m going off your opinions on this.\\<br\\> \\--\nMain.JonathanStickles - 30 Jun 2003\n\nThis\\'d be it, yea. This is the \\\"central\\\" page for all +NIP\ndocumentation, most of which is unwritten at this point. Expect to write\nit up before GenCon, but I can\\'t be less vague than that due to my\ncurrent situation I\\'m afraid.\\<br\\> \\-- Main.KalleAlm - 02 Jul 2003\n","dir":"/docs/unedited/","name":"NIPTool.md","path":"docs/unedited/NIPTool.md","url":"/docs/unedited/NIPTool.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085251429\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Connect\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+nip <NPC#1> and <NPC#2> \"connect ID [BID]\"`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\nLibrary: [Replaying](NIPLibRefReplaying), +NIP Tool:\n[record](NIPToolRecord).\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe \\'connect\\' function is used to enable a setting recording. Refer to\nChapter V in [the class on recording and behavior](NIPClassRecording)\nfor further information.\n\n\\-- Main.KalleAlm - 22 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolConnect.md","path":"docs/unedited/NIPToolConnect.md","url":"/docs/unedited/NIPToolConnect.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1058383145\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: die\\</FONT\\>\n\n\\<QUERY\\>SYNTAX:\\</QUERY\\> +nip \\<npc\\> \\\"die\\\"\n\n\\<QUERY\\>AFFECTED / CONCERNED LIBS/ETC.:\\</QUERY\\> None.\n\n\\<QUERY\\>GENERAL DESCRIPTION:\\</QUERY\\>\n\n\\'die\\' is used to signal to an NPC that it should shut down. This\nfeature is indirect, in that it only informs the NPC\\'s heartbeat thread\nthat it has to go down. The heartbeat thread **will finish whatever\nit\\'s working with** before shutting down.\n\n\\-- Main.KalleAlm - 16 Jul 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolDie.md","path":"docs/unedited/NIPToolDie.md","url":"/docs/unedited/NIPToolDie.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085251629\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Disconnect\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+nip <nipper> \"disconnect\"`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\nLibrary: [Replaying](NIPLibRefReplaying), +NIP Tool:\n[record](NIPToolRecord).\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe \\'disconnect\\' function is used to disable a setting recording.\nRefer to Chapter V in [the class on recording and\nbehavior](NIPClassRecording) for further information.\n\n\\-- Main.KalleAlm - 22 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolDisconnect.md","path":"docs/unedited/NIPToolDisconnect.md","url":"/docs/unedited/NIPToolDisconnect.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1115917800\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>+NIP TOOL: Hints\\</font\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+nip \"hints\"`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\n\n\\* [Emoting](NIPLibRefEmoting) (hints) \\* [How-to: hints](NIPHowHints)\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\n\\<img src=\\\"%ATTACHURLPATH%/hints.png\\\" alt=\\\"hints.png\\\" /\\>\n\nThe \\\"hints\\\" +nip tool is used to administer the rumors/hints data in\nNPC\\'s. The tool functions in two ways. One is to start it from a\nregular body. The tool will then ask for the woename of the hints data\nobject you wish to modify. The other is to possess the NPC whose hints\ndata you wish to modify, and then executing the command. The command\nwill then presume that you wish to edit that NPC\\'s hints data,\npresuming the NPC has hints data recorded.\n\n\\-- Main.KalleAlm - 12 May 2005\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br/\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n%META:FILEATTACHMENT{name=\\\"hints.png\\\" attr=\\\"h\\\" comment=\\\"\\\"\ndate=\\\"1115917781\\\" path=\\\"hints.png\\\" size=\\\"35088\\\" user=\\\"kallea\\\"\nversion=\\\"1.1\\\"}%\n","dir":"/docs/unedited/","name":"NIPToolHints.md","path":"docs/unedited/NIPToolHints.md","url":"/docs/unedited/NIPToolHints.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1115917500\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: live\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+nip <npc> \"live\"`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\> None.\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</FONT\\>\n\n\\'live\\' is used to start-up an NPC\\'s heartbeat thread. To note is that\nnot all NPC\\'s need to be enabled, only those whom actually \\\"act\\\" on\ntheir own.\n\n\\-- Main.KalleAlm - 09 Aug 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolLive.md","path":"docs/unedited/NIPToolLive.md","url":"/docs/unedited/NIPToolLive.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1076977200\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Present\\</FONT\\>\n\n\\<QUERY\\>SYNTAX:\\</QUERY\\> +nip \\<npc\\> \\\"present add\\|sub name/woe-name\nnewname1, 2, \\...\\\"\n\n\\<QUERY\\>AFFECTED / CONCERNED LIBS/ETC.:\\</QUERY\\>\n[presents](NIPLibRefPresents)\n\n\\<QUERY\\>GENERAL DESCRIPTION:\\</QUERY\\>\n\nThe \\'presents\\' function is used to deal with the management of items\nan NPC may offer to a character in the game, such as scrolls for\ncouriers or food for cooks. For example, if you wish to add the object\nNPC:misc:scroll to a summoned courier NPC, you would do:\n\n > +nip courier \"present add NPC:misc:scroll\"\n\nThis would automatically use the names provided in the scroll itself, so\nthat people could \\\"ask courier for scroll\\\" to receive a scroll, and\ncould also \\\"ask courier for parchment\\\" as that is a sname provided in\nthe object NPC:misc:scroll itself. However, if you wish to set the names\navaiable yourself, you may optionally do so as well:\n\n > +nip courier \"present add NPC:misc:scroll scroll, paper\"\n\n\\-- Main.KalleAlm - 09 Aug 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolPresent.md","path":"docs/unedited/NIPToolPresent.md","url":"/docs/unedited/NIPToolPresent.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1078077954\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Record\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\> +nip \\\"record\nstart\\|stop\\|switch Woe:for:behavior:DB mood/situation\\\"\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\n[emoting](NIPLibRefEmoting), [freemoting](NIPLibRefFreemoting)\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe \\'record\\' tool is used to specify and define the behavior of NPC\\'s\nin various situations, sometimes simply for a specific mood (angry, sad,\nhappy, hungry, ..) and sometimes for a specific situation (guard\nallowing or denying a person access to enter a room, for instance).\n\nDetailed explanations with examples are available: \\* [How To record\nbehavior.](NIPHowRecord) \\* [How To record\nfreemotes.](NIPHowRecordFreemotes) \\* [Tutorial: How to set up a\nscene.](NIPTutorialScenery)\n\n\\-- Main.KalleAlm - 09 Aug 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n\nA new feature will be added to this tool shortly, which can be used to\nreplay recorded data through the parser.\n\n\\-- Main.KalleAlm - 29 Feb 2004\n","dir":"/docs/unedited/","name":"NIPToolRecord.md","path":"docs/unedited/NIPToolRecord.md","url":"/docs/unedited/NIPToolRecord.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1060474373\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Scene\\</FONT\\>\n\n\\<QUERY\\>SYNTAX:\\</QUERY\\> \\* +nip \\<subject\\> \\\"scene \\<role\\>\\\" \\*\n+nip \\<subject\\> \\\"scene -\\\" \\* +nip \\\"scene \\--\\\"\n\n\\<QUERY\\>AFFECTED / CONCERNED LIBS/ETC.:\\</QUERY\\> None.\n\n\\<QUERY\\>GENERAL DESCRIPTION:\\</QUERY\\>\n\nThe \\'scene\\' tool is used to set up conditions for a specific situation\nin a recording.\n\nFurther information: [Tutorial: How to set up a\nscene.](NIPTutorialScenery)\n\n\\-- Main.KalleAlm - 09 Aug 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolScene.md","path":"docs/unedited/NIPToolScene.md","url":"/docs/unedited/NIPToolScene.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085235736\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% [NIPParentStyle]{.twiki-macro .INCLUDE} \\<style\\> b {\nfont-size: 12pt; font-weight: bold; } .query { font-size: 12pt; color:\n\\#009900; font-weight: bold; } .title { font-size: 20pt; font-weight:\nbold; color: \\#000000; } \\</style\\>\n","dir":"/docs/unedited/","name":"NIPToolStyle.md","path":"docs/unedited/NIPToolStyle.md","url":"/docs/unedited/NIPToolStyle.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085252025\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Tracking\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>SYNTAX:\\</font\\>\n\n`+nip \"tracking [on|off]\"`\n\n\\<font class=\\\"query\\\"\\>AFFECTED / CONCERNED LIBS/ETC.:\\</font\\>\nLibrary: [Replaying](NIPLibRefReplaying), +NIP Tool:\n[record](NIPToolRecord).\n\n\\<font class=\\\"query\\\"\\>GENERAL DESCRIPTION:\\</font\\>\n\nThe tracking function is used to enable/disable a BDO track link vector.\nRead [the class on recording and behavior](NIPClassRecording) for\nfurther information on this topic - in particular Chapter IV.\n\n\\-- Main.KalleAlm - 22 May 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolTracking.md","path":"docs/unedited/NIPToolTracking.md","url":"/docs/unedited/NIPToolTracking.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1065796492\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPToolStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>+NIP TOOL: Update\\</FONT\\>\n\n\\<QUERY\\>SYNTAX:\\</QUERY\\>\n\n +nip &lt;npc> \"update\"\n\n\\<QUERY\\>AFFECTED / CONCERNED LIBS/ETC.:\\</QUERY\\>\n\nNone/All.\n\n\\<QUERY\\>GENERAL DESCRIPTION:\\</QUERY\\>\n\nPerform any NIP updates on the target NPC manually.\n\nDo note that this feature occurs automatically whenever an NPC is\n(re-)started (see [+NIP TOOL: Live](NIPToolLive)). However, some NPC\\'s\nheartbeat threads are never executed and thus, this update tool was\nmade.\n\nFurther note that if an NPC crashes within a minute of the execution of\nan update, this may be due to instability caused by (cached) process\ndata, which is resolved by restarting the NPC. To ensure stability,\nupdate the NPC by stopping and restarting the heartbeat thread (again,\nsee [+NIP TOOL: Live](NIPToolLive)).\n\n\\-- Main.KalleAlm - 10 Oct 2003\n\n\\<QUERY\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT THIS\nSUBJECT\\</QUERY\\>\\<br\\> (Please, don\\'t forget to add your name to your\ncomment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPToolUpdate.md","path":"docs/unedited/NIPToolUpdate.md","url":"/docs/unedited/NIPToolUpdate.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1084984202\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<h1\\>Tutorial: Hack\\'N\\'Slash game\\</h1\\>\n\nSo you want to make a mindless text-based DOOM game? Sure, why not.\nLet\\'s go through how to do this, step by step. Well, almost. You\\'re\ngoing to have to come up with some type of combat system yourself, but\nthe automated NPC stuff will be ready for you here.\n\nThis tutorial is going to flat out presume that your combat system is a\ntiming-based, imperative-controlled system - like duelling in Marrach.\nIf it is, for example, based on a turn-based combat system or similar,\nthis won\\'t get you \\\"all the way.\\\" It might prove helpful, though, who\nknows?\n\nThis tutorial is divided into the following segments:\n\n[]{.twiki-macro .TOC}\n\n------------------------------------------------------------------------\n\n## Before We Begin\n\nBefore we start, here\\'s a checklist of things you\\'ll need to 1) have,\nor 2) make, before you continue.\n\n\\* A body of some sort for your NPC. \\* Any kind of weapons required to\nfight. \\* **A functional combat system**\n\nTo keep things simple, I\\'m going to presume from here on that you\\'ve\nmade two **verbs** for your combat system \\-- punch and rest \\-- and\nthat you\\'ve made a \\\"thug\\\" NPC which will try to punch anyone he\nencounters off their socks. The thug will check the property\n\\\"combat:health\\\", and if it drops below 50, he\\'s going to rest more\noften than he punches. If it\\'s above 50, he\\'s going to punch more\noften than he rests.\n\nOur \\\"punch\\\" command has a \\\"time setting\\\" of 2 seconds. This means if\nwe perform a punch, we will see \\\"You are too busy with something\nelse.\\\" if we try to do anything during the following 2 seconds. Our\n\\\"rest\\\" command has a time setting of 1 second, during which we\\'ll be\nextra vulnerable, etc. All this is hypothetical and in the combat system\nI\\'m not going to write here. However, these facts are important to keep\ntrack of later on, when we start creating the maps.\n\n------------------------------------------------------------------------\n\n## 1. Adding the appropriate libraries to the NPC.\n\nInitially, we only really need one library \\--\n[fighting](NIPLibRefFighting).\n\nLater on, we might want to fancify things a bit, but let\\'s keep things\nsimple for now.\n\n------------------------------------------------------------------------\n\n## 2. Setting the properties in our thug NPC by hand.\n\nWhile not the best nor most productive solution on the planet, setting\nthe properties by hand is quite educational, and will give you some\nunderstanding on how the fighting system works. It\\'s very simple, but\nit looks overwhelming at first.\n\n### 2.1. The imperative map.\n\nThe first and most important property is\n`nip:trait:fighting:imperative_map`. It contains a mapping with each\npossible combat action, pointing to each possible next combat action for\nthat action. which in turn points to an integer representation of how\nlikely it is that the NPC should perform that particular action. Sounds\nconfusing? It\\'s not. Look at this:\n\n ([ \"punch\" : ([ \"rest\" : 100 ]),\n \"rest\" : ([ \"punch\" : 100 ]) ])\n\nAccording to the above setup, the NPC will enter the fight and, say,\nbegin with a punch. After punching, the NPC will look at the \\\"punch\\\"\nmap (`([ \"rest\" : 100 ])`) and see what to do next. Since it only has\none viable alternative there, we can say with 100% certainty that the\nNPC will perform a \\'rest\\' after performing a \\'punch\\'.\n\nThe next time, the NPC will scan the \\\"rest\\\" map\n(`([ \"punch\" : 100 ])`), because the last action was a \\\"rest\\\". This\nwill go on until the combat is ended. (More about initiating/ending\ncombat later on.)\n\nAs you can see, the behavior of our friend the thug will be dreadfully\npredictable. He\\'ll punch, then rest, then punch, then rest, then punch,\netc. While we can\\'t do that much with a 2-verb combat system, we can\nstill make things a tad more interesting there. Let\\'s revamp the\n`nip:trait:fighting:imperative_map` property once more before we\ncontinue looking at the rest of the properties:\n\n ([ \"punch\" : ([ \"rest\" : 60,\n \"punch\" : 40 ]),\n \"rest\" : ([ \"punch\" : 60,\n \"rest\" : 40 ]) ])\n\nIn the above scenario, there\\'s going to be a lot more unpredictability\nin which the choosing of the command to perform is made. There is a 60%\nchance that the thug will, after punching, perform a rest, and a 40%\nchance that he will perform another punch. As you probably realize, this\nproperty can turn into a monster quickly, but once you understand the\nbasics behind it, it\\'s really not that big a deal. Let\\'s move on.\n\n### 2.2. The delay map.\n\nThe next property is `nip:trait:fighting:delay_map`. This map handles\nthe time between each action, for each action. Recall me saying that the\npunch took 2 seconds to perform, and the rest took 1? This is where we\nfeed this knowledge to the fighting system.\n\n ([ \"punch\" : ({ 2.1, 3.0 }),\n \"rest\" : ({ 1.1, 2.0 }) ])\n\nThe above says, in English: \\\"Each time I perform a \\\"punch,\\\" I should\nwait between 2.1 second and 3.0 seconds before my next action, and each\ntime I perform a \\\"rest,\\\" I should wait between 1.1 second and 2.0\nseconds, before my next action.\\\"\n\nNow, before you go putting ({ 0.01, 0.02 }), you should know that these\nvalues heavily affect the server performance. If you set these too low,\nenough amount of NPC\\'s are going to cause serious system lag, and your\ngame will be unplayable. Especially in a setting where timing is of\nessence. I recommend ({ 0.1, 0.5 }) as being the absolute lowest.\n\nAlso take into consideration that these values in a way define how\n\\\"good\\\" the NPC is. How fast the NPC is at acting. If you deliberately\nset these values to slower than what the system will accept, the NPC\nwill be generally regarded as weaker/less skilled. This is a classical\nway, commonly used in games to simulate varyingly difficult NPC\\'s.\n\n### 2.3. The condition map.\n\nAt this point, we\\'ve almost gotten all the way to a fully functional\nNPC combat system, actually. Not too difficult yet, is it? There\\'s one\nthing missing though - the link between the NPC\\'s behavior and the\nNPC\\'s state.\n\nTake for example an NPC with a grave wound. He or she would probably\nfight less offensive and try to keep their breath by resting more than\nan NPC who just skipped out of bed, having swallowed his last\nmustard-smeared baguette.\n\nIn order to do this, we need to come up with some appropriate property\nfor our combat system. A property that tells us how wounded we are.\nLet\\'s say there is an integer value, `trait:wound-count`, which is set\nto between `0` and `4`, where `4` equals `death` and `0` equals\n`unwounded`.\n\nNow, let\\'s say that the middle-ground for this is 2. Below 2, and\nwe\\'re considered relatively \\\"healthy,\\\" and we can slack on the\nresting and be more aggressive. Above 2 and we\\'re in a grave state and\nneed to rest more.\n\nSo, how on earth do we do this?\n\nThe condition map, `nip:trait:fighting:condition_map`, is a semi-complex\nmapping which consists of a number of settings, each in order to create\nany number of rules for any number of properties. The syntax for the\ncondition map is as follows:\\<verbatim\\>(\\[ \\\"\\<property in NPC\\>\\\" : ({\n\\<middle\\>, \\<effect\\>, ({ \\<positive affected actions\\> }), ({\n\\<negative affected actions\\> }) \\])\\</verbatim\\>\n\n\\* `<property in NPC>` - This is the name of a numeric property that we\ngrab from the nipper each time. \\* `<middle>` - This is the \\\"middle\\\"\nvalue. The middle value is subtracted from the property taken from the\nNPC to determine whether the property is negative or positively\naffecting the NPC. If the resulting value\n(`<property from NPC> - <middle>`) is less than zero, the negative\naffected actions list is modified and the positive affected actions list\nis untouched. If the resulting value is more than zero, the positive\naffected actions list is modified and the negative list is untouched. \\*\n`<effect>` - The resulting value is multiplied by the effect to receive\nthe final value which in turn is added to each and every action listed\nin the appropriate actions list, **if these actions are also available\nin the imperative map**.\n\nEnough confusing ourselves. Here\\'s an example:\n\n ([ \"trait:wound-count\" : ({ 2, 10.0, \"rest\", \"punch\" }) ])\n\nIn the above example, we\\'re grabbing `trait:wound-count` from the\nnipper. We subtract 2 from that. If the nipper is unwounded, that means\nwe\\'ll get -2. That\\'s negative, which means \\\"punch\\\" will be affected.\nWe multiply that with the effect - 2 \\* 10 = 20. And now we add 20 to\n\\\"punch\\\".\n\nIf the NPC has a grave wound (`trait:wound-count` set to `3`), we would\nsubtract 2 from 3 - and get 1. 1 is positive, which means \\\"rest\\\"\nshould receive a bonus. 1 \\* 10 = 10, thus rest receives a +10 bonus.\n\nThe `<middle>` value can be used to determine how aggressive our thug\nis. By setting the middle value higher, we will have a higher threshold\nbefore we start going into \\'rest\\' mode. By setting it lower, we will\neasier go into \\\"rest\\\" mode as soon as we\\'re wounded.\n\nAt this point, we\\'re done with the properties. Now it\\'s time to go\ninto the whole aspect of \\\"initiating a fight\\\".\n\n------------------------------------------------------------------------\n\n## 3. Initiating and resolving a fight.\n\nThere are about as many solutions to initiating a fight as there are\nfighting systems out there.\n\nIn our simple combat system, Harry types \\\"fight Lucy\\\", and Lucy\nresponds by typing \\\"fight Harry.\\\" When both have done so, each\nparticipant (Harry and Lucy) acts \\\"combat/start\\\", which in Merry would\nlook something like:\\<verbatim\\> Act( \\$actor, \\\"combat/start\\\" ); Act(\n\\$opponent, \\\"combat/start\\\" );\\</verbatim\\>\n\nWhen a fight ends, for whatever reason, be that A wounds B, or A kills\nB, or B surrenders, etc., each participant acts \\\"combat/stop\\\" to\nsignal the end of the fight, which in Merry would look something\nlike:\\<verbatim\\> Act( \\$actor, \\\"combat/stop\\\" ); Act( \\$opponent,\n\\\"combat/stop\\\" );\\</verbatim\\>\n\nNow, we can pretty much presume the following: \\*\n`merry:react:fight-(role)` can be used as a trigger for **challenges\nupon the NPC** \\* `merry:act:combat/stop` can be used as a trigger for\n**current fight has ended** \\* `merry:act:combat/start` can be used as a\ntrigger for **new fight began/opponent accepted our challenge**\n\nTo keep things simple, we\\'re going to restrict ourselves to being\nchallenged and accepting challenges. We won\\'t go into the whole ordeal\nof detecting targets and such.\n\nAnd we\\'ll still keep to the whole matter of consent, which might not be\ndesired, in the end.\n\n### 3.1. Detecting a challenge placed upon us.\n\nOur thug must be able to detect when someone tries to attack him.\nLuckily for him (and us), we\\'ve already figured out that\n`merry:react:fight-(role)` is the appropriate signal for detecting this\n(where `(role)` is e.g. \\\"who\\\", depending on how the fight verb is set\nup).\n\nSince this system will not include weapons and such, the script that\nhandles the initiating will be very simple.\n\n --- merry:react:fight-who in Thug NPC ---\n /*\n\n D=We're challenged! And we'll gladly accept!\n\n */\n\n /*\n * Let the action fall through.\n * It's important that we have TRUE set\n * as the second argument to the $delay()\n * call below. Otherwise, the fight command\n * will not go through in full.\n */\n $delay(2+random(2),TRUE);\n\n /*\n * Challenge back.\n */\n Act( this, \"fight\", $who: $actor );\n\n /*\n * Hand over control to the fighting system.\n */\n ::core_fight_init();\n -----------------\n\nThat\\'s it for the initializing of fights. Possibly, you might want to\nmake the NPC grab and wield a sword or a machine gun or whatever he/she\nmight be using.\n\n### 3.2. Detecting the end of a fight.\n\nEqually lucky are we that we already at this point know about\n`merry:act:combat/stop` being the signal triggered when a fight ends. So\nwe simply do\\...\n\n --- merry:act:combat/stop in Thug NPC ---\n /*\n\n D=Fight is over. Stop fighting.\n\n */\n\n /*\n * Immediately (no delaying) signal to the \n * fighting thread that it should abort.\n */\n ::core_fight_done();\n\n /*\n * Then simply return TRUE.\n */\n return TRUE;\n ---------------\n\n------------------------------------------------------------------------\n\n## 4. Try it.\n\nIf you actually got this far, congratulations. I know it\\'s not easy to\ngo through all that nonsense without once seeing results on the way.\nIt\\'s unfortunately not that easy to see the results without getting\nthis far, which we\\'ve managed to do now. So cheers to us.\n\nFirstly, unsummon your thug and +spawn a copy of him. Enable the copy,\nif that will do anything at all, and then try to fight him. If all went\nwell, he will accept your challenge and proceed to beat the snot out of\nyou. If not, make use of the error logs. They\\'re fascinatingly helpful.\n\n\\-- Main.KalleAlm - 09 May 2004\n","dir":"/docs/unedited/","name":"NIPTutorialHackNSlash.md","path":"docs/unedited/NIPTutorialHackNSlash.md","url":"/docs/unedited/NIPTutorialHackNSlash.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1069693680\\\" format=\\\"1.0\\\"\nversion=\\\"1.2\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>Tutorial: Predator and prey\n(cat\\'n\\'rat).\\</font\\>\n\n*This tutorial describes how to create two NPC\\'s and set them up as\npredator, and prey. I am going to presume that you are well versed with\nhow to create and set up NPC\\'s in general, and will mainly focus on the\naspect of the predator/prey features. However, if you follow the\ninstructions step-by-step and do as I do, you will end up with the\ncorrect results, regardless.*\n\nThe first thing I\\'m going to ask you to do is to set two NPC\\'s up. My\nsuggestion is a cat and a rat, but it\\'s up to you what you choose in\nthe end (snake/mouse, lion/gazette, wolf/rabbit, whatever). Set these up\nas NPC\\'s and place them both in the same room (summon, don\\'t spawn).\n\n[]{.twiki-macro .TOC depth=\"4\"}\n\n------------------------------------------------------------------------\n\n# Set npc:master in the prey NPC.\n\nThe first thing I\\'m going to ask you to do is to target the PREY NPC\n(the mouse/gazette/rabbit/whatever) with the following command:\n\n > +setp [target] \"npc:master 1\"\n\nThis will make any predators that see this object disregard it\nimmediately, as it is a \\\"master\\\" copy, and we don\\'t want those\ndestroyed or eaten.\n\n------------------------------------------------------------------------\n\n# The predator, basic.\n\nThe predator NPC is the hunter. It\\'s the NPC that will eventually track\ndown and (attempt to) turn prey NPC\\'s into a juicy dinner. We\\'re going\nto start by defining the predator NPC.\n\n## Adding a bunch of libraries.\n\nWe\\'re going to hardcore-like add a few libraries to the predator. In\nthis tutorial, we\\'re going to use emotes (behavior) and eating \\-- and,\nof course, the predator library.\n\nFrom here on, I\\'m going to refer to the **predator** as \\'cat\\'.\n\n > +setp cat \"add emoting\"\n > +setp cat \"add offers\"\n > +setp cat \"add eating\"\n > +setp cat \"add predator\"\n\nYou should be getting a bunch of output after each command. I\\'ve chosen\nto not print this information out, here.\n\n------------------------------------------------------------------------\n\n## Look over what we\\'ve got now.\n\nLet\\'s take a look at the values we have gathered up at this point:\n\n > +stat cat \"property:export:nip:*\"\n -- Properties (export:nip:*)--\n Property: export:nip:offer:scripts = ({ \"handler:offer:eating\" })\n <b>Property: export:nip:stats:agility = 10\n Property: export:nip:stats:offense = 10</b>\n Property: export:nip:trait:eating:accepts = ([ \"base:edible\":1, \"nip:food\":1 ])\n Property: export:nip:trait:eating:burn = 300\n Property: export:nip:trait:eating:grammes = 2000\n Property: export:nip:trait:emoting:frequency = 10\n <b>Property: export:nip:trait:predator:prey = ({ \"prey\" })\n Property: export:nip:trait:predator:scavenger = 0</b>\n\nBold entries are settings that relate to the predator library. We\\'ll\neventually change most of those.\n\n\\* \\\"nip:stats:agility\\\" determines how agile the predator is \\*\n\\\"nip:stats:offense\\\" determines how skillful the predator is in\nattacking \\* \\\"nip:trait:predator:prey\\\" is a list of the various prey\ntypes this NPC would consider valid targets \\*\n\\\"nip:trait:predator:scavenger\\\" is a flag which decides whether or not\nthe NPC is a scavenger. If unset (default), the NPC will ONLY eat food\nit killed itself.\n\nWe\\'re leaving these be for now, and turn our attention over to the prey\nNPC.\n\n------------------------------------------------------------------------\n\n# The prey, basic.\n\nThe prey is the hunted. It is the food for the predators of the world.\nWe could leave it at that, if it wasn\\'t for the fact we\\'re actually\ngoing to tackle simulating the prey, and include support for it to\n\\\"look dead\\\" among other things.\n\nFrom here on, I will refer to \\'the prey\\' as \\\"rat\\\".\n\n## Adding a bunch of libraries.\n\nOnce more, we\\'re going to simply toss in a few libs in the NPC without\ngiving them much thought. The rat\\'s going to have emoting, and of\ncourse prey.\n\n > +setp rat \"add emoting\"\n > +setp rat \"add prey\"\n\nYou should be getting a bunch of output after each command. I\\'ve chosen\nto not print this information out, here.\n\n------------------------------------------------------------------------\n\n## Looking over the values we\\'ve got.\n\nLet\\'s take a peek at the rat\\'s values now as well.\n\n > +stat rat \"property:export:nip:*\"\n -- Properties (export:nip:*)--\n <b>Property: export:nip:start = ({ \"handler:start:prey\" })\n Property: export:nip:stats:agility = 10\n Property: export:nip:stats:defense = 10</b>\n Property: export:nip:trait:emoting:frequency = 10\n <b>Property: export:nip:trait:prey:type = ({ \"prey\" })</b>\n\nBold values indicate properties that are related to the \\'prey\\'\nlibrary;\n\n\\* nip:start is a relatively undocumented wrapper, which contains a list\nof scripts to execute when a copy of the NPC is spawned. We may safely\ndisregard what this further means for now. \\* nip:stats:agility defines\nhow agile the NPC is \\* nip:stats:defense defines how skillful the NPC\nis at fending off attacking predators \\* nip:trait:prey:type contains a\nlist of the prey\\'s type(s). We\\'re going to look into this a little\nmore in a moment.\n\n------------------------------------------------------------------------\n\n# Seeing the result.\n\nUnsummon both your NPC\\'s and spawn a copy of each. (Don\\'t forget to\n\\\"drop\\\" them, since they probably end up in your hands.)\n\nAfter doing so, enable the cat.\n\n > +nip cat \"live\"\n\nNow go grab a sandwich and a beer. When you come back you should see\nsomething like this:\n\n A brown rat dies from its wounds.\n\n A black cat takes the corpse of a brown rat.\n\n A black cat takes a bite of the corpse of a brown rat.\n\n A black cat takes a bite of the corpse of a brown rat.\n\n A black cat takes a bite of the corpse of a brown rat.\n\n A black cat finishes eating.\n\nBut it\\'s probably gonna be more like a spammage of \\\"\\[predator\\] takes\na bite of the corpse of \\[prey\\]\\\", neverending. Remember that each bite\ntaken is 0.015 mass. Which means if you set an NPC up with e.g. 0.2 mass\n(which is relatively tiny), it\\'s going to take 14 bites to eat it all.\nFor a large animal, this isn\\'t odd at all. For smaller beasts, it may\nbe ridiculous that a cat takes fourteen bites of a mouse.\n\nSlay the predator (and the rat, if it\\'s not eaten by now) and summon\nthe two master objects again.\n\n## Tweaking the values.\n\nThings are working now, but we need to tweak those values we looked at\nearlier. For instance, there is **no** message whatsoever when the rat\nmanages to escape an attack. And there is only the \\\"*A brown rat dies\nfrom its wounds.*\\\" message to indicate that the brown rat was ever\nattacked.\n\nThese two types of messages are handled through behavior data objects.\nIf you don\\'t know what these are, you may want to [check into the \\\"how\nto record behavior\\\" how-to](NIPHowRecord) as well as the [scenery\ntutorial](NIPTutorialScenery).\n\nTo make this useful for you I\\'m going to use my name as the name of the\nbehavior objects. I\\'m simply going to name them\n<Data:tutorial:kalle:predator> and <Data:tutorial:kalle:prey>.\n\n### The predator behavior\n\nThe first one is going to contain predator specific data. The predator\nbehavior currently contains only one \\\"situation\\\" (or \\\"mood\\\"),\n**KILL**.\n\nThis situation is when the predator kills its prey. So let\\'s record a\nfew \\'killing\\' actions.\n\nStart by creating the data object for the predator. Name it\n<Data:tutorial:yourname:predator>.\n\n > +cobj propcontainer \"Data:tutorial:kalle:predator\"\n OK.\n\nThe next thing you wanna do is posses the predator.\n\n > +possess cat\n You inhabit a black cat.\n\nNow we need to set the rat up as our target. This is explained in detail\nin the [scenery tutorial](NIPTutorialScenery).\n\n > +nip rat \"scene prey\"\n Scene role (prey) set to a brown rat.\n\nFinally, before we start emoting, we need to enable recording in the\n<Data:tutorial:yourname:predator> object, for the situation KILL.\n\n > +nip \"record start Data:tutorial:kalle:predator KILL\"\n Begun recording for mood/condition 'KILL' in <Kalle:tutorial:cat>. When you are done, type: +nip \"record stop\"\n\nNow we emote a few attacking moves. To make our moves actually go\nthrough, start by +forcing the rat to \\\"consent allow all\\\"\n\n > +force rat \"consent allow all\"\n Forcing a brown rat to: consent allow all\n Consent list for a brown rat has been modified.\n\n > suddenly pounce on rat \"!\n You approach a brown rat.\n\n You suddenly pounce on a brown rat, \"!\"\n [STO:1]\n\n > swiftly break rat's neck \"!\n You swiftly break a neck, \"!\"\n [STO:2]\n\n > bite rat's head predatoril \"!\n You bite a head predatorily, \"!\"\n [STO:3]\n\n > swing my claw at rat suddenl \"!\n You swing your claws at a brown rat suddenly, \"!\"\n [STO:4]\n\n > +nip \"record stop\"\n Stopped recording in <Kalle:tutorial:cat>.\n\n > +nip \"scene --\"\n Scene deleted.\n\nFeel free to go on if you wish. Four is more than enough to prove my\npoint, however.\n\nThe two last commands unloads the recorded (important) and removes the\nscene set up (not equally important, but a good thing to do,\nnonetheless).\n\n------------------------------------------------------------------------\n\n### The target (prey) behavior\n\nNow we\\'re going to record for the prey. We\\'re going to record for when\nthe prey manages to evade the predator\\'s attack.\n\n > +cobj propcontainer \"Data:tutorial:kalle:prey\"\n OK.\n\n > +possess rat\n You inhabit a brown rat.\n\nIn the predator recording, we set the rat up as the role \\\"prey\\\". In\nthis case, we\\'re going to set the **cat** up as the \\\"**predator**\\\".\nThese roles are specifically required and used in the predator/prey\nfeature, and must be named exactly so.\n\n > +nip cat \"scene predator\"\n Scene role (predator) set to a black cat.\n\nPreviously, we started recording in the <Data:tutorial:kalle:predator>\nobject, for the situation \\\"KILL\\\". Now, we\\'re going to record in\n<Data:tutorial:kalle>:**prey** for the situation \\\"**EVADE**\\\":\n\n > +nip \"record start Data:tutorial:kalle:prey EVADE\"\n Begun recording for mood/condition 'EVADE' in <Kalle:tutorial:rat>. When you are done, type: +nip \"record stop\"\n\nAnd we record. I am +forcing the cat to \\\"consent allow all\\\" just in\ncase.\n\n > +force cat \"consent allow all\n Forcing a black cat to: consent allow all\n Consent list for a black cat has been modified.\n\n > hysterically run from cat \"!\n You hysterically run from a black cat, \"!\"\n [STO:1]\n\n > squeakil scamper around cat \"!\n You squeakily scamper around a black cat, \"!\"\n [STO:2]\n\n > fearfull run from cat's paws \"!\n You fearfully run from a black cat's paws, \"!\"\n [STO:3]\n\n > jump over cat's paws evasive \"!\n You jump over a black cat's paws evasively, \"!\"\n [STO:4]\n\n > +nip \"record stop\"\n Stopped recording in <Kalle:tutorial:rat>.\n > +nip \"scene --\n Scene deleted.\n\n > +possess kalle\n You inhabit Kalle.\n\nAgain, feel free to continue. Four is more than enough.\n\n------------------------------------------------------------------------\n\n### Set up the behavior properties.\n\nWe\\'ve recorded for both the rat and the cat, but so far we haven\\'t set\nthem up to use the stuff we recorded. This is simple.\n\n > +setp cat \"nip:behavior:predator <Data:tutorial:kalle:predator>\"\n > +setp rat \"nip:behavior:prey <Data:tutorial:kalle:prey>\"\n\nAnd we\\'re done.\n\n------------------------------------------------------------------------\n\n## Taking another look at things.\n\nUnsummon the NPC\\'s again, and spawn a copy of each into your\nenvironment.\n\nNow, unfortunately, you need to consent these fellows manually. A fix to\nthis will hopefully come to life at some point. For now, do:\n\n +force cat \"consent allow all\"\n +force rat \"consent allow all\"\n\nNow enable the cat.\n\n > +nip cat \"live\"\n\nAnd grab another beer.\n\nNote that the amount of time you need to wait is directly related to the\namount of things in the room. The more stuff, the longer wait. This is\nbecause the predator will grab random stuff continuously, and if\nwhatever it found is valid prey, it will attack. This is the only\n\\\"randomizer\\\" the predator goes by.\n\nDepending on how fast a drinker you are, the size of your beer, and the\namount of things in your environment, about half a bottle later you\nshould see something similar to the following (depending on randomness\nand what you actually recorded previously):\n\n A black cat moves from the gate to the living room to a brown rat.\n\n A black cat swiftly breaks a brown rat's neck.\n\n A brown rat dies from its wounds.\n\n A black cat takes the corpse of a brown rat.\n\nOr, if the rat \\\"wins\\\" the initial attack, you should see something\nlike:\n\n A brown rat hysterically runs from a black cat.\n\n A brown rat moves from the gate to the living room to a black cat.\n\n A brown rat squeakily scampers around a black cat.\n\n A black cat moves from the gate to the living room to a brown rat.\n\n A black cat swings her claws at a brown rat suddenly.\n\n A brown rat dies from its wounds.\n\n A black cat takes the corpse of a brown rat.\n\n# Note about prey types.\n\nAs we said earlier, the predator has:\n\n Property: export:nip:trait:predator:prey = ({ \"prey\" })\n\nAnd the prey has:\n\n Property: export:nip:trait:prey:type = ({ \"prey\" })\n\nThese two properties coordinate in a way that requires a brief example.\n\n\\* A cat would look at a rat as prey. \\* A cat would also look at a\nmouse as prey. \\* A cat would in fact probably regard a squirrel as\nprey. \\* A cat would probably regard a bunny as prey. \\* But, a cat\nwouldn\\'t consider a gazette as prey.\n\nNow, if we look at it the other way:\n\n\\* A rat is an animal, a small rodent. \\* A mouse is an animal, a small\nrodent. \\* A squirrel is an animal, a small rodent. \\* A bunny is an\nanimal, a small mammal. \\* A gazette is a medium-sized animal.\n\nHere we see a bunch of \\\"classes\\\" for animals. We\\'ve listed: rat,\nsmall, rodent, mouse, squirrel, bunny, mammal, gazette, medium-sized.\n\nIf we chose to use these classes, then the cat predator object would\n*probably* have the following property:\n\n nip:trait:predator:prey = ({ \"rat\", \"small\", \"rodent\", \"mouse\", \"squirrel\", \"bunny\", \"mammal\" })\n\nA rat prey, would probably have this:\n\n nip:trait:prey:type = ({ \"small\", \"rodent\", \"rat\" })\n\nA bunny prey, would probably have this:\n\n nip:trait:prey:type = ({ \"small\", \"mammal\", \"bunny\" })\n\nA gazette would have:\n\n nip:trait:prey:type = ({ \"gazette\", \"medium-sized\" })\n\nNow, the trick comes where the cat finds prey in the wilderness. If the\ncat found a bunny (small, mammal, bunny), the check would go: \\* Do we\nhave \\\"small\\\" listed in our predator:prey list? Yes. \\* Do we have\n\\\"mammal\\\" listed? Yes. \\* Do we have \\\"bunny\\\" listed? Yes.\n\nValid target, then.\n\nBut, if the cat found a gazette (gazette, medium-sized), the check would\ngo: \\* Do we have \\\"gazette\\\" listed in our predator:prey list? No.\n\nInvalid target.\n\n------------------------------------------------------------------------\n\n# Conclusion\n\nThe NPC\\'s currently solve consent issues by moving the predator into\nproximity with the prey right before the attack. This is a hack, but it\nworks, and it is a work-around for the consent-issues earlier.\n\nThe predator and the prey NPC both have some values you can tweak around\nto make things better. Take a peek at the [todo:\npredator](NIPTodoPredator), as well as the\n[predator](NIPLibRefPredator)- and [prey](NIPLibRefPrey)-library\nreference pages for details on each of these properties.\n\n\\-- Main.KalleAlm - 20 Nov 2003\n","dir":"/docs/unedited/","name":"NIPTutorialPredatorPrey.md","path":"docs/unedited/NIPTutorialPredatorPrey.md","url":"/docs/unedited/NIPTutorialPredatorPrey.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1092252000\\\" format=\\\"1.0\\\"\nversion=\\\"1.3\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>Setting up a scene.\\</FONT\\>\n\n\\[*Also check out the [Recording class](NIPClassRecording) for a\nthorough documentation on the aspect of behavior.*\\]\n\n**Introduction:**\n\nWith the new conditional behavior system in place, it\\'s time to tackle\nthe concept of how to make a CNPC behave in various situations.\n\nWe\\'ve already covered how to record for when a CNPC is hungry or\nsleepy, or happy, sad, etc. but those are basic matters. What if we want\nto set up how a guard acts when someone of low rank wants to enter a\nroom he\\'s not allowed to enter?\n\nOr what if a high-ranked person wishes to enter a room he\\'s allowed to\nenter? Immediately, we can think of a few emotes here. Bowing deeply to\nthe latter. Snorting unamusedly at the first.\n\nWhat if we want to record how a cat interacts with someone it\\'s fond\nof? Or someone it despises?\n\nIn this tutorial we\\'re going to set up a few scenes to get to know how\nthis particular part of the system works.\n\n**The servant and the rat.**\n\nSo, we\\'ve decided to write up the behavior for a servant who sees a\nrat. Relatively easy, and straight forward.\n\nIn this scene, there are really only one external subject, the rat. Then\nwe of course have the standard, always-available, here and me/any\nbodypart of mine.\n\n**The first thing we\\'re going to do** is to find some appropriate\nobject that will serve as the rat in the scene. To be simple and\naccurate, I\\'ve decided to +spawn a copy of NPC:child:rat/black\n\n StoryCoder Kalle's black rat arrives.\n You drop a black rat.\n\nThere we go. Now, due to this scene\\'s simplicity, I can set it up now.\n\nBefore I do, however, some things need to be explained.\n\nLike, every subject in the scene has a symbolic name. Right off, the\nroom I\\'m in has the symbolic name \\\"here\\\". That\\'s always there. I\nhave the symbolic name \\\"me\\\". Any details of mine have the symbolic\nnames \\\"me:detailname\\\", so my arm would be \\\"me:arm\\\".\n\nWhen we set up a scene, we add external symbolic names to various things\nin our immediate presence. In our case, we\\'re going to give the rat the\nsymbolic name \\\"beast\\\". This is by our own choice, we could just as\nwell call it \\\"rat\\\" or \\\"animal\\\" or \\\"furrything\\\". I will explain the\nreason for why this is the way it is shortly.\n\n**To set it up,** I use the +nip command\\'s \\'scene\\' function. This\nfunction is fairly simple and straight-forward. I +nip at something and\nevoke \\\"scene symbolic name\\\".\n\nAs I said before, I decided to give the rat the name \\\"beast\\\". Thus, I\ndo:\n\n > +nip rat \"scene beast\"\n Scene role (beast) set to a black rat.\n\nAnd I\\'m done. Trying not to repeat myself in other documents (namely,\nthe how to for recording behavior), I\\'m going to swiftly step through\nsetting up the behavior database for the servant.\n\n**WOE** \\* I clone Core:PropertyContainer \\* I give the cloned copy the\nname <Data:NIP:behavior:servants:beast>\n\nNow that I\\'ve created the woe object, there\\'s something I need to\ncover before I start recording.\n\nIn this particular case, the -mood- I use is actually not a real mood.\nIt\\'s some appropriate name for the situation in question. In this case,\nI\\'m going to call the mood \\\"BEAST\\\". It\\'s not a real mood, and won\\'t\never be added to the array of moods in the NPC itself. It\\'s something\nthat will be triggered through other means. More about that later.\n\n\\* I type in \\<PRE\\>+nip \\\"record start\n<Data:NIP:behavior:servants:beast> BEAST\\\"\\</PRE\\>\n\nAnd I\\'m done. Now I can interact with the rat and it will be recorded\nappropriately. So I do this swiftly:\n\n ---\n > squeak at rat \"!Eeep!\"\n You squeak at a black rat, \"!Eeep!\"\n [STO:1]\n\n > grimace disgusted at rat \"!Someone take it away!!\"\n You grimace disgustedly at a black rat, \"!Someone take it away!!\"\n [STO:2]\n ---\n\nThat\\'s enough to prove my point. Now, I\\'ve got a servant set up for\nthis, as the process on how to do this is fairly well covered in other\nareas. But here\\'s a quick \\\"set up 1-2-3\\\" in case you\\'re unsure. I\\'m\nusing the \\'emoting\\' library.\n\n\\* +nip \\\"set woename-for-npc\\\" \\* +setp NPC \\\"add emoting\\\"\n\nNow, I want to make a little script that checks if any rats are in my\nimmediate vicinity. If I find a rat, I trigger the \\\"beast\\\" behavior.\nI\\'m going to call this script lib:beast:decide and put it in a new\nlibrary, which I set up and call Marrach:NIP:lib:beast\n\n\\* Clone Core:PropertyContainer \\* Rename to Yourtheatre:NIP:lib:beast\n\n --- <B>merry:lib:beast:decide</B> in <B>Marrach:NIP:lib:beast</B> ---\n /*\n\n D=Rat-squeak sig-hook script.\n\n */\n\n /* We need an object, and an object array for the room. */\n object env, *inv;\n\n /* And an integer for the check. */\n int i; \n\n env = this.\"base:environment\"; /* We need the room itself. */\n inv = env.\"base:inventory\"; /* And the room's 'inventory'. */\n\n /* Step through each item in the room's inventory, */\n for( i = 0; i < sizeof( inv ); i++ )\n\n /* And check the room to see if we find any rats. */\n if( inv[i].\"base:volition\" && \n arr_to_set( \n Get( inv[i], \"details:\"+NRefDetail(inv[i])+\":snames\" )\n )[\"rat\"] ) {\n\n /* We found a rat! */\n $beast = inv[i];\n\n Call( this, \"handler:emoting:parse\", $db: ${Data:NIP:behavior:servants:beast}, $mood: \"BEAST\" );\n\n }\n ---\n\nThat might seem a bit confusing. That\\'s okay, though. Let\\'s look at a\nfew segments of the above that are important:\n\n --- <B>the IF case</B> ---\n if( inv[i].\"base:volition\" && \n arr_to_set( \n Get( inv[i], \"details:\"+NRefDetail(inv[i])+\":snames\" )\n ---\n\nWe make two checks there.\n\n\\* Does the object have volition? This is somewhat important, as we\\'re\ntaking a little risk here. After all, we don\\'t want the servant to\nstart squeaking at \\... a rat-fur hooded cloak, if someone would be\nsilly enough to give it the sname \\'rat\\'.\n\nThe second check is a little tricky. If you look at for instance\nyourself, and check the property **details:default:snames**, you will\nsee that it\\'s an array of names, for instance ({ \\\"kalle\\\", \\\"dot\\\",\n\\\"ser\\\", \\\"man\\\", \\\"pc\\\", \\\"person\\\", \\\"human\\\", \\\"male\\\", \\\"being\\\",\n\\\"mammal\\\", \\\"primate\\\" }).\n\nThe arr_to_set() call turns the above into (\\[ \\\"being\\\":1, \\\"dot\\\":1,\n\\\"human\\\":1, \\\"kalle\\\":1, \\\"male\\\":1, \\\"mammal\\\":1, \\\"man\\\":1, \\\"pc\\\":1,\n\\\"person\\\":1, \\\"primate\\\":1, \\\"ser\\\":1 \\]).\n\nAnd thus, we can check if the arr_to_set()\\[\\\"rat\\\"\\] is TRUE. If it is,\nthe sname \\\"rat\\\" is in the snames.\n\n --- <B>the $beast thing</B> ---\n /* We found a rat! */\n $beast = inv[i];\n ---\n\nNow, if you recall earlier, we called the rat in the scene \\\"beast\\\".\nNow, similarily, we must set the property \\$beast to the rat object when\nwe use the behavior. **The symbolic name we choose in the scene will be\nreferred to through \\$symbol in the system.**\n\nIn our example above, we made the script lib:beast:decide. This is a\nsignal hook name, and as such we must state that we\\'re adding a new\nhook to the system. The hook in question is \\'beast\\' as defined.\n\nSo, we simply do:\n\n\\* +setp \\\"Marrach:NIP:lib:beast init:hooks ({ \\\"beast\\\" })\\\"\n\nNow, as I said, we already have our servant with us in the room. So\nwe\\'re going to add the new library we made (Marrach:NIP:lib:beast) to\nthe servant.\n\n\\* +setp servant \\\"add beast\\\"\n\nAs we statically call the behavior database from within the script (bad\ncall, but for simplicity\\'s sake we\\'ll let that one slide), we don\\'t\nhave to do anything else.\n\nExcept start the NPC up.\n\n\\* +nip servant \\\"live\\\"\n\nAnd watch her freak out (as our rat is still in the room).\n\n\\-- Main.KalleAlm - 15 Jun 2003\n\n*Any parts of this confusing? Uncomprehensive? Stupid? Plain out wrong?\nFeel free to \\<A\nHREF=\\\"[mailto:kalle\\@marrach.skotos.net](mailto:kalle@marrach.skotos.net)\\\"\\>poke\nme\\</A\\>. I\\'ll probably listen. ;)*\n\nFor more, brief examples, move on to [page 2](NIPTutorialSceneryII).\n","dir":"/docs/unedited/","name":"NIPTutorialScenery.md","path":"docs/unedited/NIPTutorialScenery.md","url":"/docs/unedited/NIPTutorialScenery.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1056231500\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPTutorialScenery\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>Example scenes, situations and\nconditions.\\</FONT\\>\n\n**Introduction**\n\nAs you perhaps saw in [the previous tutorial](NIPTutorialScenery), the\nconditional behavior can be roughly divided into scenes, and the scenes\ncan be divided into scene conditions, and scene situations.\n\nLet\\'s define those three aspects before we move on:\n\n\\* **A scene:**\\<br\\>A set up of conditions, with a variety of\nconditions, each condition with explicit behavior data. E.g. \\\"commoner\nNPC meeting lord or lady\\\" \\* **A condition:**\\<br\\>A condition is an\nexternal object, with a symbolic name, which defines a scene. E.g.\n\\\"noble\\\" \\* **A situation:**\\<br\\>A situation is added onto the\nconditions of a scene, and defines the scene\\'s current situation. E.g.\n\\\"REVERENT\\\" or \\\"INDIFFERENT\\\" could be in our case used depending on\nthe type of commoner NPC.\n\n\\-- Main.KalleAlm - 21 Jun 2003\n","dir":"/docs/unedited/","name":"NIPTutorialSceneryII.md","path":"docs/unedited/NIPTutorialSceneryII.md","url":"/docs/unedited/NIPTutorialSceneryII.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1138644304\\\" format=\\\"1.0\\\"\nversion=\\\"1.8\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n[NIPStyle]{.twiki-macro .INCLUDE}\n\n\\<font class=\\\"title\\\"\\>Tutorial: NPC Auto-descriptions using\nspawn-traits\\</font\\>\n\n[Spawn-traits](NIPLibRefSpawnTraits) is one of the most recent additions\nto the NPC system (as of 29 Nov 2003). It\\'s a very simple and\nstraightforward feature, with only one internal script.\n\nWhat\\'s tricky about it, however, are the settings required to properly\nmake use of it.\n\nThe settings are contained in a single property, **nip:spawn:traits**.\nThis property is a mapping, where each key represents a property-name.\nEach corresponding value is a string array with each and every possible\nalternative value for the property. For example,\n\n ([ \"appearance:eye:color\" : ({ \"green\", \"emerald\", \"brown\", \"blue\" }) ])\n\nIn the above case (provided the property \\'nip:spawn:traits\\' was set to\nthe above), whenever a spawn of the NPC was made, the property\n\\\"appearance:eye:color\\\" would be set to \\\"green\\\", \\\"emerald\\\",\n\\\"brown\\\" or \\\"blue\\\", at random.\n\n ([ \"appearance:eye:color\" : ({ \"green\"; \"emerald\", \"brown\"; \"blue\" }),\n \"appearance:eye:type\" : ({ \"sad\", \"squinty\", \"narrow\", \"bright\"; \"shallow\", \"deep\" }),\n \"appearance:fur:color\" : ({ \"brown\", \"black\", \"brown-striped\"; \"black-striped\" }) ])\n -etc-\n\nTo use these appearance traits properly, doing the above is not enough.\nWe also need to use SAM-tags to describe the NPC dynamically. In the\nabove case, I would set the eye/eyes details to the following:\n\n brief = $(this.appearance:eye:type) $(this.appearance:eye:color) eyes\n look = A pair of eyes, $(this.appearance:eye:color) and $(this.appearance:eye:type).\n examine = A pair of $(this.appearance:eye:type) $(this.appearance:eye:color) eyes.\n\nBy using \\$(this.propertyname) I am directly referring to the value of a\nproperty in the NPC itself. Thus, if I set appearance:eye:type to\n\\\"bright\\\" and appearance:eye:color to \\\"green\\\" in my NPC above, doing\na look on its eyes would return \\\"A pair of eyes, green and bright.\\\"\nand an examine would give me \\\"A pair of bright green eyes.\\\"\n\nAt this point, we have enough info to go on and put this system into an\nNPC.\n\nNow, we can do this several ways. One way is to sit down and think up\nthe various variable traits that this particular NPC should have.\nAnother way is to make a static version of the NPC first and then\nreplace the static parts with dynamic parts as we find them. There is no\ngood or bad, or right or wrong. The latter would take longer time as\nthere\\'s an extra step of making a static version first, while the first\nrequires are more thoughtful approach. In this case, I\\'m going to use\nthe first.\n\nSo, I make an NPC. I make a dog, of unknown origin, which means I have a\nlot of features I can put in. I can make its coat spotted or striped, or\nstained. I can give it up to three coat colors, and I can make it\nlong-haired or short-haired, curly or straight. I can give it blue eyes\nor green or brown, short nose, long nose, thin nose, triangular ears,\nfloppy ears, big ears, small ears, long tail, furry tail, big paws, long\nlegs, robust legs, etc etc etc etc. The possibilities are practically\nendless.\n\nBut I start out by defining the various parts of my dog that I want\n\\\"alterable\\\" (or \\\"dynamic\\\"):\n\n - ears\n - size, shape\n - nose\n - shape\n - tail\n - length, type\n - legs\n - length, type\n - coat\n - type, color, alternate colors\n - hair\n - length, type\n - paws\n - type\n - eyes\n - color, type\n - head\n - size, type\n - dog (prime)\n - size\n\nNow I have a bunch of variable traits for my dog that will make each\nspawned copy of it seem very unique to anyone who gives it a good look.\nIt\\'s necessary to map each of these \\\"traits\\\" to a property-name now,\nas I will refer to them from the description of the dog later on. I am\npersonally going to use the \\\"appearance\\\" property namespace for each\ntrait, but feel free to use whatever you want:\n\n - ears\n - size = appearance:ear:size\n - shape = appearance:ear:shape\n - nose\n - shape = appearance:nose:shape\n - tail\n - length = appearance:tail:length\n - type = appearance:tail:type\n - legs\n - length = appearance:leg:length\n - type = appearance:leg:type\n - coat\n - type = appearance:coat:type\n - color = appearance:coat:color\n - alt colors = appearance:coat:altcolor\n - hair\n - length = appearance:hair:length\n - type = appearance:hair:type\n - paws\n - type = appearance:paw:type\n - eyes\n - color = appearance:eye:color\n - type = appearance:eye:type\n - head\n - size = appearance:head:size\n - type = appearance:head:type\n - dog (prime)\n - size = appearance:dog:size\n\nNow, before I start coming up with the various values for each trait,\nI\\'m making my dog. I\\'m not going to be too detailed on the creation of\nit, but I\\'m going to tell you the things I do that are affected by\nthis.\n\nFirst off, I\\'m making the following details on my dog:\n\n - default (prime)\n - ear\n - ears\n - nose\n - tail\n - leg\n - legs\n - coat\n - fur\n - paw\n - paws\n - eye\n - eyes\n - head\n - face\n - body\n\nFor the default detail, I\\'m setting the following descriptions:\n\n brief = $(this.appearance:dog:size) $(this.appearance:coat:color) dog\n look = A $(this.appearance:dog:size) dog with $(this.appearance:coat:color) and $(this.appearance:coat:altcolor) coat. \n\nNext, I\\'m making the ears. These are two separate details, \\\"ear\\\" and\n\\\"ears\\\". For ear,\n\n brief = $(this.appearance:ear:size) $(this.appearance:ear:shape) ear\n look = The $(this.appearance:ear:size) $(this.appearance:ear:shape) ear of a $(this.appearance:dog:size) dog.\n\nAnd for ears,\n\n brief = $(this.appearance:ear:size) $(this.appearance:ear:shape) ears\n look = A pair of $(this.appearance:ear:size) $(this.appearance:ear:shape) ears.\n\nThe nose,\n\n brief = $(this.appearance:nose:shape) nose\n look = The $(this.appearance:nose:shape) nose of a $(this.appearance:dog:size) dog.\n\nTail,\n\n brief = $(this.appearance:tail:length) $(this.appearance:tail:type) tail\n look = The $(this.appearance:tail:length) $(this.appearance:tail:type) tail of a $(this.appearance:dog:size) dog.\n\nThe legs are similar to the ears. I make a leg, and a legs, detail.\n\nLeg,\n\n brief = $(this.appearance:leg:length) $(this.appearance:leg:type) leg\n look = One of four $(this.appearance:leg:length) $(this.appearance:leg:type) legs, {?when | $(this.base:stance) | 3 |all of which are comfortably tucked beneath the $(this.appearance:dog:size) dog's body. | 4 |currently sat upon. | * |supporting the $(this.appearance:dog:size) dog's body. }\n\nLegs,\n\n brief = $(this.appearance:leg:length) $(this.appearance:leg:type) legs\n look = Four $(this.appearance:leg:length) $(this.appearance:leg:type) legs, {?when | $(this.base:stance) | 3 |all of which are comfortably tucked beneath the $(this.appearance:dog:size) dog's body. | 4 |currently sat upon. | * |supporting the $(this.appearance:dog:size) dog's body. }\n\nPaw,\n\n brief = $(this.appearance:paw:type) paw\n look = One of four $(this.appearance:paw:type) paws.\n\nPaws,\n\n brief = $(this.appearance:paw:type) paws\n look = The $(this.appearance:paw:type) paws of a $(this.appearance:dog:size) dog.\n\nEye,\n\n brief = $(this.appearance:eye:type) $(this.appearance:eye:color) eye\n look = One of two $(this.appearance:eye:type) $(this.appearance:eye:color) eyes.\n\nEyes,\n\n brief = $(this.appearance:eye:type) $(this.appearance:eye:color) eyes\n look = A pair of eyes, $(this.appearance:eye:color) and $(this.appearance:eye:type).\n\nHead,\n\n brief = $(this.appearance:head:size) $(this.appearance:head:type) head\n look = A $(this.appearance:dog:size) dog's $(this.appearance:head:size) $(this.appearance:head:type) head, framed by a pair of $(this.appearance:ear:size) $(this.appearance:ear:shape) ears.\n\nAt this point, we have a few more descriptive details left. Namely\n\\'coat\\', \\'fur\\', \\'body\\' and \\'face\\'. We\\'re going to include the\nother details in the description of these in some appropriate way.\n\nCoat,\n\n brief = $(this.appearance:coat:color) coat\n look = The $(this.appearance:dog:size) dog's $(this.appearance:hair:length) and $(this.appearance:hair:type) coat is $(this.appearance:coat:color) with $(this.appearance:coat:type) $(this.appearance:coat:altcolor).\n\nFur,\n\n brief = $(this.appearance:coat:color) fur\n look = The $(this.appearance:hair:length) $(this.appearance:hair:type) fur is $(this.appearance:coat:color) with $(this.appearance:coat:type) $(this.appearance:coat:altcolor).\n\nBody,\n\n brief = $(this.appearance:dog:size) body\n look = The $(this.appearance:dog:size) dog's body, with four $(this.appearance:leg:type) legs, one $(this.appearance:tail:type) tail and $(this.appearance:head:size) head.\n\nFace,\n\n brief = face\n look = The $(this.appearance:dog:size) dog's face, with $(this.appearance:eye:type) $(this.appearance:eye:color) eyes, and a $(this.appearance:nose:shape) nose.\n\nAnd we\\'re finally done describing the thing. Now we need to come up\nwith various values for each of the traits we used in the above.\n\n - ears\n - size = small, large\n - shape = floppy, triangular, straight, dangling\n - nose\n - shape = long, short, stumpy, wrinkled, smooth\n - tail\n - length = long, short\n - type = fluffy, straight\n - legs\n - length = long, short\n - type = robust, elegant, sinewy, muscular\n - coat\n - type = spotted, stained, striped\n - color = dark-brown, light-brown, brown, black, white, golden, red, grey, light-grey, dark-grey\n - alt colors = dark-brown, light-brown, brown, black, white, golden, red, grey, light-grey, dark-grey\n - hair\n - length = long, short, trimmed, wild\n - type = wavy, curly, straight\n - paws\n - type = big, small, heavy, thick\n - eyes\n - color = brown, dark-brown, light-brown, green, emerald, blue, dark-blue, light-blue, yellow, golden\n - type = sharp, bright, shallow, deep, dull, sad, mourning, playful, happy, calm\n - head\n - size = large, small\n - type = round, stretched, even, uneven, smooth\n - dog (prime)\n - size = small, medium-sized, large\n\nNow, we have a body, we\\'ve set it up with a bunch of details, and\nwe\\'ve decided on the spawn traits we want. Now we need to turn the dog\ninto an NIP NPC before we can actually put these into it!\n\nI\\'ve named my dog \\\"Examples:complete:NIP:dog\\\" (on S7 only).\n\n > +nip \"set Examples:complete:NIP:dog\"\n WELCOME TO THE 'NIP' CNPC SYSTEM!\n\n Hold one moment while the core library is set up in &lt;Examples:complete:NIP:dog> ...\n --> Implementing base.\n --> Adding base libraries.\n --> Inserting system signals.\n --> Setting revision according to current system state.\n Done!\n\n > +summon Examples:complete:NIP:dog\n A dog arrives.\n\n > +setp dog \"add spawn-traits\"\n Setting 'add' in &lt;Examples:complete:NIP:dog>;\n - from: nil\n - to: \"spawn-traits\"\n Attempting to add library ...\n The spawn-traits library has been loaded. This will look for the mapping \"nip:spawn:traits\", which \n could look like this: ([ \"appearance:color\" : ({ \"blue\", \"green\", \"red\" }), \"something:else\" : ({ 1,\n 2, 3 }) ]) -- in this case, the property \"appearance:color\" would be set to either \"blue\", \"green\" \n or \"red\" in the object, and the property \"something:else\" would be either 1, 2 or 3. This is good to\n make on-the-fly variations of CNPC's at spawn-time.\n &lt;Lib:NIP:lib:spawn-traits> loaded successfully.\n\nNow, we simply have to bunch all the traits we had above, together into\none big ass property. This:\\\\> - ears - size (appearance:ear:size) =\nsmall, large \\</pre\\> turns into \\\\>(\\[ \\\"appearance:ear:size\\\" : ({\n\\\"small\\\", \\\"large\\\" }) \\])\\</pre\\>\n\nAnd so on, until we have this:\\\\> (\\[ \\\"appearance:ear:size\\\" : ({\n\\\"small\\\", \\\"large\\\" }), \\\"appearance:ear:shape\\\" : ({ \\\"floppy\\\",\n\\\"triangular\\\", \\\"straight\\\", \\\"dangling\\\" }), \\\"appearance:nose:shape\\\"\n: ({ \\\"long\\\", \\\"short\\\", \\\"stumpy\\\", \\\"wrinkled\\\", \\\"smooth\\\" }),\n\\\"appearance:tail:length\\\" : ({ \\\"long\\\", \\\"short\\\" }),\n\\\"appearance:tail:type\\\" : ({ \\\"fluffy\\\", \\\"straight\\\" }),\n\\\"appearance:leg:length\\\" : ({ \\\"long\\\", \\\"short\\\" }),\n\\\"appearance:leg:type\\\" : ({ \\\"robust\\\", \\\"elegant\\\", \\\"sinewy\\\",\n\\\"muscular\\\" }), \\\"appearance:coat:type\\\" : ({ \\\"spotted\\\", \\\"stained\\\",\n\\\"striped\\\" }), \\\"appearance:coat:color\\\" : ({ \\\"dark-brown\\\",\n\\\"light-brown\\\", \\\"brown\\\", \\\"black\\\", \\\"white\\\", \\\"golden\\\", \\\"red\\\",\n\\\"grey\\\", \\\"light-grey\\\", \\\"dark-grey\\\" }), \\\"appearance:coat:altcolor\\\"\n: ({ \\\"dark-brown\\\", \\\"light-brown\\\", \\\"brown\\\", \\\"black\\\", \\\"white\\\",\n\\\"golden\\\", \\\"red\\\", \\\"grey\\\", \\\"light-grey\\\", \\\"dark-grey\\\" }),\n\\\"appearance:hair:length\\\" : ({ \\\"long\\\", \\\"short\\\", \\\"trimmed\\\",\n\\\"wild\\\" }), \\\"appearance:hair:type\\\" : ({ \\\"wavy\\\", \\\"curly\\\",\n\\\"straight\\\" }), \\\"appearance:paw:type\\\" : ({ \\\"big\\\", \\\"small\\\",\n\\\"heavy\\\", \\\"thick\\\" }), \\\"appearance:eye:color\\\" : ({ \\\"brown\\\",\n\\\"dark-brown\\\", \\\"light-brown\\\", \\\"green\\\", \\\"emerald\\\", \\\"blue\\\",\n\\\"dark-blue\\\", \\\"light-blue\\\", \\\"yellow\\\", \\\"golden\\\" }),\n\\\"appearance:eye:type\\\" : ({ \\\"sharp\\\", \\\"bright\\\", \\\"shallow\\\",\n\\\"deep\\\", \\\"dull\\\", \\\"sad\\\", \\\"mourning\\\", \\\"playful\\\", \\\"happy\\\",\n\\\"calm\\\" }), \\\"appearance:head:size\\\" : ({ \\\"large\\\", \\\"small\\\" }),\n\\\"appearance:head:type\\\" : ({ \\\"round\\\", \\\"stretched\\\", \\\"even\\\",\n\\\"uneven\\\", \\\"smooth\\\" }), \\\"appearance:dog:size\\\" : ({ \\\"small\\\",\n\\\"medium-sized\\\", \\\"large\\\" }) \\])\\</pre\\>\n\nSo, we \\...\\\\> \\> +setp dog \\\"nip:spawn:traits (\\[\n\\\"appearance:ear:size\\\" : ({ \\\"small\\\", \\\"large\\\" }),\n\\\"appearance:ear:shape\\\" : ({ \\\"floppy\\\", \\\"triangular\\\", \\\"straight\\\",\n\\\"dangling\\\" }), \\\"appearance:nose:shape\\\" : ({ \\\"long\\\", \\\"short\\\",\n\\\"stumpy\\\", \\\"wrinkled\\\", \\\"smooth\\\" }), \\\"appearance:tail:length\\\" : ({\n\\\"long\\\", \\\"short\\\" }), \\\"appearance:tail:type\\\" : ({ \\\"fluffy\\\",\n\\\"straight\\\" }), \\\"appearance:leg:length\\\" : ({ \\\"long\\\", \\\"short\\\" }),\n\\\"appearance:leg:type\\\" : ({ \\\"robust\\\", \\\"elegant\\\", \\\"sinewy\\\",\n\\\"muscular\\\" }), \\\"appearance:coat:type\\\" : ({ \\\"spotted\\\", \\\"stained\\\",\n\\\"striped\\\" }), \\\"appearance:coat:color\\\" : ({ \\\"dark-brown\\\",\n\\\"light-brown\\\", \\\"brown\\\", \\\"black\\\", \\\"white\\\", \\\"golden\\\", \\\"red\\\",\n\\\"grey\\\", \\\"light-grey\\\", \\\"dark-grey\\\" }), \\\"appearance:coat:altcolor\\\"\n: ({ \\\"dark-brown\\\", \\\"light-brown\\\", \\\"brown\\\", \\\"black\\\", \\\"white\\\",\n\\\"golden\\\", \\\"red\\\", \\\"grey\\\", \\\"light-grey\\\", \\\"dark-grey\\\" }),\n\\\"appearance:hair:length\\\" : ({ \\\"long\\\", \\\"short\\\", \\\"trimmed\\\",\n\\\"wild\\\" }), \\\"appearance:hair:type\\\" : ({ \\\"wavy\\\", \\\"curly\\\",\n\\\"straight\\\" }), \\\"appearance:paw:type\\\" : ({ \\\"big\\\", \\\"small\\\",\n\\\"heavy\\\", \\\"thick\\\" }), \\\"appearance:eye:color\\\" : ({ \\\"brown\\\",\n\\\"dark-brown\\\", \\\"light-brown\\\", \\\"green\\\", \\\"emerald\\\", \\\"blue\\\",\n\\\"dark-blue\\\", \\\"light-blue\\\", \\\"yellow\\\", \\\"golden\\\" }),\n\\\"appearance:eye:type\\\" : ({ \\\"sharp\\\", \\\"bright\\\", \\\"shallow\\\",\n\\\"deep\\\", \\\"dull\\\", \\\"sad\\\", \\\"mourning\\\", \\\"playful\\\", \\\"happy\\\",\n\\\"calm\\\" }), \\\"appearance:head:size\\\" : ({ \\\"large\\\", \\\"small\\\" }),\n\\\"appearance:head:type\\\" : ({ \\\"round\\\", \\\"stretched\\\", \\\"even\\\",\n\\\"uneven\\\", \\\"smooth\\\" }), \\\"appearance:dog:size\\\" : ({ \\\"small\\\",\n\\\"medium-sized\\\", \\\"large\\\" }) \\])\\</pre\\>\n\nAnd that\\'s it! Quite intimidating little command that last one, but it\nshouldn\\'t be too difficult to get the grip of it if you know the\nwhat\\'s.\n\n\\-- Main.KalleAlm - 29 Nov 2003\n\nOnce you\\'ve added spawn traits to your CNPC, you will probably want\nthose adjectives to show up on the details of them.\n\n\\<font color=red\\>Update: the information below is deprecated; inherit\nLib:NIP:EXT/setprop-post:appearance instead of adding a script manually.\nThe script below has been added to the main NIP distribution. HOWEVER,\nread below the greyed out part, as there is still stuff relevant to get\nthings working, **the nip:trait:appearance:adjectives part, in\nparticular!** \\--Kalle, Jan 29, 2006.\\</font\\>\n\n\\<font color=grey\\> The first thing you need to do is set up a script\nthat will add the adjectives to the detail. You can do this in the CNPC\nobject itself, or a CNPC parent object. If you are using spawn-traits\nfor numerous CNPCs, I would suggest setting it in the parent to save\nyourself some work.\n\nType +tool merry edit %Woename:Of:CNPC setprop-post:appearance\n\nIn that editor, you\\'ll write out the following script:\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\--\n\n /* \n D=Add/remove appearance traits to details. \n */\n\n int i, sz;\n\n if( this.\"nip:trait:appearance:names\" )\n $props = this.\"nip:trait:appearance:names\"[$(hook-property)];\n if( this.\"nip:trait:appearance:adjectives\" )\n $adjec = this.\"nip:trait:appearance:adjectives\"[$(hook-property)];\n\n if( !$props )\n $props = ({ });\n if( !$adjec )\n $adjec = ({ });\n\n if( typeof( $props ) != T_ARRAY )\n $props = ({ $props });\n if( typeof( $adjec ) != T_ARRAY )\n $adjec = ({ $adjec });\n\n sz = sizeof( $props ) > sizeof( $adjec ) ? sizeof( $props ) : sizeof( $adjec );\n\n if( $(hook-oldvalue) )\n {\n $o = explode( $(hook-oldvalue), \" \" );\n $os = sizeof( $o );\n }\n if( $(hook-value) )\n {\n $n = explode( $(hook-value), \" \" );\n $ns = sizeof( $n );\n }\n\n for( i = 0; i < sz; i++ ) {\n if( i < sizeof( $props )) {\n if( $(hook-oldvalue) )\n for( $x = 0; $x < $os; $x++ )\n Set( this, \"details:\" + $props[i] + \":sname:\" + $o[$x], nil );\n if( $(hook-value) )\n for( $x = 0; $x < $ns; $x++ )\n Set( this, \"details:\" + $props[i] + \":sname:\" + $n[$x],<br> TRUE );\n }\n if( i < sizeof( $adjec )) {\n if( $(hook-oldvalue) )\n for( $x = 0; $x < $os; $x++ )\n Set( this, \"details:\" + $adjec[i] + \":adjective:\" + $o[$x], nil );\n if( $(hook-value) )\n for( $x = 0; $x < $ns; $x++ )\n Set( this, \"details:\" + $adjec[i] + \":adjective:\" + $n[$x], TRUE );\n }\n }\n\n\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-\\-- \\</font\\>\n\nThe next thing you need to do is set up in the CNPC object itself (not a\nparent) the following property:\\<br\\>\nnip:trait:appearance:adjectives\\<br\\> which is what deems which details\nin the CNPC get which adjectives.\n\nSo say you have a SAM tag in the default detail\n\\$(this.appearance:eyecolor), you want to set (\\[\n\\\"appearance:eyecolor\\\":({ \\\"default\\\" }) \\])\n\nUsing a goldfish CNPC I coded up, this is an example:\n\n+setp fish \\\"nip:trait:appearance:adjectives (\\[\n\\\"appearance:body:shape\\\":({ \\\"body\\\" }), \\\"appearance:cheek:size\\\":({\n\\\"cheeks\\\" }), \\\"appearance:cheek:type\\\":({ \\\"cheeks\\\" }),\n\\\"appearance:fin:length\\\":({ \\\"fins\\\" }), \\\"appearance:<fish:color>\\\":({\n\\\"default\\\", \\\"body\\\", \\\"fins\\\", \\\"head\\\", \\\"scales\\\" }),\n\\\"appearance:<fish:shine>\\\":({ \\\"default\\\" }),\n\\\"appearance:gravel:color\\\":({ \\\"bowl\\\", \\\"gravel\\\" }),\n\\\"appearance:water:type\\\":({ \\\"bowl\\\", \\\"water\\\" }) \\])\n\nYou\\'ll notice I have SAM tags for fish color in the following details:\ndefault, body, fins, head, and scales. So the adjectives will be set in\neach of those details.\n\nAnd that\\'s it!\n\n\\-- Main.AnneWarren - 11 Aug 2004\n","dir":"/docs/unedited/","name":"NIPTutorialSpawnTraits.md","path":"docs/unedited/NIPTutorialSpawnTraits.md","url":"/docs/unedited/NIPTutorialSpawnTraits.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1076983761\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<UpdateIssue\\> [NIPUpdateRefStyle]{.twiki-macro\n.INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SYSTEM ISSUE \\#17:\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>DATE:\\</font\\> Feb 17th, 2004\n\n\\<font class=\\\"query\\\"\\>UPDATE AFFECTS:\\</font\\>\n[freemoting](NIPLibRefFreemoting)\n\n\\<font class=\\\"query\\\"\\>UPDATED BY:\\</font\\> Main.KalleAlm\n\n\\<font class=\\\"query\\\"\\>PROBLEM\\</font\\>\n\nNot really a problem, more like an insane solution to a problem that\nlead to a lot of issues. That added to the feature being poorly\ndocumented lead me to decide to rip the feature out entirely. This in\nturn lead to some incompatibilities, which rendered this update\nnecessary.\n\nThe issue in question is the fact that \\'freemoting\\' behavior data\nobjects were supposed to be named \\\"nip:behavior:freemoting:\\*\\\", while\nregular \\'emoting\\' behavior data objects were named\n\\'nip:behavior:\\*\\\". A lot of people failed to realize that they had to\nset both an \\\"emoting\\\" and a \\\"freemoting\\\" property-reference.\n\n\\<font class=\\\"query\\\"\\>REQUIRED USER-MEASURES\\</font\\>\n\nNone.\n\n\\<font class=\\\"query\\\"\\>SOLUTION\\</font\\>\n\nThus, the freemoting library will now look for the\n\\\"nip:behavior:\\*\\\"-property, instead.\n\nSince some have set the \\\"nip:behavior:**freemoting**:\\*\\\"-properties\nalready, the update goes through any NPC with freemoting set, and moves\nthis (if applicable) to \\\"nip:behavior:\\*\\\".\n\n\\-- Main.KalleAlm - 16 Feb 2004\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPUpdateRef17.md","path":"docs/unedited/NIPUpdateRef17.md","url":"/docs/unedited/NIPUpdateRef17.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1154680080\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<UpdateIssue\\> [NIPUpdateRefStyle]{.twiki-macro\n.INCLUDE}\n\n\\<font class=\\\"title\\\"\\>SYSTEM ISSUE \\#42:\\</font\\>\n\n\\<font class=\\\"query\\\"\\>DATE:\\</font\\> August 3, 2006.\n\n\\<font class=\\\"query\\\"\\>UPDATE AFFECTS:\\</font\\> [Prey](NIPLibRefPrey),\n[fighting-fake](NIPLibRefFightingFake).\n\n\\<font class=\\\"query\\\"\\>UPDATED BY:\\</font\\> Main.KalleAlm\n\n\\<font class=\\\"query\\\"\\>PROBLEM\\</font\\>\n\nStaffers had mentioned bugs where NPC\\'s using the\n[fighting-fake](NIPLibRefFightingFake) library did not die all the time.\nThe reason for this was that the [prey](NIPLibRefPrey) library had an\nisolated function for handling death, which was not shared among the\nlibraries. The death concept of the [prey](NIPLibRefPrey) library was\nmoved out and turned into its own NIP lib, called simply\n[death](NIPLibRefDeath). This poses several problems to exsting nippers,\nwhere the most prominent is that NPC\\'s will need the \\\"nip/die\\\" action\nhandler or they will fail to shutdown when killed.\n\n\\<font class=\\\"query\\\"\\>REQUIRED USER-MEASURES\\</font\\>\n\nNothing. If nippers appear to have become immortal in your game (where\nthey are killed but don\\'t stop moving around), doing a `+ncs update`\nshould solve the issue permanently.\n\n\\<font class=\\\"query\\\"\\>SOLUTION\\</font\\>\n\nThe [prey](NIPLibRefPrey) library\\'s death functionality was turned into\n[its own NIP lib](NIPLibRefDeath), as it turned out to be useful in\nother cases as well ([fighting-fake](NIPLibRefFightingFake)). The\n[prey](NIPLibRefPrey) library now uses a much simplified death handler,\nbut all current prey-enabled nippers will add the\n[death](NIPLibRefDeath) library, as it has been the default until this\npoint.\n\nThis update is in fact 3 separate updates (40-42) which juggle things\naround a bit. For instance the \\\"nip:trait:prey:rot_time\\\" (and such)\nproperties have been moved out of the prey library and thus have been\nrenamed to \\\"nip:trait:death:rot_time\\\".\n\n\\-- Main.KalleAlm - 04 Aug 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPUpdateRef42.md","path":"docs/unedited/NIPUpdateRef42.md","url":"/docs/unedited/NIPUpdateRef42.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1161786561\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<UpdateIssue\\> [NIPUpdateRefStyle]{.twiki-macro\n.INCLUDE}\n\n\\<font class=\\\"title\\\"\\>SYSTEM ISSUE \\#43:\\</font\\>\n\n\\<font class=\\\"query\\\"\\>DATE:\\</font\\> October 25th, 2006.\n\n\\<font class=\\\"query\\\"\\>UPDATE AFFECTS:\\</font\\>\n[Death](NIPLibRefDeath).\n\n\\<font class=\\\"query\\\"\\>UPDATED BY:\\</font\\> Main.KalleAlm\n\n\\<font class=\\\"query\\\"\\>PROBLEM\\</font\\>\n\nNippers using [death](NIPLibRefDeath), but not [prey](NIPLibRefPrey),\nwould fail to lose volition upon death.\n\n\\<font class=\\\"query\\\"\\>REQUIRED USER-MEASURES\\</font\\>\n\nPerform NCS update as normally.\n\n\\<font class=\\\"query\\\"\\>SOLUTION\\</font\\>\n\nThe [death](NIPLibRefDeath) library now sets volition when a child is\nspawned, which allows the UrParent to have non-volition. This in turn\nallows the individual children to unset volition upon death.\n\n\\-- Main.KalleAlm - 25 Oct 2006\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPUpdateRef43.md","path":"docs/unedited/NIPUpdateRef43.md","url":"/docs/unedited/NIPUpdateRef43.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1067892540\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% %META:TOPICPARENT{name=\\\"NIPSystemReference\\\"}%\n\\<UpdateIssue\\> [NIPUpdateRefStyle]{.twiki-macro .INCLUDE}\n\n\\<FONT CLASS=\\\"title\\\"\\>SYSTEM ISSUE \\#9:\\</FONT\\>\n\n\\<font class=\\\"query\\\"\\>DATE:\\</font\\> Nov 1st, 2003.\n\n\\<font class=\\\"query\\\"\\>UPDATE AFFECTS:\\</font\\> All NPC\\'s.\n\n\\<font class=\\\"query\\\"\\>UPDATED BY:\\</font\\> Main.KalleAlm\n\n\\<font class=\\\"query\\\"\\>PROBLEM\\</font\\>\n\nPre-update \\#9, NIP would handle spawning of NPC\\'s in a\nbrute-force-copy NIP and NIP-CORE namespace properties down into the\nchild. This worked, but had a few side-effects that were undesirable.\n\nFor instance, urinheritage was completely discarded this way. Also, any\nupdates to the parent of the spawn(s) would **not** be applied to the\nchild automagically. This resulted in some complications for instance\nwhen an NPC with a lot of spawns had to be modified. The procedure to do\nthis would involve having to slay and re-spawn all the children, thereby\nlosing all their then-customized data.\n\n\\<font class=\\\"query\\\"\\>REQUIRED USER-MEASURES\\</font\\>\n\nThis update is automatic, but will, despite this, require some user\ninteraction to be fully incorporated into NPC\\'s. Your NPC\\'s have\nprobably crashed. Or, new spawns of NPC\\'s will crash with an error\noutput similar to the following:\n\n --\n <b>Index on bad type</b>\n /base/obj/thing#105072 [NIP:bodies:servants:guard:short-male]#105072\n 53 /core/lib/core_scripts perform_delayed_call\n /usr/SkotOS/data/mcontext#-1\n 35 /usr/SkotOS/data/mcontext merry_continuation\n 100 /usr/SkotOS/lib/merryapi run_merry\n /usr/SkotOS/data/merry#-1\n 243 /usr/SkotOS/data/merry evaluate\n /usr/SkotOS/merry/9e259fba01208029b7e4423a352c0f75 M<[NIP:bodies:servants:guard:short-male]#105072/lib:core:sysupdate>\n 67 /usr/SkotOS/lib/merrynode evaluate\n 27 /usr/SkotOS/merry/9e259fba01208029b7e4423a352c0f75 merry\n 400 /usr/SkotOS/lib/merrynode Call\n 100 /usr/SkotOS/lib/merryapi run_merry\n /usr/SkotOS/data/merry#-1\n 243 /usr/SkotOS/data/merry evaluate\n /usr/SkotOS/merry/9a1238ccb728625f20f86b9f2f556a9f M<[NIP:bodies:servants:guard:short-male]#105072/lib:update:5>\n 67 /usr/SkotOS/lib/merrynode evaluate\n 12 /usr/SkotOS/merry/9a1238ccb728625f20f86b9f2f556a9f merry\n ---\n\nWhen this occurs, you will need to summon the parent NPC, and update it.\nThis is done the following way:\n\n\\* 1. +summon npc:woe:name \\* 2. +nip *NPC* \\\"update\\\" \\* 3. +unsummon\nnpc:woe:name\n\nAll spawns of the NPC must be destroyed and re-created. This is a\none-timer, and an unfortunate one. After all, this is what this issue is\nhere to deal with \\-- so that we won\\'t ever have to slay spawns again.\n\n\\<font class=\\\"query\\\"\\>SOLUTION\\</font\\>\n\nThis was solved by exporting the namespaces NIP and NIP-CORE. This is\ndone automatically. A *coder* doesn\\'t have to worry about this update\nat all. He/She can still set NIP and NIP-CORE properties as he pleases,\nand these will be transferred to the exported namespace automatically.\nThey will additionally be available as usual through the NIP or NIP-CORE\nnamespaces, as exported properties are, naturally.\n\n\\-- Main.KalleAlm - 03 Nov 2003\n\n\\<font class=\\\"query\\\"\\>COMMENTS AND SUGGESTIONS, THOUGHTS ETC. ABOUT\nTHIS SUBJECT\\</font\\>\\<br\\> (Please, don\\'t forget to add your name to\nyour comment, preferably your TWiki-name.)\n","dir":"/docs/unedited/","name":"NIPUpdateRef9.md","path":"docs/unedited/NIPUpdateRef9.md","url":"/docs/unedited/NIPUpdateRef9.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1085298616\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% *I want to \\...*\n\n\\* [\\... read about what all this *is*!](NIPWarmUpWhatIsNIP) \\* [\\...\nlearn how to *use* it - work with it, as a coder.](NIPWarmUpHowWork) \\*\n[\\... learn how to use it as a plotter/generally mischievous\nperson.](NIPWarmUpHowUse)\n","dir":"/docs/unedited/","name":"NIPWarmUpTopics.md","path":"docs/unedited/NIPWarmUpTopics.md","url":"/docs/unedited/NIPWarmUpTopics.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1067938740\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}%    \\<font class=\\\"hook\\\"\\>H\\</font\\>\n","dir":"/docs/unedited/","name":"NipH.md","path":"docs/unedited/NipH.md","url":"/docs/unedited/NipH.html"},{"layout":"default","title":null,"content":"%META:TOPICINFO{author=\\\"kallea\\\" date=\\\"1067938680\\\" format=\\\"1.0\\\"\nversion=\\\"1.1\\\"}% \\<font class=\\\"lib\\\"\\>L\\</font\\>   \n","dir":"/docs/unedited/","name":"NipL.md","path":"docs/unedited/NipL.md","url":"/docs/unedited/NipL.html"},{"sort":1,"layout":"default","title":"NIP","content":"<h1 id=\"nip\">NIP</h1>\n","dir":"/docs/","name":"index.md","path":"docs/index.md","url":"/docs/"},{"sort":2,"layout":"default","title":"Unedited","content":"<h1 id=\"unedited\">Unedited</h1>\n","dir":"/docs/unedited/","name":"index.md","path":"docs/unedited/index.md","url":"/docs/unedited/"}]